// Generated by Bisonc++ V4.13.01 on Fri, 30 Jun 2017 15:11:23 +0530

// $insert class.ih
#include "parser.ih"

// The FIRST element of SR arrays shown below uses `d_type', defining the
// state's type, and `d_lastIdx' containing the last element's index. If
// d_lastIdx contains the REQ_TOKEN bitflag (see below) then the state needs
// a token: if in this state d_token__ is _UNDETERMINED_, nextToken() will be
// called

// The LAST element of SR arrays uses `d_token' containing the last retrieved
// token to speed up the (linear) seach.  Except for the first element of SR
// arrays, the field `d_action' is used to determine what to do next. If
// positive, it represents the next state (used with SHIFT); if zero, it
// indicates `ACCEPT', if negative, -d_action represents the number of the
// rule to reduce to.

// `lookup()' tries to find d_token__ in the current SR array. If it fails, and
// there is no default reduction UNEXPECTED_TOKEN__ is thrown, which is then
// caught by the error-recovery function.

// The error-recovery function will pop elements off the stack until a state
// having bit flag ERR_ITEM is found. This state has a transition on _error_
// which is applied. In this _error_ state, while the current token is not a
// proper continuation, new tokens are obtained by nextToken(). If such a
// token is found, error recovery is successful and the token is
// handled according to the error state's SR table and parsing continues.
// During error recovery semantic actions are ignored.

// A state flagged with the DEF_RED flag will perform a default
// reduction if no other continuations are available for the current token.

// The ACCEPT STATE never shows a default reduction: when it is reached the
// parser returns ACCEPT(). During the grammar
// analysis phase a default reduction may have been defined, but it is
// removed during the state-definition phase.

// So:
//      s_x[] = 
//      {
//                  [_field_1_]         [_field_2_]
//
// First element:   {state-type,        idx of last element},
// Other elements:  {required token,    action to perform},
//                                      ( < 0: reduce, 
//                                          0: ACCEPT,
//                                        > 0: next state)
// Last element:    {set to d_token__,    action to perform}
//      }

// When the --thread-safe option is specified, all static data are defined as
// const. If --thread-safe is not provided, the state-tables are not defined
// as const, since the lookup() function below will modify them


namespace // anonymous
{
    char const author[] = "Frank B. Brokken (f.b.brokken@rug.nl)";

    enum 
    {
        STACK_EXPANSION = 5     // size to expand the state-stack with when
                                // full
    };

    enum ReservedTokens
    {
        PARSE_ACCEPT     = 0,   // `ACCEPT' TRANSITION
        _UNDETERMINED_   = -2,
        _EOF_            = -1,
        _error_          = 256
    };
    enum StateType       // modify statetype/data.cc when this enum changes
    {
        NORMAL,
        ERR_ITEM,
        REQ_TOKEN,
        ERR_REQ,    // ERR_ITEM | REQ_TOKEN
        DEF_RED,    // state having default reduction
        ERR_DEF,    // ERR_ITEM | DEF_RED
        REQ_DEF,    // REQ_TOKEN | DEF_RED
        ERR_REQ_DEF // ERR_ITEM | REQ_TOKEN | DEF_RED
    };    
    struct PI__     // Production Info
    {
        size_t d_nonTerm; // identification number of this production's
                            // non-terminal 
        size_t d_size;    // number of elements in this production 
    };

    struct SR__     // Shift Reduce info, see its description above
    {
        union
        {
            int _field_1_;      // initializer, allowing initializations 
                                // of the SR s_[] arrays
            int d_type;
            int d_token;
        };
        union
        {
            int _field_2_;

            int d_lastIdx;          // if negative, the state uses SHIFT
            int d_action;           // may be negative (reduce), 
                                    // postive (shift), or 0 (accept)
            size_t d_errorState;    // used with Error states
        };
    };

    // $insert staticdata
    
// Productions Info Records:
PI__ const s_productionInfo[] = 
{
     {0, 0}, // not used: reduction values are negative
     {296, 1}, // 1: program ->  protocol_list
     {297, 1}, // 2: protocol_list ->  protocol
     {297, 2}, // 3: protocol_list ->  protocol protocol_list
     {298, 12}, // 4: protocol (PROTOCOL) ->  PROTOCOL NAME '(' opt_varlist ')' ':' PARTY party_list '{' #0001 statement_list '}'
     {299, 0}, // 5: #0001 ->  <empty>
     {300, 1}, // 6: party_list (NAME) ->  NAME
     {300, 3}, // 7: party_list (NAME) ->  NAME ',' party_list
     {301, 0}, // 8: opt_varlist ->  <empty>
     {301, 1}, // 9: opt_varlist ->  varlist
     {302, 1}, // 10: varlist ->  var_decl
     {302, 3}, // 11: varlist (',') ->  varlist ',' var_decl
     {303, 2}, // 12: var_decl (INTEGER) ->  INTEGER NAME
     {303, 2}, // 13: var_decl (FIELD) ->  FIELD NAME
     {304, 1}, // 14: type_decl (NAME) ->  NAME
     {305, 1}, // 15: declaration_statement ->  variable_declaration
     {306, 2}, // 16: variable_declaration (';') ->  declaration ';'
     {307, 2}, // 17: declaration (INTEGER) ->  INTEGER n_list
     {307, 2}, // 18: declaration ->  type_decl n_list
     {308, 1}, // 19: n_list (NAME) ->  NAME
     {308, 3}, // 20: n_list (',') ->  n_list ',' NAME
     {309, 0}, // 21: statement_list ->  <empty>
     {309, 2}, // 22: statement_list ->  statement_list statement
     {310, 1}, // 23: statement ->  assignment_statement
     {310, 1}, // 24: statement ->  mult_statement
     {310, 1}, // 25: statement ->  pvt_statement
     {310, 1}, // 26: statement ->  send_statement
     {310, 1}, // 27: statement ->  session_call
     {310, 1}, // 28: statement ->  tying_statement
     {310, 1}, // 29: statement ->  declaration_statement
     {311, 3}, // 30: mult_statement ('{') ->  '{' statement_list '}'
     {312, 6}, // 31: pvt_statement (IN) ->  IN party_id ':' '{' statement_list '}'
     {313, 4}, // 32: tying_statement (':') ->  party_id ':' NAME ';'
     {314, 4}, // 33: assignment_statement (ASSIGN) ->  variable ASSIGN arith_expression ';'
     {314, 4}, // 34: assignment_statement (ASSIGN) ->  variable ASSIGN random ';'
     {315, 1}, // 35: random (RAND) ->  RAND
     {316, 8}, // 36: session_call (OPEN) ->  OPEN NAME AS NAME '{' statement_list '}' ';'
     {317, 8}, // 37: send_statement ('.') ->  party_id '.' variable SEND party_id '.' variable ';'
     {317, 6}, // 38: send_statement (SEND) ->  party_id SEND party_id '.' variable ';'
     {317, 6}, // 39: send_statement ('.') ->  party_id '.' variable SEND party_id ';'
     {318, 1}, // 40: party_id (NAME) ->  NAME
     {318, 1}, // 41: party_id (ENV) ->  ENV
     {318, 1}, // 42: party_id (IDEAL) ->  IDEAL
     {319, 3}, // 43: arith_expression ('+') ->  operand '+' operand
     {319, 3}, // 44: arith_expression ('-') ->  operand '-' operand
     {319, 3}, // 45: arith_expression ('*') ->  operand '*' operand
     {319, 3}, // 46: arith_expression ('/') ->  operand '/' operand
     {319, 2}, // 47: arith_expression (UMINUS) ->  '-' operand
     {319, 3}, // 48: arith_expression ('(') ->  '(' operand ')'
     {319, 1}, // 49: arith_expression ->  expression_term
     {320, 1}, // 50: operand ->  arith_expression
     {321, 1}, // 51: expression_term ->  variable
     {321, 1}, // 52: expression_term ->  constant
     {322, 1}, // 53: variable (NAME) ->  NAME
     {323, 1}, // 54: constant (INTEGER_NUMBER) ->  INTEGER_NUMBER
     {324, 1}, // 55: program_$ ->  program
};

// State info and SR__ transitions for each state.


SR__ s_0[] =
{
    { { REQ_TOKEN}, { 5} },                 
    { {       296}, { 1} }, // program      
    { {       297}, { 2} }, // protocol_list
    { {       298}, { 3} }, // protocol     
    { {       261}, { 4} }, // PROTOCOL     
    { {         0}, { 0} },                 
};

SR__ s_1[] =
{
    { { REQ_TOKEN}, {            2} }, 
    { {     _EOF_}, { PARSE_ACCEPT} }, 
    { {         0}, {            0} }, 
};

SR__ s_2[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -1} }, 
};

SR__ s_3[] =
{
    { { REQ_DEF}, {  4} },                 
    { {     297}, {  5} }, // protocol_list
    { {     298}, {  3} }, // protocol     
    { {     261}, {  4} }, // PROTOCOL     
    { {       0}, { -2} },                 
};

SR__ s_4[] =
{
    { { REQ_TOKEN}, { 2} },        
    { {       258}, { 6} }, // NAME
    { {         0}, { 0} },        
};

SR__ s_5[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -3} }, 
};

SR__ s_6[] =
{
    { { REQ_TOKEN}, { 2} },       
    { {        40}, { 7} }, // '('
    { {         0}, { 0} },       
};

SR__ s_7[] =
{
    { { REQ_DEF}, {  6} },               
    { {     301}, {  8} }, // opt_varlist
    { {     302}, {  9} }, // varlist    
    { {     303}, { 10} }, // var_decl   
    { {     259}, { 11} }, // INTEGER    
    { {     260}, { 12} }, // FIELD      
    { {       0}, { -8} },               
};

SR__ s_8[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        41}, { 13} }, // ')'
    { {         0}, {  0} },       
};

SR__ s_9[] =
{
    { { REQ_DEF}, {  2} },       
    { {      44}, { 14} }, // ','
    { {       0}, { -9} },       
};

SR__ s_10[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -10} }, 
};

SR__ s_11[] =
{
    { { REQ_TOKEN}, {  2} },        
    { {       258}, { 15} }, // NAME
    { {         0}, {  0} },        
};

SR__ s_12[] =
{
    { { REQ_TOKEN}, {  2} },        
    { {       258}, { 16} }, // NAME
    { {         0}, {  0} },        
};

SR__ s_13[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        58}, { 17} }, // ':'
    { {         0}, {  0} },       
};

SR__ s_14[] =
{
    { { REQ_TOKEN}, {  4} },            
    { {       303}, { 18} }, // var_decl
    { {       259}, { 11} }, // INTEGER 
    { {       260}, { 12} }, // FIELD   
    { {         0}, {  0} },            
};

SR__ s_15[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -12} }, 
};

SR__ s_16[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -13} }, 
};

SR__ s_17[] =
{
    { { REQ_TOKEN}, {  2} },         
    { {       263}, { 19} }, // PARTY
    { {         0}, {  0} },         
};

SR__ s_18[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -11} }, 
};

SR__ s_19[] =
{
    { { REQ_TOKEN}, {  3} },              
    { {       300}, { 20} }, // party_list
    { {       258}, { 21} }, // NAME      
    { {         0}, {  0} },              
};

SR__ s_20[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {       123}, { 22} }, // '{'
    { {         0}, {  0} },       
};

SR__ s_21[] =
{
    { { REQ_DEF}, {  2} },       
    { {      44}, { 23} }, // ','
    { {       0}, { -6} },       
};

SR__ s_22[] =
{
    { { DEF_RED}, {  2} },         
    { {     299}, { 24} }, // #0001
    { {       0}, { -5} },         
};

SR__ s_23[] =
{
    { { REQ_TOKEN}, {  3} },              
    { {       300}, { 25} }, // party_list
    { {       258}, { 21} }, // NAME      
    { {         0}, {  0} },              
};

SR__ s_24[] =
{
    { { DEF_RED}, {   2} },                  
    { {     309}, {  26} }, // statement_list
    { {       0}, { -21} },                  
};

SR__ s_25[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -7} }, 
};

SR__ s_26[] =
{
    { { REQ_TOKEN}, { 22} },                         
    { {       125}, { 27} }, // '}'                  
    { {       310}, { 28} }, // statement            
    { {       314}, { 29} }, // assignment_statement 
    { {       311}, { 30} }, // mult_statement       
    { {       312}, { 31} }, // pvt_statement        
    { {       317}, { 32} }, // send_statement       
    { {       316}, { 33} }, // session_call         
    { {       313}, { 34} }, // tying_statement      
    { {       305}, { 35} }, // declaration_statement
    { {       322}, { 36} }, // variable             
    { {       123}, { 37} }, // '{'                  
    { {       267}, { 38} }, // IN                   
    { {       318}, { 39} }, // party_id             
    { {       268}, { 40} }, // OPEN                 
    { {       306}, { 41} }, // variable_declaration 
    { {       258}, { 42} }, // NAME                 
    { {       266}, { 43} }, // ENV                  
    { {       265}, { 44} }, // IDEAL                
    { {       307}, { 45} }, // declaration          
    { {       259}, { 46} }, // INTEGER              
    { {       304}, { 47} }, // type_decl            
    { {         0}, {  0} },                         
};

SR__ s_27[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -4} }, 
};

SR__ s_28[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -22} }, 
};

SR__ s_29[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -23} }, 
};

SR__ s_30[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -24} }, 
};

SR__ s_31[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -25} }, 
};

SR__ s_32[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -26} }, 
};

SR__ s_33[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -27} }, 
};

SR__ s_34[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -28} }, 
};

SR__ s_35[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -29} }, 
};

SR__ s_36[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {       262}, { 48} }, // ASSIGN
    { {         0}, {  0} },          
};

SR__ s_37[] =
{
    { { DEF_RED}, {   2} },                  
    { {     309}, {  49} }, // statement_list
    { {       0}, { -21} },                  
};

SR__ s_38[] =
{
    { { REQ_TOKEN}, {  5} },            
    { {       318}, { 50} }, // party_id
    { {       258}, { 51} }, // NAME    
    { {       266}, { 43} }, // ENV     
    { {       265}, { 44} }, // IDEAL   
    { {         0}, {  0} },            
};

SR__ s_39[] =
{
    { { REQ_TOKEN}, {  4} },        
    { {        46}, { 52} }, // '.' 
    { {       264}, { 53} }, // SEND
    { {        58}, { 54} }, // ':' 
    { {         0}, {  0} },        
};

SR__ s_40[] =
{
    { { REQ_TOKEN}, {  2} },        
    { {       258}, { 55} }, // NAME
    { {         0}, {  0} },        
};

SR__ s_41[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -15} }, 
};

SR__ s_42[] =
{
    { { REQ_DEF}, {   3} },          
    { {     262}, { -53} }, // ASSIGN
    { {     258}, { -14} }, // NAME  
    { {       0}, { -40} },          
};

SR__ s_43[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -41} }, 
};

SR__ s_44[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -42} }, 
};

SR__ s_45[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        59}, { 56} }, // ';'
    { {         0}, {  0} },       
};

SR__ s_46[] =
{
    { { REQ_TOKEN}, {  3} },          
    { {       308}, { 57} }, // n_list
    { {       258}, { 58} }, // NAME  
    { {         0}, {  0} },          
};

SR__ s_47[] =
{
    { { REQ_TOKEN}, {  3} },          
    { {       308}, { 59} }, // n_list
    { {       258}, { 58} }, // NAME  
    { {         0}, {  0} },          
};

SR__ s_48[] =
{
    { { REQ_TOKEN}, { 12} },                    
    { {       319}, { 60} }, // arith_expression
    { {       315}, { 61} }, // random          
    { {       320}, { 62} }, // operand         
    { {        45}, { 63} }, // '-'             
    { {        40}, { 64} }, // '('             
    { {       321}, { 65} }, // expression_term 
    { {       270}, { 66} }, // RAND            
    { {       322}, { 67} }, // variable        
    { {       323}, { 68} }, // constant        
    { {       258}, { 69} }, // NAME            
    { {       257}, { 70} }, // INTEGER_NUMBER  
    { {         0}, {  0} },                    
};

SR__ s_49[] =
{
    { { REQ_TOKEN}, { 22} },                         
    { {       125}, { 71} }, // '}'                  
    { {       310}, { 28} }, // statement            
    { {       314}, { 29} }, // assignment_statement 
    { {       311}, { 30} }, // mult_statement       
    { {       312}, { 31} }, // pvt_statement        
    { {       317}, { 32} }, // send_statement       
    { {       316}, { 33} }, // session_call         
    { {       313}, { 34} }, // tying_statement      
    { {       305}, { 35} }, // declaration_statement
    { {       322}, { 36} }, // variable             
    { {       123}, { 37} }, // '{'                  
    { {       267}, { 38} }, // IN                   
    { {       318}, { 39} }, // party_id             
    { {       268}, { 40} }, // OPEN                 
    { {       306}, { 41} }, // variable_declaration 
    { {       258}, { 42} }, // NAME                 
    { {       266}, { 43} }, // ENV                  
    { {       265}, { 44} }, // IDEAL                
    { {       307}, { 45} }, // declaration          
    { {       259}, { 46} }, // INTEGER              
    { {       304}, { 47} }, // type_decl            
    { {         0}, {  0} },                         
};

SR__ s_50[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        58}, { 72} }, // ':'
    { {         0}, {  0} },       
};

SR__ s_51[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -40} }, 
};

SR__ s_52[] =
{
    { { REQ_TOKEN}, {  3} },            
    { {       322}, { 73} }, // variable
    { {       258}, { 69} }, // NAME    
    { {         0}, {  0} },            
};

SR__ s_53[] =
{
    { { REQ_TOKEN}, {  5} },            
    { {       318}, { 74} }, // party_id
    { {       258}, { 51} }, // NAME    
    { {       266}, { 43} }, // ENV     
    { {       265}, { 44} }, // IDEAL   
    { {         0}, {  0} },            
};

SR__ s_54[] =
{
    { { REQ_TOKEN}, {  2} },        
    { {       258}, { 75} }, // NAME
    { {         0}, {  0} },        
};

SR__ s_55[] =
{
    { { REQ_TOKEN}, {  2} },      
    { {       269}, { 76} }, // AS
    { {         0}, {  0} },      
};

SR__ s_56[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -16} }, 
};

SR__ s_57[] =
{
    { { REQ_DEF}, {   2} },       
    { {      44}, {  77} }, // ','
    { {       0}, { -17} },       
};

SR__ s_58[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -19} }, 
};

SR__ s_59[] =
{
    { { REQ_DEF}, {   2} },       
    { {      44}, {  77} }, // ','
    { {       0}, { -18} },       
};

SR__ s_60[] =
{
    { { REQ_DEF}, {   2} },       
    { {      59}, {  78} }, // ';'
    { {       0}, { -50} },       
};

SR__ s_61[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        59}, { 79} }, // ';'
    { {         0}, {  0} },       
};

SR__ s_62[] =
{
    { { REQ_TOKEN}, {  5} },       
    { {        43}, { 80} }, // '+'
    { {        45}, { 81} }, // '-'
    { {        42}, { 82} }, // '*'
    { {        47}, { 83} }, // '/'
    { {         0}, {  0} },       
};

SR__ s_63[] =
{
    { { REQ_TOKEN}, { 10} },                    
    { {       320}, { 84} }, // operand         
    { {       319}, { 85} }, // arith_expression
    { {        45}, { 63} }, // '-'             
    { {        40}, { 64} }, // '('             
    { {       321}, { 65} }, // expression_term 
    { {       322}, { 67} }, // variable        
    { {       323}, { 68} }, // constant        
    { {       258}, { 69} }, // NAME            
    { {       257}, { 70} }, // INTEGER_NUMBER  
    { {         0}, {  0} },                    
};

SR__ s_64[] =
{
    { { REQ_TOKEN}, { 10} },                    
    { {       320}, { 86} }, // operand         
    { {       319}, { 85} }, // arith_expression
    { {        45}, { 63} }, // '-'             
    { {        40}, { 64} }, // '('             
    { {       321}, { 65} }, // expression_term 
    { {       322}, { 67} }, // variable        
    { {       323}, { 68} }, // constant        
    { {       258}, { 69} }, // NAME            
    { {       257}, { 70} }, // INTEGER_NUMBER  
    { {         0}, {  0} },                    
};

SR__ s_65[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -49} }, 
};

SR__ s_66[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -35} }, 
};

SR__ s_67[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -51} }, 
};

SR__ s_68[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -52} }, 
};

SR__ s_69[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -53} }, 
};

SR__ s_70[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -54} }, 
};

SR__ s_71[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -30} }, 
};

SR__ s_72[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {       123}, { 87} }, // '{'
    { {         0}, {  0} },       
};

SR__ s_73[] =
{
    { { REQ_TOKEN}, {  2} },        
    { {       264}, { 88} }, // SEND
    { {         0}, {  0} },        
};

SR__ s_74[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        46}, { 89} }, // '.'
    { {         0}, {  0} },       
};

SR__ s_75[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        59}, { 90} }, // ';'
    { {         0}, {  0} },       
};

SR__ s_76[] =
{
    { { REQ_TOKEN}, {  2} },        
    { {       258}, { 91} }, // NAME
    { {         0}, {  0} },        
};

SR__ s_77[] =
{
    { { REQ_TOKEN}, {  2} },        
    { {       258}, { 92} }, // NAME
    { {         0}, {  0} },        
};

SR__ s_78[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -33} }, 
};

SR__ s_79[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -34} }, 
};

SR__ s_80[] =
{
    { { REQ_TOKEN}, { 10} },                    
    { {       320}, { 93} }, // operand         
    { {       319}, { 85} }, // arith_expression
    { {        45}, { 63} }, // '-'             
    { {        40}, { 64} }, // '('             
    { {       321}, { 65} }, // expression_term 
    { {       322}, { 67} }, // variable        
    { {       323}, { 68} }, // constant        
    { {       258}, { 69} }, // NAME            
    { {       257}, { 70} }, // INTEGER_NUMBER  
    { {         0}, {  0} },                    
};

SR__ s_81[] =
{
    { { REQ_TOKEN}, { 10} },                    
    { {       320}, { 94} }, // operand         
    { {       319}, { 85} }, // arith_expression
    { {        45}, { 63} }, // '-'             
    { {        40}, { 64} }, // '('             
    { {       321}, { 65} }, // expression_term 
    { {       322}, { 67} }, // variable        
    { {       323}, { 68} }, // constant        
    { {       258}, { 69} }, // NAME            
    { {       257}, { 70} }, // INTEGER_NUMBER  
    { {         0}, {  0} },                    
};

SR__ s_82[] =
{
    { { REQ_TOKEN}, { 10} },                    
    { {       320}, { 95} }, // operand         
    { {       319}, { 85} }, // arith_expression
    { {        45}, { 63} }, // '-'             
    { {        40}, { 64} }, // '('             
    { {       321}, { 65} }, // expression_term 
    { {       322}, { 67} }, // variable        
    { {       323}, { 68} }, // constant        
    { {       258}, { 69} }, // NAME            
    { {       257}, { 70} }, // INTEGER_NUMBER  
    { {         0}, {  0} },                    
};

SR__ s_83[] =
{
    { { REQ_TOKEN}, { 10} },                    
    { {       320}, { 96} }, // operand         
    { {       319}, { 85} }, // arith_expression
    { {        45}, { 63} }, // '-'             
    { {        40}, { 64} }, // '('             
    { {       321}, { 65} }, // expression_term 
    { {       322}, { 67} }, // variable        
    { {       323}, { 68} }, // constant        
    { {       258}, { 69} }, // NAME            
    { {       257}, { 70} }, // INTEGER_NUMBER  
    { {         0}, {  0} },                    
};

SR__ s_84[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -47} }, 
};

SR__ s_85[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -50} }, 
};

SR__ s_86[] =
{
    { { REQ_TOKEN}, {  6} },       
    { {        41}, { 97} }, // ')'
    { {        43}, { 80} }, // '+'
    { {        45}, { 81} }, // '-'
    { {        42}, { 82} }, // '*'
    { {        47}, { 83} }, // '/'
    { {         0}, {  0} },       
};

SR__ s_87[] =
{
    { { DEF_RED}, {   2} },                  
    { {     309}, {  98} }, // statement_list
    { {       0}, { -21} },                  
};

SR__ s_88[] =
{
    { { REQ_TOKEN}, {  5} },            
    { {       318}, { 99} }, // party_id
    { {       258}, { 51} }, // NAME    
    { {       266}, { 43} }, // ENV     
    { {       265}, { 44} }, // IDEAL   
    { {         0}, {  0} },            
};

SR__ s_89[] =
{
    { { REQ_TOKEN}, {   3} },            
    { {       322}, { 100} }, // variable
    { {       258}, {  69} }, // NAME    
    { {         0}, {   0} },            
};

SR__ s_90[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -32} }, 
};

SR__ s_91[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {       123}, { 101} }, // '{'
    { {         0}, {   0} },       
};

SR__ s_92[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -20} }, 
};

SR__ s_93[] =
{
    { { REQ_DEF}, {   3} },       
    { {      42}, {  82} }, // '*'
    { {      47}, {  83} }, // '/'
    { {       0}, { -43} },       
};

SR__ s_94[] =
{
    { { REQ_DEF}, {   3} },       
    { {      42}, {  82} }, // '*'
    { {      47}, {  83} }, // '/'
    { {       0}, { -44} },       
};

SR__ s_95[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -45} }, 
};

SR__ s_96[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -46} }, 
};

SR__ s_97[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -48} }, 
};

SR__ s_98[] =
{
    { { REQ_TOKEN}, {  22} },                         
    { {       125}, { 102} }, // '}'                  
    { {       310}, {  28} }, // statement            
    { {       314}, {  29} }, // assignment_statement 
    { {       311}, {  30} }, // mult_statement       
    { {       312}, {  31} }, // pvt_statement        
    { {       317}, {  32} }, // send_statement       
    { {       316}, {  33} }, // session_call         
    { {       313}, {  34} }, // tying_statement      
    { {       305}, {  35} }, // declaration_statement
    { {       322}, {  36} }, // variable             
    { {       123}, {  37} }, // '{'                  
    { {       267}, {  38} }, // IN                   
    { {       318}, {  39} }, // party_id             
    { {       268}, {  40} }, // OPEN                 
    { {       306}, {  41} }, // variable_declaration 
    { {       258}, {  42} }, // NAME                 
    { {       266}, {  43} }, // ENV                  
    { {       265}, {  44} }, // IDEAL                
    { {       307}, {  45} }, // declaration          
    { {       259}, {  46} }, // INTEGER              
    { {       304}, {  47} }, // type_decl            
    { {         0}, {   0} },                         
};

SR__ s_99[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        46}, { 103} }, // '.'
    { {        59}, { 104} }, // ';'
    { {         0}, {   0} },       
};

SR__ s_100[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        59}, { 105} }, // ';'
    { {         0}, {   0} },       
};

SR__ s_101[] =
{
    { { DEF_RED}, {   2} },                  
    { {     309}, { 106} }, // statement_list
    { {       0}, { -21} },                  
};

SR__ s_102[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -31} }, 
};

SR__ s_103[] =
{
    { { REQ_TOKEN}, {   3} },            
    { {       322}, { 107} }, // variable
    { {       258}, {  69} }, // NAME    
    { {         0}, {   0} },            
};

SR__ s_104[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -39} }, 
};

SR__ s_105[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -38} }, 
};

SR__ s_106[] =
{
    { { REQ_TOKEN}, {  22} },                         
    { {       125}, { 108} }, // '}'                  
    { {       310}, {  28} }, // statement            
    { {       314}, {  29} }, // assignment_statement 
    { {       311}, {  30} }, // mult_statement       
    { {       312}, {  31} }, // pvt_statement        
    { {       317}, {  32} }, // send_statement       
    { {       316}, {  33} }, // session_call         
    { {       313}, {  34} }, // tying_statement      
    { {       305}, {  35} }, // declaration_statement
    { {       322}, {  36} }, // variable             
    { {       123}, {  37} }, // '{'                  
    { {       267}, {  38} }, // IN                   
    { {       318}, {  39} }, // party_id             
    { {       268}, {  40} }, // OPEN                 
    { {       306}, {  41} }, // variable_declaration 
    { {       258}, {  42} }, // NAME                 
    { {       266}, {  43} }, // ENV                  
    { {       265}, {  44} }, // IDEAL                
    { {       307}, {  45} }, // declaration          
    { {       259}, {  46} }, // INTEGER              
    { {       304}, {  47} }, // type_decl            
    { {         0}, {   0} },                         
};

SR__ s_107[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        59}, { 109} }, // ';'
    { {         0}, {   0} },       
};

SR__ s_108[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        59}, { 110} }, // ';'
    { {         0}, {   0} },       
};

SR__ s_109[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -37} }, 
};

SR__ s_110[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -36} }, 
};


// State array:
SR__ *s_state[] =
{
  s_0,  s_1,  s_2,  s_3,  s_4,  s_5,  s_6,  s_7,  s_8,  s_9,
  s_10,  s_11,  s_12,  s_13,  s_14,  s_15,  s_16,  s_17,  s_18,  s_19,
  s_20,  s_21,  s_22,  s_23,  s_24,  s_25,  s_26,  s_27,  s_28,  s_29,
  s_30,  s_31,  s_32,  s_33,  s_34,  s_35,  s_36,  s_37,  s_38,  s_39,
  s_40,  s_41,  s_42,  s_43,  s_44,  s_45,  s_46,  s_47,  s_48,  s_49,
  s_50,  s_51,  s_52,  s_53,  s_54,  s_55,  s_56,  s_57,  s_58,  s_59,
  s_60,  s_61,  s_62,  s_63,  s_64,  s_65,  s_66,  s_67,  s_68,  s_69,
  s_70,  s_71,  s_72,  s_73,  s_74,  s_75,  s_76,  s_77,  s_78,  s_79,
  s_80,  s_81,  s_82,  s_83,  s_84,  s_85,  s_86,  s_87,  s_88,  s_89,
  s_90,  s_91,  s_92,  s_93,  s_94,  s_95,  s_96,  s_97,  s_98,  s_99,
  s_100,  s_101,  s_102,  s_103,  s_104,  s_105,  s_106,  s_107,  s_108,  s_109,
  s_110,
};

} // anonymous namespace ends



// If the parsing function call uses arguments, then provide an overloaded
// function.  The code below doesn't rely on parameters, so no arguments are
// required.  Furthermore, parse uses a function try block to allow us to do
// ACCEPT and ABORT from anywhere, even from within members called by actions,
// simply throwing the appropriate exceptions.

ParserBase::ParserBase()
:
    d_stackIdx__(-1),
    // $insert debuginit
    d_debug__(false),
    d_nErrors__(0),
    // $insert requiredtokens
    d_requiredTokens__(0),
    d_acceptedTokens__(d_requiredTokens__),
    d_token__(_UNDETERMINED_),
    d_nextToken__(_UNDETERMINED_)
{}


void Parser::print__()
{
// $insert print
}

void ParserBase::clearin()
{
    d_token__ = d_nextToken__ = _UNDETERMINED_;
}

void ParserBase::push__(size_t state)
{
    if (static_cast<size_t>(d_stackIdx__ + 1) == d_stateStack__.size())
    {
        size_t newSize = d_stackIdx__ + STACK_EXPANSION;
        d_stateStack__.resize(newSize);
        d_valueStack__.resize(newSize);
    }
    ++d_stackIdx__;
    d_stateStack__[d_stackIdx__] = d_state__ = state;
    *(d_vsp__ = &d_valueStack__[d_stackIdx__]) = d_val__;
}

void ParserBase::popToken__()
{
    d_token__ = d_nextToken__;

    d_val__ = d_nextVal__;
    d_nextVal__ = STYPE__();

    d_nextToken__ = _UNDETERMINED_;
}
     
void ParserBase::pushToken__(int token)
{
    d_nextToken__ = d_token__;
    d_nextVal__ = d_val__;
    d_token__ = token;
}
     
void ParserBase::pop__(size_t count)
{
    if (d_stackIdx__ < static_cast<int>(count))
    {
        ABORT();
    }

    d_stackIdx__ -= count;
    d_state__ = d_stateStack__[d_stackIdx__];
    d_vsp__ = &d_valueStack__[d_stackIdx__];
}

inline size_t ParserBase::top__() const
{
    return d_stateStack__[d_stackIdx__];
}

void Parser::executeAction(int production)
try
{
    if (d_token__ != _UNDETERMINED_)
        pushToken__(d_token__);     // save an already available token

// $insert defaultactionreturn
                            // save default non-nested block $$
    if (int size = s_productionInfo[production].d_size)
        d_val__ = d_vsp__[1 - size];

    switch (production)
    {
        // $insert actioncases
        
        case 1:
#line 71 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         
         
         
         }
         }
        break;

        case 2:
#line 85 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         
         
         
         } 
         }
        break;

        case 3:
#line 96 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         
         
         
         
         }
         }
        break;

        case 4:
#line 126 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         Sequence_Ast* seq = d_vsp__[-1].sequence_ast;
         current_procedure->set_sequence_ast(*seq);
         }
         }
        break;

        case 5:
#line 112 "parser.yy"
        d_val__ = d_vsp__[-8];
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[-1].n_list != NULL), "party_list cannot be null");
         Procedure *proc = new Procedure(*d_vsp__[-7].string_value, d_vsp__[-5].decl_entry_list, d_vsp__[-1].n_list, get_line_number());
         program_object.add_proc(proc, *d_vsp__[-7].string_value, get_line_number());
         current_procedure = proc;
         }
         }
        break;

        case 6:
#line 138 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[0].string_value != NULL), "Name cannot be null");
         list<string> *name_list = new list<string>();
         name_list->push_back(*d_vsp__[0].string_value);
         d_val__.n_list = name_list;
         }
         }
        break;

        case 7:
#line 150 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[-2].string_value != NULL), "Name cannot be null");
         d_vsp__[0].n_list->push_back(*d_vsp__[-2].string_value);
         
         d_val__.n_list = d_vsp__[0].n_list;
         }
         }
        break;

        case 8:
#line 165 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         list<pair<Data_Type, string> *> * decl_entry_list = new list<pair<Data_Type, string> *>();
         d_val__.decl_entry_list = decl_entry_list;
         }
         }
        break;

        case 9:
#line 174 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[0].decl_entry_list != NULL), "Variable list cannot be null in function arguments");
         d_val__.decl_entry_list = d_vsp__[0].decl_entry_list;
         }
         }
        break;

        case 10:
#line 185 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         pair<Data_Type, string> * decl = d_vsp__[0].declar;
         
         CHECK_INVARIANT((decl != NULL), "Var Decl cannot be null in function arguments");
         list<pair<Data_Type, string> *> * decl_entry_list = new list<pair<Data_Type, string> *>();
         
         decl_entry_list->push_back(decl);
         d_val__.decl_entry_list = decl_entry_list;
         }
         }
        break;

        case 11:
#line 200 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         pair<Data_Type, string> * decl = d_vsp__[0].declar;
         list<pair<Data_Type, string> *> * decl_entry_list = d_vsp__[-2].decl_entry_list;
         CHECK_INVARIANT((decl != NULL), "Var Decl cannot be null in function arguments");
         CHECK_INVARIANT((decl_entry_list != NULL), "Variable list cannot be null in function arguments");
         
         decl_entry_list->push_back(decl);
         d_val__.decl_entry_list = decl_entry_list;
         }
         }
        break;

        case 12:
#line 218 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[0].string_value != NULL), "Name cannot be null");
         string name = *d_vsp__[0].string_value;
         Data_Type type = int_data_type;
         pair<Data_Type, string> * declar = new pair<Data_Type, string>(type, name);
         d_val__.declar = declar;
         }
         }
        break;

        case 13:
#line 230 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[0].string_value != NULL), "Name cannot be null");
         string name = *d_vsp__[0].string_value;
         Data_Type type = field_data_type;
         pair<Data_Type, string> * declar = new pair<Data_Type, string>(type, name);
         d_val__.declar = declar;
         }
         }
        break;

        case 14:
#line 245 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         
         d_val__.string_value = d_vsp__[0].string_value;
         }
         }
        break;

        case 15:
#line 256 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         d_val__.ast = d_vsp__[0].ast;
         }
         }
        break;

        case 16:
#line 266 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         d_val__.ast = d_vsp__[-1].ast;
         }
         }
        break;

        case 17:
#line 276 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[0].n_list != NULL), "Name cannot be null");
         Data_Type type = int_data_type;
         string dat_name = "int";
         Ast * number_ast = new Decl_Ast(type,d_vsp__[0].n_list,dat_name,get_line_number());
         d_val__.ast = number_ast;
         }
         }
        break;

        case 18:
#line 288 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         
         CHECK_INVARIANT((d_vsp__[0].n_list != NULL), "Name cannot be null");
         Data_Type type = other_data_type;
         string dat_name = *d_vsp__[-1].string_value;
         Ast * number_ast = new Decl_Ast(type,d_vsp__[0].n_list,dat_name,get_line_number());
         d_val__.ast = number_ast;
         }
         }
        break;

        case 19:
#line 303 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         list<string> * name_list = new list<string>();
         name_list->push_back(*d_vsp__[0].string_value);
         d_val__.n_list = name_list;
         }
         }
        break;

        case 20:
#line 313 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         list<string> * name_list = d_vsp__[-2].n_list;
         name_list->push_back(*d_vsp__[0].string_value);
         d_val__.n_list = name_list;
         }
         }
        break;

        case 21:
#line 324 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         
         
         d_val__.sequence_ast = new Sequence_Ast(get_line_number());
         }
         }
        break;

        case 22:
#line 334 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         
         
         Sequence_Ast * seq = d_vsp__[-1].sequence_ast;
         Ast * ass_ast = d_vsp__[0].ast;
         seq->ast_push_back(ass_ast);
         d_val__.sequence_ast = seq;
         }
         }
        break;

        case 23:
#line 351 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[0].ast != NULL)), "assignment statement is null");
         d_val__.ast = d_vsp__[0].ast;
         }
         }
        break;

        case 24:
#line 361 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[0].ast != NULL)), "mult statement is null");
         d_val__.ast = d_vsp__[0].ast;
         }
         }
        break;

        case 25:
#line 371 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[0].ast != NULL)), "pvt statement is null");
         d_val__.ast = d_vsp__[0].ast;
         }
         }
        break;

        case 26:
#line 381 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[0].ast != NULL)), "send statement is null");
         d_val__.ast = d_vsp__[0].ast;
         }
         }
        break;

        case 27:
#line 391 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[0].ast != NULL)), "session_call statement is null");
         d_val__.ast = d_vsp__[0].ast;
         }
         }
        break;

        case 28:
#line 401 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[0].ast != NULL)), "tying statement is null");
         d_val__.ast = d_vsp__[0].ast;
         }
         }
        break;

        case 29:
#line 411 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[0].ast != NULL)), "declaration statement is null");
         d_val__.ast = d_vsp__[0].ast;
         }
         }
        break;

        case 30:
#line 423 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         
         d_val__.ast = d_vsp__[-1].sequence_ast;
         }
         }
        break;

        case 31:
#line 434 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         Ast * name_ast1 = d_vsp__[-1].sequence_ast;
         Ast * name_ast2 = d_vsp__[-4].ast;
         Ast * ass_ast = new In_Ast(name_ast1, name_ast2, get_line_number());
         
         d_val__.ast = ass_ast;
         }
         }
        break;

        case 32:
#line 449 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         Ast * lhs = d_vsp__[-3].ast;
         string rhs = *d_vsp__[-1].string_value;
         Ast * ass_ast = new Tying_Ast(lhs, rhs, get_line_number());
         d_val__.ast = ass_ast;
         }
         }
        break;

        case 33:
#line 465 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         
         
         Ast * name_ast1 = d_vsp__[-3].ast;
         Ast * name_ast2 = d_vsp__[-1].ast;
         Ast * ass_ast = new Assignment_Ast(name_ast1, name_ast2, get_line_number());
         
         
         d_val__.ast = ass_ast;
         }
         }
        break;

        case 34:
#line 482 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         
         
         Ast * name_ast1 = d_vsp__[-3].ast;
         Ast * name_ast2 = d_vsp__[-1].ast;
         Ast * ass_ast = new Assignment_Ast(name_ast1, name_ast2, get_line_number());
         
         
         d_val__.ast = ass_ast;
         }
         }
        break;

        case 35:
#line 501 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         Ast * number_ast = new Random_Ast(get_line_number());
         d_val__.ast = number_ast;
         }
         }
        break;

        case 36:
#line 512 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         
         string session_name = *d_vsp__[-6].string_value;
         string proc_name = *d_vsp__[-4].string_value;
         Ast * seq = d_vsp__[-2].sequence_ast;
         Ast * func = new Session_call_Ast(seq, proc_name, session_name, get_line_number());
         
         d_val__.ast = func;
         }
         }
        break;

        case 37:
#line 530 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         Ast * name_ast1 = d_vsp__[-7].ast;
         Ast * var_ast1 = d_vsp__[-5].ast;
         Ast * name_ast2 = d_vsp__[-3].ast;
         Ast * var_ast2 = d_vsp__[-1].ast;
         int type = 1;
         Ast * ass_ast = new Send_Ast(name_ast1, name_ast2, var_ast1, var_ast2, get_line_number(), type);
         d_val__.ast = ass_ast;
         }
         }
        break;

        case 38:
#line 548 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         Ast * name_ast1 = d_vsp__[-5].ast;
         Ast * var_ast1 = NULL;
         Ast * name_ast2 = d_vsp__[-3].ast;
         Ast * var_ast2 = d_vsp__[-1].ast;
         int type = 2;
         Ast * ass_ast = new Send_Ast(name_ast1, name_ast2, var_ast1, var_ast2, get_line_number(), type);
         d_val__.ast = ass_ast;
         }
         }
        break;

        case 39:
#line 566 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         Ast * name_ast1 = d_vsp__[-5].ast;
         Ast * var_ast1 = d_vsp__[-3].ast;
         Ast * name_ast2 = d_vsp__[-1].ast;
         Ast * var_ast2 = NULL;
         int type = 3;
         Ast * ass_ast = new Send_Ast(name_ast1, name_ast2, var_ast1, var_ast2, get_line_number(), type);
         d_val__.ast = ass_ast;
         }
         }
        break;

        case 40:
#line 601 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         string name_ast1 = *d_vsp__[0].string_value;
         int type = 1;
         Ast * ass_ast = new Party_Ast(name_ast1, type, get_line_number());
         d_val__.ast = ass_ast;
         }
         }
        break;

        case 41:
#line 614 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         string name_ast1 = "ENV";
         int type = 2;
         Ast * ass_ast = new Party_Ast(name_ast1, type, get_line_number());
         d_val__.ast = ass_ast;
         }
         }
        break;

        case 42:
#line 627 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         string name_ast1 = "IDEAL";
         int type = 3;
         Ast * ass_ast = new Party_Ast(name_ast1, type, get_line_number());
         d_val__.ast = ass_ast;
         }
         }
        break;

        case 43:
#line 642 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[-2].ast != NULL) && (d_vsp__[0].ast != NULL)), "lhs/rhs cannot be null");
         Ast * op1 = d_vsp__[-2].ast;
         Ast * op2 = d_vsp__[0].ast;
         Ast * pl_ast = new Plus_Ast(op1, op2, get_line_number());
         d_val__.ast = pl_ast;
         }
         }
        break;

        case 44:
#line 656 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[-2].ast != NULL) && (d_vsp__[0].ast != NULL)), "lhs/rhs cannot be null");
         Ast * op1 = d_vsp__[-2].ast;
         Ast * op2 = d_vsp__[0].ast;
         Ast * mi_ast = new Minus_Ast(op1, op2, get_line_number());
         d_val__.ast = mi_ast;
         }
         }
        break;

        case 45:
#line 670 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[-2].ast != NULL) && (d_vsp__[0].ast != NULL)), "lhs/rhs cannot be null");
         Ast * op1 = d_vsp__[-2].ast;
         Ast * op2 = d_vsp__[0].ast;
         Ast * ml_ast = new Mult_Ast(op1, op2, get_line_number());
         d_val__.ast = ml_ast;
         }
         }
        break;

        case 46:
#line 684 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[-2].ast != NULL) && (d_vsp__[0].ast != NULL)), "lhs/rhs cannot be null");
         Ast * op1 = d_vsp__[-2].ast;
         Ast * op2 = d_vsp__[0].ast;
         Ast * div_ast = new Divide_Ast(op1, op2, get_line_number());
         d_val__.ast = div_ast;
         }
         }
        break;

        case 47:
#line 698 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[0].ast != NULL)), "lhs cannot be null");
         Ast * op1 = d_vsp__[0].ast;
         Ast * um_ast = new UMinus_Ast(op1, NULL, get_line_number());
         d_val__.ast = um_ast;
         }
         }
        break;

        case 48:
#line 711 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[-1].ast != NULL), "Operand cannot be null");
         d_val__.ast = d_vsp__[-1].ast;
         }
         }
        break;

        case 49:
#line 720 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[0].ast != NULL), "Expression cannot be null");
         d_val__.ast = d_vsp__[0].ast;
         }
         }
        break;

        case 50:
#line 735 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[0].ast != NULL), "Expression cannot be null");
         d_val__.ast = d_vsp__[0].ast;
         
         }
         }
        break;

        case 51:
#line 747 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[0].ast != NULL), "Variable cannot be null");
         d_val__.ast = d_vsp__[0].ast;
         
         }
         }
        break;

        case 52:
#line 757 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[0].ast != NULL), "Constant cannot be null");
         d_val__.ast = d_vsp__[0].ast;
         
         }
         }
        break;

        case 53:
#line 769 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         string name = *d_vsp__[0].string_value;
         d_val__.ast = new Name_Ast(*d_vsp__[0].string_value, get_line_number());
         }
         }
        break;

        case 54:
#line 783 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         int cons = d_vsp__[0].integer_value;
         Ast * number_ast = new Number_Ast<int>(cons, get_line_number());
         d_val__.ast = number_ast;
         
         }
         }
        break;

    }
}
catch (std::exception const &exc)
{
    exceptionHandler__(exc);
}

inline void ParserBase::reduce__(PI__ const &pi)
{
    d_token__ = pi.d_nonTerm;
    pop__(pi.d_size);

}

// If d_token__ is _UNDETERMINED_ then if d_nextToken__ is _UNDETERMINED_ another
// token is obtained from lex(). Then d_nextToken__ is assigned to d_token__.
void Parser::nextToken()
{
    if (d_token__ != _UNDETERMINED_)        // no need for a token: got one
        return;                             // already

    if (d_nextToken__ != _UNDETERMINED_)
    {
        popToken__();                       // consume pending token
    }
    else
    {
        ++d_acceptedTokens__;               // accept another token (see
                                            // errorRecover())
        d_token__ = lex();
        if (d_token__ <= 0)
            d_token__ = _EOF_;
    }
    print();
}

// if the final transition is negative, then we should reduce by the rule
// given by its positive value. Note that the `recovery' parameter is only
// used with the --debug option
int Parser::lookup(bool recovery)
{
// $insert threading
    SR__ *sr = s_state[d_state__];          // get the appropriate state-table
    int lastIdx = sr->d_lastIdx;            // sentinel-index in the SR__ array
    
    SR__ *lastElementPtr = sr + lastIdx;
    lastElementPtr->d_token = d_token__;    // set search-token
    
    SR__ *elementPtr = sr + 1;              // start the search at s_xx[1]
    while (elementPtr->d_token != d_token__)
        ++elementPtr;
    

    if (elementPtr == lastElementPtr)   // reached the last element
    {
        if (elementPtr->d_action < 0)   // default reduction
        {
            return elementPtr->d_action;                
        }

        // No default reduction, so token not found, so error.
        throw UNEXPECTED_TOKEN__;
    }

    // not at the last element: inspect the nature of the action
    // (< 0: reduce, 0: ACCEPT, > 0: shift)

    int action = elementPtr->d_action;


    return action;
}

    // When an error has occurred, pop elements off the stack until the top
    // state has an error-item. If none is found, the default recovery
    // mode (which is to abort) is activated. 
    //
    // If EOF is encountered without being appropriate for the current state,
    // then the error recovery will fall back to the default recovery mode.
    // (i.e., parsing terminates)
void Parser::errorRecovery()
try
{
    if (d_acceptedTokens__ >= d_requiredTokens__)// only generate an error-
    {                                           // message if enough tokens 
        ++d_nErrors__;                          // were accepted. Otherwise
        error("Syntax error");                  // simply skip input

    }


    // get the error state
    while (not (s_state[top__()][0].d_type & ERR_ITEM))
    {
        pop__();
    }

    // In the error state, lookup a token allowing us to proceed.
    // Continuation may be possible following multiple reductions,
    // but eventuall a shift will be used, requiring the retrieval of
    // a terminal token. If a retrieved token doesn't match, the catch below 
    // will ensure the next token is requested in the while(true) block
    // implemented below:

    int lastToken = d_token__;                  // give the unexpected token a
                                                // chance to be processed
                                                // again.

    pushToken__(_error_);                       // specify _error_ as next token
    push__(lookup(true));                       // push the error state

    d_token__ = lastToken;                      // reactivate the unexpected
                                                // token (we're now in an
                                                // ERROR state).

    bool gotToken = true;                       // the next token is a terminal

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
            {
                gotToken = d_token__ == _UNDETERMINED_;
                nextToken();                    // obtain next token
            }
            
            int action = lookup(true);

            if (action > 0)                 // push a new state
            {
                push__(action);
                popToken__();

                if (gotToken)
                {

                    d_acceptedTokens__ = 0;
                    return;
                }
            }
            else if (action < 0)
            {
                // no actions executed on recovery but save an already 
                // available token:
                if (d_token__ != _UNDETERMINED_)
                    pushToken__(d_token__);
 
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else
                ABORT();                    // abort when accepting during
                                            // error recovery
        }
        catch (...)
        {
            if (d_token__ == _EOF_)
                ABORT();                    // saw inappropriate _EOF_
                      
            popToken__();                   // failing token now skipped
        }
    }
}
catch (ErrorRecovery__)       // This is: DEFAULT_RECOVERY_MODE
{
    ABORT();
}

    // The parsing algorithm:
    // Initially, state 0 is pushed on the stack, and d_token__ as well as
    // d_nextToken__ are initialized to _UNDETERMINED_. 
    //
    // Then, in an eternal loop:
    //
    //  1. If a state does not have REQ_TOKEN no token is assigned to
    //     d_token__. If the state has REQ_TOKEN, nextToken() is called to
    //      determine d_nextToken__ and d_token__ is set to
    //     d_nextToken__. nextToken() will not call lex() unless d_nextToken__ is 
    //     _UNDETERMINED_. 
    //
    //  2. lookup() is called: 
    //     d_token__ is stored in the final element's d_token field of the
    //     state's SR_ array. 
    //
    //  3. The current token is looked up in the state's SR_ array
    //
    //  4. Depending on the result of the lookup() function the next state is
    //     shifted on the parser's stack, a reduction by some rule is applied,
    //     or the parsing function returns ACCEPT(). When a reduction is
    //     called for, any action that may have been defined for that
    //     reduction is executed.
    //
    //  5. An error occurs if d_token__ is not found, and the state has no
    //     default reduction. Error handling was described at the top of this
    //     file.

int Parser::parse()
try 
{
    push__(0);                              // initial state
    clearin();                              // clear the tokens.

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
                nextToken();                // obtain next token


            int action = lookup(false);     // lookup d_token__ in d_state__

            if (action > 0)                 // SHIFT: push a new state
            {
                push__(action);
                popToken__();               // token processed
            }
            else if (action < 0)            // REDUCE: execute and pop.
            {
                executeAction(-action);
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else 
                ACCEPT();
        }
        catch (ErrorRecovery__)
        {
            errorRecovery();
        }
    }
}
catch (Return__ retValue)
{
    return retValue;
}



