// Generated by Bisonc++ V5.02.00 on Thu, 12 Oct 2017 21:59:17 +0530

// $insert class.ih
#include "parser.ih"

// The FIRST element of SR arrays shown below uses `d_type', defining the
// state's type, and `d_lastIdx' containing the last element's index. If
// d_lastIdx contains the REQ_TOKEN bitflag (see below) then the state needs
// a token: if in this state d_token__ is _UNDETERMINED_, nextToken() will be
// called

// The LAST element of SR arrays uses `d_token' containing the last retrieved
// token to speed up the (linear) seach.  Except for the first element of SR
// arrays, the field `d_action' is used to determine what to do next. If
// positive, it represents the next state (used with SHIFT); if zero, it
// indicates `ACCEPT', if negative, -d_action represents the number of the
// rule to reduce to.

// `lookup()' tries to find d_token__ in the current SR array. If it fails, and
// there is no default reduction UNEXPECTED_TOKEN__ is thrown, which is then
// caught by the error-recovery function.

// The error-recovery function will pop elements off the stack until a state
// having bit flag ERR_ITEM is found. This state has a transition on _error_
// which is applied. In this _error_ state, while the current token is not a
// proper continuation, new tokens are obtained by nextToken(). If such a
// token is found, error recovery is successful and the token is
// handled according to the error state's SR table and parsing continues.
// During error recovery semantic actions are ignored.

// A state flagged with the DEF_RED flag will perform a default
// reduction if no other continuations are available for the current token.

// The ACCEPT STATE never shows a default reduction: when it is reached the
// parser returns ACCEPT(). During the grammar
// analysis phase a default reduction may have been defined, but it is
// removed during the state-definition phase.

// So:
//      s_x[] = 
//      {
//                  [_field_1_]         [_field_2_]
//
// First element:   {state-type,        idx of last element},
// Other elements:  {required token,    action to perform},
//                                      ( < 0: reduce, 
//                                          0: ACCEPT,
//                                        > 0: next state)
// Last element:    {set to d_token__,    action to perform}
//      }

// When the --thread-safe option is specified, all static data are defined as
// const. If --thread-safe is not provided, the state-tables are not defined
// as const, since the lookup() function below will modify them


namespace // anonymous
{
    char const author[] = "Frank B. Brokken (f.b.brokken@rug.nl)";

    enum ReservedTokens
    {
        PARSE_ACCEPT     = 0,   // `ACCEPT' TRANSITION
        _UNDETERMINED_   = -2,
        _EOF_            = -1,
        _error_          = 256
    };
    enum StateType       // modify statetype/data.cc when this enum changes
    {
        NORMAL,
        ERR_ITEM,
        REQ_TOKEN,
        ERR_REQ,    // ERR_ITEM | REQ_TOKEN
        DEF_RED,    // state having default reduction
        ERR_DEF,    // ERR_ITEM | DEF_RED
        REQ_DEF,    // REQ_TOKEN | DEF_RED
        ERR_REQ_DEF // ERR_ITEM | REQ_TOKEN | DEF_RED
    };    
    struct PI__     // Production Info
    {
        size_t d_nonTerm; // identification number of this production's
                            // non-terminal 
        size_t d_size;    // number of elements in this production 
    };

    struct SR__     // Shift Reduce info, see its description above
    {
        union
        {
            int _field_1_;      // initializer, allowing initializations 
                                // of the SR s_[] arrays
            int d_type;
            int d_token;
        };
        union
        {
            int _field_2_;

            int d_lastIdx;          // if negative, the state uses SHIFT
            int d_action;           // may be negative (reduce), 
                                    // postive (shift), or 0 (accept)
            size_t d_errorState;    // used with Error states
        };
    };

    // $insert staticdata
    
    enum                        // size to expand the state-stack with when
    {                           // full
        STACK_EXPANSION__ = 10
    };

// Productions Info Records:
PI__ const s_productionInfo[] = 
{
     {0, 0}, // not used: reduction values are negative
     {364, 1}, // 1: program ->  protocol_list
     {365, 1}, // 2: protocol_list ->  protocol
     {365, 2}, // 3: protocol_list ->  protocol protocol_list
     {366, 7}, // 4: protocol ('{') ->  prot_decl '{' #0001 opt_uses #0002 statement_list '}'
     {367, 0}, // 5: #0001 ->  <empty>
     {368, 0}, // 6: #0002 ->  <empty>
     {369, 8}, // 7: prot_decl (PROTOCOL) ->  PROTOCOL NAME '(' opt_arg_list ')' ':' PARTY p_list
     {370, 1}, // 8: p_list ->  p_list_elem
     {370, 3}, // 9: p_list (',') ->  p_list ',' p_list_elem
     {371, 2}, // 10: p_list_elem ->  exp opt_port_clause
     {372, 0}, // 11: opt_port_clause ->  <empty>
     {372, 3}, // 12: opt_port_clause (WITH) ->  opt_each WITH port_clause
     {373, 3}, // 13: port_clause ('{') ->  '{' port_decl_list '}'
     {374, 1}, // 14: port_decl_list ->  port_decl
     {374, 3}, // 15: port_decl_list (',') ->  port_decl_list ',' port_decl
     {375, 2}, // 16: port_decl ->  type term
     {376, 0}, // 17: opt_arg_list ->  <empty>
     {376, 1}, // 18: opt_arg_list ->  arg_list
     {377, 1}, // 19: arg_list ->  arg
     {377, 3}, // 20: arg_list (',') ->  arg_list ',' arg
     {378, 2}, // 21: arg ->  type term
     {378, 3}, // 22: arg ('(') ->  '(' prot_decl ')'
     {379, 2}, // 23: term ->  variable dimlist
     {379, 2}, // 24: term ('#') ->  '#' variable
     {379, 1}, // 25: term ('@') ->  '@'
     {379, 1}, // 26: term (RAND) ->  RAND
     {379, 1}, // 27: term ->  constant
     {379, 1}, // 28: term (ENV) ->  ENV
     {379, 1}, // 29: term (IDEAL) ->  IDEAL
     {379, 1}, // 30: term (RAND_PORT) ->  RAND_PORT
     {379, 1}, // 31: term (ENV_PORT) ->  ENV_PORT
     {379, 1}, // 32: term (DOUBLE_DOT) ->  DOUBLE_DOT
     {380, 0}, // 33: dimlist ->  <empty>
     {380, 4}, // 34: dimlist ('[') ->  dimlist '[' exp ']'
     {380, 3}, // 35: dimlist ('[') ->  dimlist '[' ']'
     {381, 3}, // 36: exp ('+') ->  exp '+' exp
     {381, 3}, // 37: exp ('-') ->  exp '-' exp
     {381, 3}, // 38: exp ('*') ->  exp '*' exp
     {381, 3}, // 39: exp ('/') ->  exp '/' exp
     {381, 3}, // 40: exp ('%') ->  exp '%' exp
     {381, 2}, // 41: exp (UMINUS) ->  '-' exp
     {381, 3}, // 42: exp (B_AND) ->  exp B_AND exp
     {381, 3}, // 43: exp (OR) ->  exp OR exp
     {381, 2}, // 44: exp (NOT) ->  NOT exp
     {381, 3}, // 45: exp (EQ) ->  exp EQ exp
     {381, 3}, // 46: exp (LT) ->  exp LT exp
     {381, 3}, // 47: exp (GT) ->  exp GT exp
     {381, 3}, // 48: exp (NE) ->  exp NE exp
     {381, 3}, // 49: exp (LE) ->  exp LE exp
     {381, 3}, // 50: exp (GE) ->  exp GE exp
     {381, 3}, // 51: exp ('(') ->  '(' exp ')'
     {381, 3}, // 52: exp ('|') ->  exp '|' term
     {381, 3}, // 53: exp ('.') ->  term '.' exp
     {381, 3}, // 54: exp (FROM) ->  term FROM exp_list
     {381, 1}, // 55: exp ->  exp_list
     {381, 1}, // 56: exp ->  term
     {382, 0}, // 57: opt_uses ->  <empty>
     {382, 3}, // 58: opt_uses (USES) ->  USES prot_decl_list ';'
     {383, 1}, // 59: prot_decl_list ->  prot_decl
     {383, 2}, // 60: prot_decl_list ->  prot_decl_list prot_decl
     {384, 1}, // 61: statement_list ->  statement
     {384, 2}, // 62: statement_list ->  statement_list statement
     {385, 1}, // 63: statement ->  assignment_statement
     {385, 1}, // 64: statement ->  mult_statement
     {385, 1}, // 65: statement ->  pvt_statement
     {385, 1}, // 66: statement ->  with_statement
     {385, 1}, // 67: statement ->  send_statement
     {385, 1}, // 68: statement ->  session_call
     {385, 1}, // 69: statement ->  tying_statement
     {385, 1}, // 70: statement ->  declaration_statement
     {385, 1}, // 71: statement ->  protocol
     {385, 1}, // 72: statement ->  loop_statement
     {385, 1}, // 73: statement ->  cond_statement
     {385, 1}, // 74: statement ->  wrap_statement
     {385, 1}, // 75: statement ->  connect_statement
     {385, 1}, // 76: statement ->  abort_statement
     {385, 1}, // 77: statement ->  seq_statement
     {385, 1}, // 78: statement ->  start_statement
     {385, 1}, // 79: statement ->  set_statement
     {385, 1}, // 80: statement ->  forward_statement
     {385, 2}, // 81: statement (_error_) ->  _error_ ';'
     {386, 2}, // 82: abort_statement (ABORTING) ->  ABORTING ';'
     {387, 2}, // 83: wrap_statement (WRAP) ->  WRAP statement
     {388, 3}, // 84: start_statement (START) ->  START exp ';'
     {389, 5}, // 85: seq_statement (BEFORE) ->  BEFORE opt_each_expr '{' statement_list '}'
     {389, 5}, // 86: seq_statement (AFTER) ->  AFTER opt_each_expr '{' statement_list '}'
     {390, 0}, // 87: opt_each ->  <empty>
     {390, 1}, // 88: opt_each (EACH) ->  EACH
     {391, 4}, // 89: assignment_statement (ASSIGN) ->  term ASSIGN exp ';'
     {392, 3}, // 90: mult_statement ('{') ->  '{' statement_list '}'
     {393, 5}, // 91: pvt_statement (IN) ->  IN opt_each_expr '{' statement_list '}'
     {394, 6}, // 92: with_statement (WITH) ->  WITH opt_each_expr '{' port_decl_list '}' ';'
     {395, 4}, // 93: send_statement (SEND) ->  exp SEND exp ';'
     {396, 8}, // 94: session_call (OPEN) ->  opt_partial OPEN term AS prot_call '{' statement_list '}'
     {397, 0}, // 95: opt_partial ->  <empty>
     {397, 1}, // 96: opt_partial (PARTIAL) ->  PARTIAL
     {398, 4}, // 97: prot_call (NAME) ->  NAME '(' opt_id_list ')'
     {399, 0}, // 98: opt_id_list ->  <empty>
     {399, 1}, // 99: opt_id_list ->  id_list
     {400, 1}, // 100: id_list ->  variable
     {400, 3}, // 101: id_list (',') ->  id_list ',' variable
     {401, 4}, // 102: tying_statement (':') ->  exp ':' exp ';'
     {402, 3}, // 103: declaration_statement (';') ->  type varlist ';'
     {403, 1}, // 104: type (PARTY) ->  PARTY
     {403, 1}, // 105: type (INTEGER) ->  INTEGER
     {403, 1}, // 106: type (SESSION) ->  SESSION
     {403, 1}, // 107: type (UNKNOWN) ->  UNKNOWN
     {403, 1}, // 108: type (PORT) ->  PORT
     {403, 1}, // 109: type (INPORT) ->  INPORT
     {403, 1}, // 110: type (OUTPORT) ->  OUTPORT
     {403, 1}, // 111: type (BOOL) ->  BOOL
     {403, 1}, // 112: type (FIELD) ->  FIELD
     {403, 1}, // 113: type (NAME) ->  NAME
     {404, 1}, // 114: varlist ->  decl_term
     {404, 3}, // 115: varlist (',') ->  varlist ',' decl_term
     {405, 2}, // 116: decl_term ->  term opt_port_clause
     {406, 3}, // 117: loop_statement (FOR) ->  FOR each_expr statement
     {407, 1}, // 118: opt_each_expr ->  exp
     {407, 1}, // 119: opt_each_expr ->  each_expr
     {408, 5}, // 120: each_expr (EACH) ->  EACH variable OF exp opt_cond
     {408, 3}, // 121: each_expr (EACH) ->  EACH exp opt_cond
     {408, 4}, // 122: each_expr (EACH) ->  EACH variable OF exp
     {408, 2}, // 123: each_expr (EACH) ->  EACH exp
     {409, 2}, // 124: opt_cond (EXCEPT) ->  EXCEPT exp
     {409, 2}, // 125: opt_cond (WHERE) ->  WHERE exp
     {410, 5}, // 126: cond_statement (THEN) ->  IF '(' exp ')' statement
     {410, 7}, // 127: cond_statement (IF) ->  IF '(' exp ')' statement ELSE statement
     {411, 7}, // 128: set_statement (SET) ->  SET exp AS prot_call DOUBLE_COLON exp ';'
     {412, 5}, // 129: connect_statement (CONNECT) ->  CONNECT exp to_and exp ';'
     {413, 1}, // 130: to_and (TO) ->  TO
     {413, 1}, // 131: to_and (AND) ->  AND
     {414, 3}, // 132: exp_list ('{') ->  '{' exp_list_elem '}'
     {415, 1}, // 133: exp_list_elem ->  exp
     {415, 3}, // 134: exp_list_elem (',') ->  exp_list_elem ',' exp
     {416, 5}, // 135: forward_statement (FORWARD) ->  FORWARD exp TO exp ';'
     {417, 1}, // 136: variable (NAME) ->  NAME
     {418, 1}, // 137: constant (INTEGER_NUMBER) ->  INTEGER_NUMBER
     {419, 1}, // 138: program_$ ->  program
};

// State info and SR__ transitions for each state.


SR__ s_0[] =
{
    { { REQ_TOKEN}, { 6} },                 
    { {       364}, { 1} }, // program      
    { {       365}, { 2} }, // protocol_list
    { {       366}, { 3} }, // protocol     
    { {       369}, { 4} }, // prot_decl    
    { {       261}, { 5} }, // PROTOCOL     
    { {         0}, { 0} },                 
};

SR__ s_1[] =
{
    { { REQ_TOKEN}, {            2} }, 
    { {     _EOF_}, { PARSE_ACCEPT} }, 
    { {         0}, {            0} }, 
};

SR__ s_2[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -1} }, 
};

SR__ s_3[] =
{
    { { REQ_DEF}, {  5} },                 
    { {     365}, {  6} }, // protocol_list
    { {     366}, {  3} }, // protocol     
    { {     369}, {  4} }, // prot_decl    
    { {     261}, {  5} }, // PROTOCOL     
    { {       0}, { -2} },                 
};

SR__ s_4[] =
{
    { { REQ_TOKEN}, { 2} },       
    { {       123}, { 7} }, // '{'
    { {         0}, { 0} },       
};

SR__ s_5[] =
{
    { { REQ_TOKEN}, { 2} },        
    { {       258}, { 8} }, // NAME
    { {         0}, { 0} },        
};

SR__ s_6[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -3} }, 
};

SR__ s_7[] =
{
    { { DEF_RED}, {  2} },         
    { {     367}, {  9} }, // #0001
    { {       0}, { -5} },         
};

SR__ s_8[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 10} }, // '('
    { {         0}, {  0} },       
};

SR__ s_9[] =
{
    { { REQ_DEF}, {   3} },            
    { {     382}, {  11} }, // opt_uses
    { {     271}, {  12} }, // USES    
    { {       0}, { -57} },            
};

SR__ s_10[] =
{
    { { REQ_DEF}, {  16} },                
    { {     376}, {  13} }, // opt_arg_list
    { {     377}, {  14} }, // arg_list    
    { {     378}, {  15} }, // arg         
    { {     403}, {  16} }, // type        
    { {      40}, {  17} }, // '('         
    { {     263}, {  18} }, // PARTY       
    { {     259}, {  19} }, // INTEGER     
    { {     278}, {  20} }, // SESSION     
    { {     279}, {  21} }, // UNKNOWN     
    { {     280}, {  22} }, // PORT        
    { {     281}, {  23} }, // INPORT      
    { {     282}, {  24} }, // OUTPORT     
    { {     295}, {  25} }, // BOOL        
    { {     260}, {  26} }, // FIELD       
    { {     258}, {  27} }, // NAME        
    { {       0}, { -17} },                
};

SR__ s_11[] =
{
    { { DEF_RED}, {  2} },         
    { {     368}, { 28} }, // #0002
    { {       0}, { -6} },         
};

SR__ s_12[] =
{
    { { REQ_TOKEN}, {  4} },                  
    { {       383}, { 29} }, // prot_decl_list
    { {       369}, { 30} }, // prot_decl     
    { {       261}, {  5} }, // PROTOCOL      
    { {         0}, {  0} },                  
};

SR__ s_13[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        41}, { 31} }, // ')'
    { {         0}, {  0} },       
};

SR__ s_14[] =
{
    { { REQ_DEF}, {   2} },       
    { {      44}, {  32} }, // ','
    { {       0}, { -18} },       
};

SR__ s_15[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -19} }, 
};

SR__ s_16[] =
{
    { { REQ_TOKEN}, { 14} },                  
    { {       379}, { 33} }, // term          
    { {       417}, { 34} }, // variable      
    { {        35}, { 35} }, // '#'           
    { {        64}, { 36} }, // '@'           
    { {       270}, { 37} }, // RAND          
    { {       418}, { 38} }, // constant      
    { {       266}, { 39} }, // ENV           
    { {       265}, { 40} }, // IDEAL         
    { {       294}, { 41} }, // RAND_PORT     
    { {       293}, { 42} }, // ENV_PORT      
    { {       299}, { 43} }, // DOUBLE_DOT    
    { {       258}, { 44} }, // NAME          
    { {       257}, { 45} }, // INTEGER_NUMBER
    { {         0}, {  0} },                  
};

SR__ s_17[] =
{
    { { REQ_TOKEN}, {  3} },             
    { {       369}, { 46} }, // prot_decl
    { {       261}, {  5} }, // PROTOCOL 
    { {         0}, {  0} },             
};

SR__ s_18[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -104} }, 
};

SR__ s_19[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -105} }, 
};

SR__ s_20[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -106} }, 
};

SR__ s_21[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -107} }, 
};

SR__ s_22[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -108} }, 
};

SR__ s_23[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -109} }, 
};

SR__ s_24[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -110} }, 
};

SR__ s_25[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -111} }, 
};

SR__ s_26[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -112} }, 
};

SR__ s_27[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -113} }, 
};

SR__ s_28[] =
{
    { { ERR_REQ_DEF}, {  67} },                         
    { {         384}, {  47} }, // statement_list       
    { {         385}, {  48} }, // statement            
    { {         391}, {  49} }, // assignment_statement 
    { {         392}, {  50} }, // mult_statement       
    { {         393}, {  51} }, // pvt_statement        
    { {         394}, {  52} }, // with_statement       
    { {         395}, {  53} }, // send_statement       
    { {         396}, {  54} }, // session_call         
    { {         401}, {  55} }, // tying_statement      
    { {         402}, {  56} }, // declaration_statement
    { {         366}, {  57} }, // protocol             
    { {         406}, {  58} }, // loop_statement       
    { {         410}, {  59} }, // cond_statement       
    { {         387}, {  60} }, // wrap_statement       
    { {         412}, {  61} }, // connect_statement    
    { {         386}, {  62} }, // abort_statement      
    { {         389}, {  63} }, // seq_statement        
    { {         388}, {  64} }, // start_statement      
    { {         411}, {  65} }, // set_statement        
    { {         416}, {  66} }, // forward_statement    
    { {     _error_}, {  67} }, // _error_              
    { {         379}, {  68} }, // term                 
    { {         123}, {  69} }, // '{'                  
    { {         267}, {  70} }, // IN                   
    { {         297}, {  71} }, // WITH                 
    { {         381}, {  72} }, // exp                  
    { {         397}, {  73} }, // opt_partial          
    { {         403}, {  74} }, // type                 
    { {         369}, {   4} }, // prot_decl            
    { {         283}, {  75} }, // FOR                  
    { {         287}, {  76} }, // IF                   
    { {         273}, {  77} }, // WRAP                 
    { {         289}, {  78} }, // CONNECT              
    { {         272}, {  79} }, // ABORTING             
    { {         275}, {  80} }, // BEFORE               
    { {         276}, {  81} }, // AFTER                
    { {         274}, {  82} }, // START                
    { {         288}, {  83} }, // SET                  
    { {         291}, {  84} }, // FORWARD              
    { {         417}, {  34} }, // variable             
    { {          35}, {  35} }, // '#'                  
    { {          64}, {  36} }, // '@'                  
    { {         270}, {  37} }, // RAND                 
    { {         418}, {  38} }, // constant             
    { {         266}, {  39} }, // ENV                  
    { {         265}, {  40} }, // IDEAL                
    { {         294}, {  41} }, // RAND_PORT            
    { {         293}, {  42} }, // ENV_PORT             
    { {         299}, {  43} }, // DOUBLE_DOT           
    { {          45}, {  85} }, // '-'                  
    { {         310}, {  86} }, // NOT                  
    { {          40}, {  87} }, // '('                  
    { {         414}, {  88} }, // exp_list             
    { {         296}, {  89} }, // PARTIAL              
    { {         263}, {  18} }, // PARTY                
    { {         259}, {  19} }, // INTEGER              
    { {         278}, {  20} }, // SESSION              
    { {         279}, {  21} }, // UNKNOWN              
    { {         280}, {  22} }, // PORT                 
    { {         281}, {  23} }, // INPORT               
    { {         282}, {  24} }, // OUTPORT              
    { {         295}, {  25} }, // BOOL                 
    { {         260}, {  26} }, // FIELD                
    { {         258}, {  90} }, // NAME                 
    { {         261}, {   5} }, // PROTOCOL             
    { {         257}, {  45} }, // INTEGER_NUMBER       
    { {           0}, { -95} },                         
};

SR__ s_29[] =
{
    { { REQ_TOKEN}, {  4} },             
    { {        59}, { 91} }, // ';'      
    { {       369}, { 92} }, // prot_decl
    { {       261}, {  5} }, // PROTOCOL 
    { {         0}, {  0} },             
};

SR__ s_30[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -59} }, 
};

SR__ s_31[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        58}, { 93} }, // ':'
    { {         0}, {  0} },       
};

SR__ s_32[] =
{
    { { REQ_TOKEN}, { 14} },           
    { {       378}, { 94} }, // arg    
    { {       403}, { 16} }, // type   
    { {        40}, { 17} }, // '('    
    { {       263}, { 18} }, // PARTY  
    { {       259}, { 19} }, // INTEGER
    { {       278}, { 20} }, // SESSION
    { {       279}, { 21} }, // UNKNOWN
    { {       280}, { 22} }, // PORT   
    { {       281}, { 23} }, // INPORT 
    { {       282}, { 24} }, // OUTPORT
    { {       295}, { 25} }, // BOOL   
    { {       260}, { 26} }, // FIELD  
    { {       258}, { 27} }, // NAME   
    { {         0}, {  0} },           
};

SR__ s_33[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -21} }, 
};

SR__ s_34[] =
{
    { { DEF_RED}, {   2} },           
    { {     380}, {  95} }, // dimlist
    { {       0}, { -33} },           
};

SR__ s_35[] =
{
    { { REQ_TOKEN}, {  3} },            
    { {       417}, { 96} }, // variable
    { {       258}, { 44} }, // NAME    
    { {         0}, {  0} },            
};

SR__ s_36[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -25} }, 
};

SR__ s_37[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -26} }, 
};

SR__ s_38[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -27} }, 
};

SR__ s_39[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -28} }, 
};

SR__ s_40[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -29} }, 
};

SR__ s_41[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -30} }, 
};

SR__ s_42[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -31} }, 
};

SR__ s_43[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -32} }, 
};

SR__ s_44[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -136} }, 
};

SR__ s_45[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -137} }, 
};

SR__ s_46[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        41}, { 97} }, // ')'
    { {         0}, {  0} },       
};

SR__ s_47[] =
{
    { { ERR_REQ_DEF}, {  67} },                         
    { {         125}, {  98} }, // '}'                  
    { {         385}, {  99} }, // statement            
    { {         391}, {  49} }, // assignment_statement 
    { {         392}, {  50} }, // mult_statement       
    { {         393}, {  51} }, // pvt_statement        
    { {         394}, {  52} }, // with_statement       
    { {         395}, {  53} }, // send_statement       
    { {         396}, {  54} }, // session_call         
    { {         401}, {  55} }, // tying_statement      
    { {         402}, {  56} }, // declaration_statement
    { {         366}, {  57} }, // protocol             
    { {         406}, {  58} }, // loop_statement       
    { {         410}, {  59} }, // cond_statement       
    { {         387}, {  60} }, // wrap_statement       
    { {         412}, {  61} }, // connect_statement    
    { {         386}, {  62} }, // abort_statement      
    { {         389}, {  63} }, // seq_statement        
    { {         388}, {  64} }, // start_statement      
    { {         411}, {  65} }, // set_statement        
    { {         416}, {  66} }, // forward_statement    
    { {     _error_}, {  67} }, // _error_              
    { {         379}, {  68} }, // term                 
    { {         123}, {  69} }, // '{'                  
    { {         267}, {  70} }, // IN                   
    { {         297}, {  71} }, // WITH                 
    { {         381}, {  72} }, // exp                  
    { {         397}, {  73} }, // opt_partial          
    { {         403}, {  74} }, // type                 
    { {         369}, {   4} }, // prot_decl            
    { {         283}, {  75} }, // FOR                  
    { {         287}, {  76} }, // IF                   
    { {         273}, {  77} }, // WRAP                 
    { {         289}, {  78} }, // CONNECT              
    { {         272}, {  79} }, // ABORTING             
    { {         275}, {  80} }, // BEFORE               
    { {         276}, {  81} }, // AFTER                
    { {         274}, {  82} }, // START                
    { {         288}, {  83} }, // SET                  
    { {         291}, {  84} }, // FORWARD              
    { {         417}, {  34} }, // variable             
    { {          35}, {  35} }, // '#'                  
    { {          64}, {  36} }, // '@'                  
    { {         270}, {  37} }, // RAND                 
    { {         418}, {  38} }, // constant             
    { {         266}, {  39} }, // ENV                  
    { {         265}, {  40} }, // IDEAL                
    { {         294}, {  41} }, // RAND_PORT            
    { {         293}, {  42} }, // ENV_PORT             
    { {         299}, {  43} }, // DOUBLE_DOT           
    { {          45}, {  85} }, // '-'                  
    { {         310}, {  86} }, // NOT                  
    { {          40}, {  87} }, // '('                  
    { {         414}, {  88} }, // exp_list             
    { {         296}, {  89} }, // PARTIAL              
    { {         263}, {  18} }, // PARTY                
    { {         259}, {  19} }, // INTEGER              
    { {         278}, {  20} }, // SESSION              
    { {         279}, {  21} }, // UNKNOWN              
    { {         280}, {  22} }, // PORT                 
    { {         281}, {  23} }, // INPORT               
    { {         282}, {  24} }, // OUTPORT              
    { {         295}, {  25} }, // BOOL                 
    { {         260}, {  26} }, // FIELD                
    { {         258}, {  90} }, // NAME                 
    { {         261}, {   5} }, // PROTOCOL             
    { {         257}, {  45} }, // INTEGER_NUMBER       
    { {           0}, { -95} },                         
};

SR__ s_48[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -61} }, 
};

SR__ s_49[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -63} }, 
};

SR__ s_50[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -64} }, 
};

SR__ s_51[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -65} }, 
};

SR__ s_52[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -66} }, 
};

SR__ s_53[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -67} }, 
};

SR__ s_54[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -68} }, 
};

SR__ s_55[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -69} }, 
};

SR__ s_56[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -70} }, 
};

SR__ s_57[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -71} }, 
};

SR__ s_58[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -72} }, 
};

SR__ s_59[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -73} }, 
};

SR__ s_60[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -74} }, 
};

SR__ s_61[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -75} }, 
};

SR__ s_62[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -76} }, 
};

SR__ s_63[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -77} }, 
};

SR__ s_64[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -78} }, 
};

SR__ s_65[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -79} }, 
};

SR__ s_66[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -80} }, 
};

SR__ s_67[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        59}, { 100} }, // ';'
    { {         0}, {   0} },       
};

SR__ s_68[] =
{
    { { REQ_DEF}, {   4} },          
    { {     262}, { 101} }, // ASSIGN
    { {      46}, { 102} }, // '.'   
    { {     300}, { 103} }, // FROM  
    { {       0}, { -56} },          
};

SR__ s_69[] =
{
    { { ERR_REQ_DEF}, {  68} },                         
    { {         384}, { 104} }, // statement_list       
    { {         415}, { 105} }, // exp_list_elem        
    { {         385}, {  48} }, // statement            
    { {         381}, { 106} }, // exp                  
    { {         391}, {  49} }, // assignment_statement 
    { {         392}, {  50} }, // mult_statement       
    { {         393}, {  51} }, // pvt_statement        
    { {         394}, {  52} }, // with_statement       
    { {         395}, {  53} }, // send_statement       
    { {         396}, {  54} }, // session_call         
    { {         401}, {  55} }, // tying_statement      
    { {         402}, {  56} }, // declaration_statement
    { {         366}, {  57} }, // protocol             
    { {         406}, {  58} }, // loop_statement       
    { {         410}, {  59} }, // cond_statement       
    { {         387}, {  60} }, // wrap_statement       
    { {         412}, {  61} }, // connect_statement    
    { {         386}, {  62} }, // abort_statement      
    { {         389}, {  63} }, // seq_statement        
    { {         388}, {  64} }, // start_statement      
    { {         411}, {  65} }, // set_statement        
    { {         416}, {  66} }, // forward_statement    
    { {     _error_}, {  67} }, // _error_              
    { {          45}, {  85} }, // '-'                  
    { {         310}, {  86} }, // NOT                  
    { {          40}, {  87} }, // '('                  
    { {         379}, {  68} }, // term                 
    { {         414}, {  88} }, // exp_list             
    { {         123}, {  69} }, // '{'                  
    { {         267}, {  70} }, // IN                   
    { {         297}, {  71} }, // WITH                 
    { {         397}, {  73} }, // opt_partial          
    { {         403}, {  74} }, // type                 
    { {         369}, {   4} }, // prot_decl            
    { {         283}, {  75} }, // FOR                  
    { {         287}, {  76} }, // IF                   
    { {         273}, {  77} }, // WRAP                 
    { {         289}, {  78} }, // CONNECT              
    { {         272}, {  79} }, // ABORTING             
    { {         275}, {  80} }, // BEFORE               
    { {         276}, {  81} }, // AFTER                
    { {         274}, {  82} }, // START                
    { {         288}, {  83} }, // SET                  
    { {         291}, {  84} }, // FORWARD              
    { {         417}, {  34} }, // variable             
    { {          35}, {  35} }, // '#'                  
    { {          64}, {  36} }, // '@'                  
    { {         270}, {  37} }, // RAND                 
    { {         418}, {  38} }, // constant             
    { {         266}, {  39} }, // ENV                  
    { {         265}, {  40} }, // IDEAL                
    { {         294}, {  41} }, // RAND_PORT            
    { {         293}, {  42} }, // ENV_PORT             
    { {         299}, {  43} }, // DOUBLE_DOT           
    { {         296}, {  89} }, // PARTIAL              
    { {         263}, {  18} }, // PARTY                
    { {         259}, {  19} }, // INTEGER              
    { {         278}, {  20} }, // SESSION              
    { {         279}, {  21} }, // UNKNOWN              
    { {         280}, {  22} }, // PORT                 
    { {         281}, {  23} }, // INPORT               
    { {         282}, {  24} }, // OUTPORT              
    { {         295}, {  25} }, // BOOL                 
    { {         260}, {  26} }, // FIELD                
    { {         258}, {  90} }, // NAME                 
    { {         261}, {   5} }, // PROTOCOL             
    { {         257}, {  45} }, // INTEGER_NUMBER       
    { {           0}, { -95} },                         
};

SR__ s_70[] =
{
    { { REQ_TOKEN}, {  23} },                  
    { {       407}, { 107} }, // opt_each_expr 
    { {       381}, { 108} }, // exp           
    { {       408}, { 109} }, // each_expr     
    { {        45}, {  85} }, // '-'           
    { {       310}, {  86} }, // NOT           
    { {        40}, {  87} }, // '('           
    { {       379}, { 110} }, // term          
    { {       414}, {  88} }, // exp_list      
    { {       277}, { 111} }, // EACH          
    { {       417}, {  34} }, // variable      
    { {        35}, {  35} }, // '#'           
    { {        64}, {  36} }, // '@'           
    { {       270}, {  37} }, // RAND          
    { {       418}, {  38} }, // constant      
    { {       266}, {  39} }, // ENV           
    { {       265}, {  40} }, // IDEAL         
    { {       294}, {  41} }, // RAND_PORT     
    { {       293}, {  42} }, // ENV_PORT      
    { {       299}, {  43} }, // DOUBLE_DOT    
    { {       123}, { 112} }, // '{'           
    { {       258}, {  44} }, // NAME          
    { {       257}, {  45} }, // INTEGER_NUMBER
    { {         0}, {   0} },                  
};

SR__ s_71[] =
{
    { { REQ_TOKEN}, {  23} },                  
    { {       407}, { 113} }, // opt_each_expr 
    { {       381}, { 108} }, // exp           
    { {       408}, { 109} }, // each_expr     
    { {        45}, {  85} }, // '-'           
    { {       310}, {  86} }, // NOT           
    { {        40}, {  87} }, // '('           
    { {       379}, { 110} }, // term          
    { {       414}, {  88} }, // exp_list      
    { {       277}, { 111} }, // EACH          
    { {       417}, {  34} }, // variable      
    { {        35}, {  35} }, // '#'           
    { {        64}, {  36} }, // '@'           
    { {       270}, {  37} }, // RAND          
    { {       418}, {  38} }, // constant      
    { {       266}, {  39} }, // ENV           
    { {       265}, {  40} }, // IDEAL         
    { {       294}, {  41} }, // RAND_PORT     
    { {       293}, {  42} }, // ENV_PORT      
    { {       299}, {  43} }, // DOUBLE_DOT    
    { {       123}, { 112} }, // '{'           
    { {       258}, {  44} }, // NAME          
    { {       257}, {  45} }, // INTEGER_NUMBER
    { {         0}, {   0} },                  
};

SR__ s_72[] =
{
    { { REQ_TOKEN}, {  17} },         
    { {       264}, { 114} }, // SEND 
    { {        58}, { 115} }, // ':'  
    { {        43}, { 116} }, // '+'  
    { {        45}, { 117} }, // '-'  
    { {        42}, { 118} }, // '*'  
    { {        47}, { 119} }, // '/'  
    { {        37}, { 120} }, // '%'  
    { {       302}, { 121} }, // B_AND
    { {       301}, { 122} }, // OR   
    { {       303}, { 123} }, // EQ   
    { {       305}, { 124} }, // LT   
    { {       308}, { 125} }, // GT   
    { {       304}, { 126} }, // NE   
    { {       306}, { 127} }, // LE   
    { {       307}, { 128} }, // GE   
    { {       124}, { 129} }, // '|'  
    { {         0}, {   0} },         
};

SR__ s_73[] =
{
    { { REQ_TOKEN}, {   2} },        
    { {       268}, { 130} }, // OPEN
    { {         0}, {   0} },        
};

SR__ s_74[] =
{
    { { REQ_TOKEN}, {  16} },                  
    { {       404}, { 131} }, // varlist       
    { {       405}, { 132} }, // decl_term     
    { {       379}, { 133} }, // term          
    { {       417}, {  34} }, // variable      
    { {        35}, {  35} }, // '#'           
    { {        64}, {  36} }, // '@'           
    { {       270}, {  37} }, // RAND          
    { {       418}, {  38} }, // constant      
    { {       266}, {  39} }, // ENV           
    { {       265}, {  40} }, // IDEAL         
    { {       294}, {  41} }, // RAND_PORT     
    { {       293}, {  42} }, // ENV_PORT      
    { {       299}, {  43} }, // DOUBLE_DOT    
    { {       258}, {  44} }, // NAME          
    { {       257}, {  45} }, // INTEGER_NUMBER
    { {         0}, {   0} },                  
};

SR__ s_75[] =
{
    { { REQ_TOKEN}, {   3} },             
    { {       408}, { 134} }, // each_expr
    { {       277}, { 111} }, // EACH     
    { {         0}, {   0} },             
};

SR__ s_76[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        40}, { 135} }, // '('
    { {         0}, {   0} },       
};

SR__ s_77[] =
{
    { { ERR_REQ_DEF}, {  66} },                         
    { {         385}, { 136} }, // statement            
    { {         391}, {  49} }, // assignment_statement 
    { {         392}, {  50} }, // mult_statement       
    { {         393}, {  51} }, // pvt_statement        
    { {         394}, {  52} }, // with_statement       
    { {         395}, {  53} }, // send_statement       
    { {         396}, {  54} }, // session_call         
    { {         401}, {  55} }, // tying_statement      
    { {         402}, {  56} }, // declaration_statement
    { {         366}, {  57} }, // protocol             
    { {         406}, {  58} }, // loop_statement       
    { {         410}, {  59} }, // cond_statement       
    { {         387}, {  60} }, // wrap_statement       
    { {         412}, {  61} }, // connect_statement    
    { {         386}, {  62} }, // abort_statement      
    { {         389}, {  63} }, // seq_statement        
    { {         388}, {  64} }, // start_statement      
    { {         411}, {  65} }, // set_statement        
    { {         416}, {  66} }, // forward_statement    
    { {     _error_}, {  67} }, // _error_              
    { {         379}, {  68} }, // term                 
    { {         123}, {  69} }, // '{'                  
    { {         267}, {  70} }, // IN                   
    { {         297}, {  71} }, // WITH                 
    { {         381}, {  72} }, // exp                  
    { {         397}, {  73} }, // opt_partial          
    { {         403}, {  74} }, // type                 
    { {         369}, {   4} }, // prot_decl            
    { {         283}, {  75} }, // FOR                  
    { {         287}, {  76} }, // IF                   
    { {         273}, {  77} }, // WRAP                 
    { {         289}, {  78} }, // CONNECT              
    { {         272}, {  79} }, // ABORTING             
    { {         275}, {  80} }, // BEFORE               
    { {         276}, {  81} }, // AFTER                
    { {         274}, {  82} }, // START                
    { {         288}, {  83} }, // SET                  
    { {         291}, {  84} }, // FORWARD              
    { {         417}, {  34} }, // variable             
    { {          35}, {  35} }, // '#'                  
    { {          64}, {  36} }, // '@'                  
    { {         270}, {  37} }, // RAND                 
    { {         418}, {  38} }, // constant             
    { {         266}, {  39} }, // ENV                  
    { {         265}, {  40} }, // IDEAL                
    { {         294}, {  41} }, // RAND_PORT            
    { {         293}, {  42} }, // ENV_PORT             
    { {         299}, {  43} }, // DOUBLE_DOT           
    { {          45}, {  85} }, // '-'                  
    { {         310}, {  86} }, // NOT                  
    { {          40}, {  87} }, // '('                  
    { {         414}, {  88} }, // exp_list             
    { {         296}, {  89} }, // PARTIAL              
    { {         263}, {  18} }, // PARTY                
    { {         259}, {  19} }, // INTEGER              
    { {         278}, {  20} }, // SESSION              
    { {         279}, {  21} }, // UNKNOWN              
    { {         280}, {  22} }, // PORT                 
    { {         281}, {  23} }, // INPORT               
    { {         282}, {  24} }, // OUTPORT              
    { {         295}, {  25} }, // BOOL                 
    { {         260}, {  26} }, // FIELD                
    { {         258}, {  90} }, // NAME                 
    { {         261}, {   5} }, // PROTOCOL             
    { {         257}, {  45} }, // INTEGER_NUMBER       
    { {           0}, { -95} },                         
};

SR__ s_78[] =
{
    { { REQ_TOKEN}, {  20} },                  
    { {       381}, { 137} }, // exp           
    { {        45}, {  85} }, // '-'           
    { {       310}, {  86} }, // NOT           
    { {        40}, {  87} }, // '('           
    { {       379}, { 110} }, // term          
    { {       414}, {  88} }, // exp_list      
    { {       417}, {  34} }, // variable      
    { {        35}, {  35} }, // '#'           
    { {        64}, {  36} }, // '@'           
    { {       270}, {  37} }, // RAND          
    { {       418}, {  38} }, // constant      
    { {       266}, {  39} }, // ENV           
    { {       265}, {  40} }, // IDEAL         
    { {       294}, {  41} }, // RAND_PORT     
    { {       293}, {  42} }, // ENV_PORT      
    { {       299}, {  43} }, // DOUBLE_DOT    
    { {       123}, { 112} }, // '{'           
    { {       258}, {  44} }, // NAME          
    { {       257}, {  45} }, // INTEGER_NUMBER
    { {         0}, {   0} },                  
};

SR__ s_79[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        59}, { 138} }, // ';'
    { {         0}, {   0} },       
};

SR__ s_80[] =
{
    { { REQ_TOKEN}, {  23} },                  
    { {       407}, { 139} }, // opt_each_expr 
    { {       381}, { 108} }, // exp           
    { {       408}, { 109} }, // each_expr     
    { {        45}, {  85} }, // '-'           
    { {       310}, {  86} }, // NOT           
    { {        40}, {  87} }, // '('           
    { {       379}, { 110} }, // term          
    { {       414}, {  88} }, // exp_list      
    { {       277}, { 111} }, // EACH          
    { {       417}, {  34} }, // variable      
    { {        35}, {  35} }, // '#'           
    { {        64}, {  36} }, // '@'           
    { {       270}, {  37} }, // RAND          
    { {       418}, {  38} }, // constant      
    { {       266}, {  39} }, // ENV           
    { {       265}, {  40} }, // IDEAL         
    { {       294}, {  41} }, // RAND_PORT     
    { {       293}, {  42} }, // ENV_PORT      
    { {       299}, {  43} }, // DOUBLE_DOT    
    { {       123}, { 112} }, // '{'           
    { {       258}, {  44} }, // NAME          
    { {       257}, {  45} }, // INTEGER_NUMBER
    { {         0}, {   0} },                  
};

SR__ s_81[] =
{
    { { REQ_TOKEN}, {  23} },                  
    { {       407}, { 140} }, // opt_each_expr 
    { {       381}, { 108} }, // exp           
    { {       408}, { 109} }, // each_expr     
    { {        45}, {  85} }, // '-'           
    { {       310}, {  86} }, // NOT           
    { {        40}, {  87} }, // '('           
    { {       379}, { 110} }, // term          
    { {       414}, {  88} }, // exp_list      
    { {       277}, { 111} }, // EACH          
    { {       417}, {  34} }, // variable      
    { {        35}, {  35} }, // '#'           
    { {        64}, {  36} }, // '@'           
    { {       270}, {  37} }, // RAND          
    { {       418}, {  38} }, // constant      
    { {       266}, {  39} }, // ENV           
    { {       265}, {  40} }, // IDEAL         
    { {       294}, {  41} }, // RAND_PORT     
    { {       293}, {  42} }, // ENV_PORT      
    { {       299}, {  43} }, // DOUBLE_DOT    
    { {       123}, { 112} }, // '{'           
    { {       258}, {  44} }, // NAME          
    { {       257}, {  45} }, // INTEGER_NUMBER
    { {         0}, {   0} },                  
};

SR__ s_82[] =
{
    { { REQ_TOKEN}, {  20} },                  
    { {       381}, { 141} }, // exp           
    { {        45}, {  85} }, // '-'           
    { {       310}, {  86} }, // NOT           
    { {        40}, {  87} }, // '('           
    { {       379}, { 110} }, // term          
    { {       414}, {  88} }, // exp_list      
    { {       417}, {  34} }, // variable      
    { {        35}, {  35} }, // '#'           
    { {        64}, {  36} }, // '@'           
    { {       270}, {  37} }, // RAND          
    { {       418}, {  38} }, // constant      
    { {       266}, {  39} }, // ENV           
    { {       265}, {  40} }, // IDEAL         
    { {       294}, {  41} }, // RAND_PORT     
    { {       293}, {  42} }, // ENV_PORT      
    { {       299}, {  43} }, // DOUBLE_DOT    
    { {       123}, { 112} }, // '{'           
    { {       258}, {  44} }, // NAME          
    { {       257}, {  45} }, // INTEGER_NUMBER
    { {         0}, {   0} },                  
};

SR__ s_83[] =
{
    { { REQ_TOKEN}, {  20} },                  
    { {       381}, { 142} }, // exp           
    { {        45}, {  85} }, // '-'           
    { {       310}, {  86} }, // NOT           
    { {        40}, {  87} }, // '('           
    { {       379}, { 110} }, // term          
    { {       414}, {  88} }, // exp_list      
    { {       417}, {  34} }, // variable      
    { {        35}, {  35} }, // '#'           
    { {        64}, {  36} }, // '@'           
    { {       270}, {  37} }, // RAND          
    { {       418}, {  38} }, // constant      
    { {       266}, {  39} }, // ENV           
    { {       265}, {  40} }, // IDEAL         
    { {       294}, {  41} }, // RAND_PORT     
    { {       293}, {  42} }, // ENV_PORT      
    { {       299}, {  43} }, // DOUBLE_DOT    
    { {       123}, { 112} }, // '{'           
    { {       258}, {  44} }, // NAME          
    { {       257}, {  45} }, // INTEGER_NUMBER
    { {         0}, {   0} },                  
};

SR__ s_84[] =
{
    { { REQ_TOKEN}, {  20} },                  
    { {       381}, { 143} }, // exp           
    { {        45}, {  85} }, // '-'           
    { {       310}, {  86} }, // NOT           
    { {        40}, {  87} }, // '('           
    { {       379}, { 110} }, // term          
    { {       414}, {  88} }, // exp_list      
    { {       417}, {  34} }, // variable      
    { {        35}, {  35} }, // '#'           
    { {        64}, {  36} }, // '@'           
    { {       270}, {  37} }, // RAND          
    { {       418}, {  38} }, // constant      
    { {       266}, {  39} }, // ENV           
    { {       265}, {  40} }, // IDEAL         
    { {       294}, {  41} }, // RAND_PORT     
    { {       293}, {  42} }, // ENV_PORT      
    { {       299}, {  43} }, // DOUBLE_DOT    
    { {       123}, { 112} }, // '{'           
    { {       258}, {  44} }, // NAME          
    { {       257}, {  45} }, // INTEGER_NUMBER
    { {         0}, {   0} },                  
};

SR__ s_85[] =
{
    { { REQ_TOKEN}, {  20} },                  
    { {       381}, { 144} }, // exp           
    { {        45}, {  85} }, // '-'           
    { {       310}, {  86} }, // NOT           
    { {        40}, {  87} }, // '('           
    { {       379}, { 110} }, // term          
    { {       414}, {  88} }, // exp_list      
    { {       417}, {  34} }, // variable      
    { {        35}, {  35} }, // '#'           
    { {        64}, {  36} }, // '@'           
    { {       270}, {  37} }, // RAND          
    { {       418}, {  38} }, // constant      
    { {       266}, {  39} }, // ENV           
    { {       265}, {  40} }, // IDEAL         
    { {       294}, {  41} }, // RAND_PORT     
    { {       293}, {  42} }, // ENV_PORT      
    { {       299}, {  43} }, // DOUBLE_DOT    
    { {       123}, { 112} }, // '{'           
    { {       258}, {  44} }, // NAME          
    { {       257}, {  45} }, // INTEGER_NUMBER
    { {         0}, {   0} },                  
};

SR__ s_86[] =
{
    { { REQ_TOKEN}, {  20} },                  
    { {       381}, { 145} }, // exp           
    { {        45}, {  85} }, // '-'           
    { {       310}, {  86} }, // NOT           
    { {        40}, {  87} }, // '('           
    { {       379}, { 110} }, // term          
    { {       414}, {  88} }, // exp_list      
    { {       417}, {  34} }, // variable      
    { {        35}, {  35} }, // '#'           
    { {        64}, {  36} }, // '@'           
    { {       270}, {  37} }, // RAND          
    { {       418}, {  38} }, // constant      
    { {       266}, {  39} }, // ENV           
    { {       265}, {  40} }, // IDEAL         
    { {       294}, {  41} }, // RAND_PORT     
    { {       293}, {  42} }, // ENV_PORT      
    { {       299}, {  43} }, // DOUBLE_DOT    
    { {       123}, { 112} }, // '{'           
    { {       258}, {  44} }, // NAME          
    { {       257}, {  45} }, // INTEGER_NUMBER
    { {         0}, {   0} },                  
};

SR__ s_87[] =
{
    { { REQ_TOKEN}, {  20} },                  
    { {       381}, { 146} }, // exp           
    { {        45}, {  85} }, // '-'           
    { {       310}, {  86} }, // NOT           
    { {        40}, {  87} }, // '('           
    { {       379}, { 110} }, // term          
    { {       414}, {  88} }, // exp_list      
    { {       417}, {  34} }, // variable      
    { {        35}, {  35} }, // '#'           
    { {        64}, {  36} }, // '@'           
    { {       270}, {  37} }, // RAND          
    { {       418}, {  38} }, // constant      
    { {       266}, {  39} }, // ENV           
    { {       265}, {  40} }, // IDEAL         
    { {       294}, {  41} }, // RAND_PORT     
    { {       293}, {  42} }, // ENV_PORT      
    { {       299}, {  43} }, // DOUBLE_DOT    
    { {       123}, { 112} }, // '{'           
    { {       258}, {  44} }, // NAME          
    { {       257}, {  45} }, // INTEGER_NUMBER
    { {         0}, {   0} },                  
};

SR__ s_88[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -55} }, 
};

SR__ s_89[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -96} }, 
};

SR__ s_90[] =
{
    { { REQ_DEF}, {   11} },                  
    { {     258}, { -113} }, // NAME          
    { {     257}, { -113} }, // INTEGER_NUMBER
    { {     265}, { -113} }, // IDEAL         
    { {     266}, { -113} }, // ENV           
    { {     270}, { -113} }, // RAND          
    { {     293}, { -113} }, // ENV_PORT      
    { {     294}, { -113} }, // RAND_PORT     
    { {     299}, { -113} }, // DOUBLE_DOT    
    { {      35}, { -113} }, // '#'           
    { {      64}, { -113} }, // '@'           
    { {       0}, { -136} },                  
};

SR__ s_91[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -58} }, 
};

SR__ s_92[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -60} }, 
};

SR__ s_93[] =
{
    { { REQ_TOKEN}, {   2} },         
    { {       263}, { 147} }, // PARTY
    { {         0}, {   0} },         
};

SR__ s_94[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -20} }, 
};

SR__ s_95[] =
{
    { { REQ_DEF}, {   2} },       
    { {      91}, { 148} }, // '['
    { {       0}, { -23} },       
};

SR__ s_96[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -24} }, 
};

SR__ s_97[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -22} }, 
};

SR__ s_98[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -4} }, 
};

SR__ s_99[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -62} }, 
};

SR__ s_100[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -81} }, 
};

SR__ s_101[] =
{
    { { REQ_TOKEN}, {  20} },                  
    { {       381}, { 149} }, // exp           
    { {        45}, {  85} }, // '-'           
    { {       310}, {  86} }, // NOT           
    { {        40}, {  87} }, // '('           
    { {       379}, { 110} }, // term          
    { {       414}, {  88} }, // exp_list      
    { {       417}, {  34} }, // variable      
    { {        35}, {  35} }, // '#'           
    { {        64}, {  36} }, // '@'           
    { {       270}, {  37} }, // RAND          
    { {       418}, {  38} }, // constant      
    { {       266}, {  39} }, // ENV           
    { {       265}, {  40} }, // IDEAL         
    { {       294}, {  41} }, // RAND_PORT     
    { {       293}, {  42} }, // ENV_PORT      
    { {       299}, {  43} }, // DOUBLE_DOT    
    { {       123}, { 112} }, // '{'           
    { {       258}, {  44} }, // NAME          
    { {       257}, {  45} }, // INTEGER_NUMBER
    { {         0}, {   0} },                  
};

SR__ s_102[] =
{
    { { REQ_TOKEN}, {  20} },                  
    { {       381}, { 150} }, // exp           
    { {        45}, {  85} }, // '-'           
    { {       310}, {  86} }, // NOT           
    { {        40}, {  87} }, // '('           
    { {       379}, { 110} }, // term          
    { {       414}, {  88} }, // exp_list      
    { {       417}, {  34} }, // variable      
    { {        35}, {  35} }, // '#'           
    { {        64}, {  36} }, // '@'           
    { {       270}, {  37} }, // RAND          
    { {       418}, {  38} }, // constant      
    { {       266}, {  39} }, // ENV           
    { {       265}, {  40} }, // IDEAL         
    { {       294}, {  41} }, // RAND_PORT     
    { {       293}, {  42} }, // ENV_PORT      
    { {       299}, {  43} }, // DOUBLE_DOT    
    { {       123}, { 112} }, // '{'           
    { {       258}, {  44} }, // NAME          
    { {       257}, {  45} }, // INTEGER_NUMBER
    { {         0}, {   0} },                  
};

SR__ s_103[] =
{
    { { REQ_TOKEN}, {   3} },            
    { {       414}, { 151} }, // exp_list
    { {       123}, { 112} }, // '{'     
    { {         0}, {   0} },            
};

SR__ s_104[] =
{
    { { ERR_REQ_DEF}, {  67} },                         
    { {         125}, { 152} }, // '}'                  
    { {         385}, {  99} }, // statement            
    { {         391}, {  49} }, // assignment_statement 
    { {         392}, {  50} }, // mult_statement       
    { {         393}, {  51} }, // pvt_statement        
    { {         394}, {  52} }, // with_statement       
    { {         395}, {  53} }, // send_statement       
    { {         396}, {  54} }, // session_call         
    { {         401}, {  55} }, // tying_statement      
    { {         402}, {  56} }, // declaration_statement
    { {         366}, {  57} }, // protocol             
    { {         406}, {  58} }, // loop_statement       
    { {         410}, {  59} }, // cond_statement       
    { {         387}, {  60} }, // wrap_statement       
    { {         412}, {  61} }, // connect_statement    
    { {         386}, {  62} }, // abort_statement      
    { {         389}, {  63} }, // seq_statement        
    { {         388}, {  64} }, // start_statement      
    { {         411}, {  65} }, // set_statement        
    { {         416}, {  66} }, // forward_statement    
    { {     _error_}, {  67} }, // _error_              
    { {         379}, {  68} }, // term                 
    { {         123}, {  69} }, // '{'                  
    { {         267}, {  70} }, // IN                   
    { {         297}, {  71} }, // WITH                 
    { {         381}, {  72} }, // exp                  
    { {         397}, {  73} }, // opt_partial          
    { {         403}, {  74} }, // type                 
    { {         369}, {   4} }, // prot_decl            
    { {         283}, {  75} }, // FOR                  
    { {         287}, {  76} }, // IF                   
    { {         273}, {  77} }, // WRAP                 
    { {         289}, {  78} }, // CONNECT              
    { {         272}, {  79} }, // ABORTING             
    { {         275}, {  80} }, // BEFORE               
    { {         276}, {  81} }, // AFTER                
    { {         274}, {  82} }, // START                
    { {         288}, {  83} }, // SET                  
    { {         291}, {  84} }, // FORWARD              
    { {         417}, {  34} }, // variable             
    { {          35}, {  35} }, // '#'                  
    { {          64}, {  36} }, // '@'                  
    { {         270}, {  37} }, // RAND                 
    { {         418}, {  38} }, // constant             
    { {         266}, {  39} }, // ENV                  
    { {         265}, {  40} }, // IDEAL                
    { {         294}, {  41} }, // RAND_PORT            
    { {         293}, {  42} }, // ENV_PORT             
    { {         299}, {  43} }, // DOUBLE_DOT           
    { {          45}, {  85} }, // '-'                  
    { {         310}, {  86} }, // NOT                  
    { {          40}, {  87} }, // '('                  
    { {         414}, {  88} }, // exp_list             
    { {         296}, {  89} }, // PARTIAL              
    { {         263}, {  18} }, // PARTY                
    { {         259}, {  19} }, // INTEGER              
    { {         278}, {  20} }, // SESSION              
    { {         279}, {  21} }, // UNKNOWN              
    { {         280}, {  22} }, // PORT                 
    { {         281}, {  23} }, // INPORT               
    { {         282}, {  24} }, // OUTPORT              
    { {         295}, {  25} }, // BOOL                 
    { {         260}, {  26} }, // FIELD                
    { {         258}, {  90} }, // NAME                 
    { {         261}, {   5} }, // PROTOCOL             
    { {         257}, {  45} }, // INTEGER_NUMBER       
    { {           0}, { -95} },                         
};

SR__ s_105[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {       125}, { 153} }, // '}'
    { {        44}, { 154} }, // ','
    { {         0}, {   0} },       
};

SR__ s_106[] =
{
    { { REQ_DEF}, {   17} },         
    { {      43}, {  116} }, // '+'  
    { {      45}, {  117} }, // '-'  
    { {      42}, {  118} }, // '*'  
    { {      47}, {  119} }, // '/'  
    { {      37}, {  120} }, // '%'  
    { {     302}, {  121} }, // B_AND
    { {     301}, {  122} }, // OR   
    { {     303}, {  123} }, // EQ   
    { {     305}, {  124} }, // LT   
    { {     308}, {  125} }, // GT   
    { {     304}, {  126} }, // NE   
    { {     306}, {  127} }, // LE   
    { {     307}, {  128} }, // GE   
    { {     124}, {  129} }, // '|'  
    { {     264}, {  114} }, // SEND 
    { {      58}, {  115} }, // ':'  
    { {       0}, { -133} },         
};

SR__ s_107[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {       123}, { 155} }, // '{'
    { {         0}, {   0} },       
};

SR__ s_108[] =
{
    { { REQ_DEF}, {   15} },         
    { {      43}, {  116} }, // '+'  
    { {      45}, {  117} }, // '-'  
    { {      42}, {  118} }, // '*'  
    { {      47}, {  119} }, // '/'  
    { {      37}, {  120} }, // '%'  
    { {     302}, {  121} }, // B_AND
    { {     301}, {  122} }, // OR   
    { {     303}, {  123} }, // EQ   
    { {     305}, {  124} }, // LT   
    { {     308}, {  125} }, // GT   
    { {     304}, {  126} }, // NE   
    { {     306}, {  127} }, // LE   
    { {     307}, {  128} }, // GE   
    { {     124}, {  129} }, // '|'  
    { {       0}, { -118} },         
};

SR__ s_109[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -119} }, 
};

SR__ s_110[] =
{
    { { REQ_DEF}, {   3} },        
    { {      46}, { 102} }, // '.' 
    { {     300}, { 103} }, // FROM
    { {       0}, { -56} },        
};

SR__ s_111[] =
{
    { { REQ_TOKEN}, {  20} },                  
    { {       417}, { 156} }, // variable      
    { {       381}, { 157} }, // exp           
    { {       258}, {  44} }, // NAME          
    { {        45}, {  85} }, // '-'           
    { {       310}, {  86} }, // NOT           
    { {        40}, {  87} }, // '('           
    { {       379}, { 110} }, // term          
    { {       414}, {  88} }, // exp_list      
    { {        35}, {  35} }, // '#'           
    { {        64}, {  36} }, // '@'           
    { {       270}, {  37} }, // RAND          
    { {       418}, {  38} }, // constant      
    { {       266}, {  39} }, // ENV           
    { {       265}, {  40} }, // IDEAL         
    { {       294}, {  41} }, // RAND_PORT     
    { {       293}, {  42} }, // ENV_PORT      
    { {       299}, {  43} }, // DOUBLE_DOT    
    { {       123}, { 112} }, // '{'           
    { {       257}, {  45} }, // INTEGER_NUMBER
    { {         0}, {   0} },                  
};

SR__ s_112[] =
{
    { { REQ_TOKEN}, {  21} },                  
    { {       415}, { 105} }, // exp_list_elem 
    { {       381}, { 158} }, // exp           
    { {        45}, {  85} }, // '-'           
    { {       310}, {  86} }, // NOT           
    { {        40}, {  87} }, // '('           
    { {       379}, { 110} }, // term          
    { {       414}, {  88} }, // exp_list      
    { {       417}, {  34} }, // variable      
    { {        35}, {  35} }, // '#'           
    { {        64}, {  36} }, // '@'           
    { {       270}, {  37} }, // RAND          
    { {       418}, {  38} }, // constant      
    { {       266}, {  39} }, // ENV           
    { {       265}, {  40} }, // IDEAL         
    { {       294}, {  41} }, // RAND_PORT     
    { {       293}, {  42} }, // ENV_PORT      
    { {       299}, {  43} }, // DOUBLE_DOT    
    { {       123}, { 112} }, // '{'           
    { {       258}, {  44} }, // NAME          
    { {       257}, {  45} }, // INTEGER_NUMBER
    { {         0}, {   0} },                  
};

SR__ s_113[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {       123}, { 159} }, // '{'
    { {         0}, {   0} },       
};

SR__ s_114[] =
{
    { { REQ_TOKEN}, {  20} },                  
    { {       381}, { 160} }, // exp           
    { {        45}, {  85} }, // '-'           
    { {       310}, {  86} }, // NOT           
    { {        40}, {  87} }, // '('           
    { {       379}, { 110} }, // term          
    { {       414}, {  88} }, // exp_list      
    { {       417}, {  34} }, // variable      
    { {        35}, {  35} }, // '#'           
    { {        64}, {  36} }, // '@'           
    { {       270}, {  37} }, // RAND          
    { {       418}, {  38} }, // constant      
    { {       266}, {  39} }, // ENV           
    { {       265}, {  40} }, // IDEAL         
    { {       294}, {  41} }, // RAND_PORT     
    { {       293}, {  42} }, // ENV_PORT      
    { {       299}, {  43} }, // DOUBLE_DOT    
    { {       123}, { 112} }, // '{'           
    { {       258}, {  44} }, // NAME          
    { {       257}, {  45} }, // INTEGER_NUMBER
    { {         0}, {   0} },                  
};

SR__ s_115[] =
{
    { { REQ_TOKEN}, {  20} },                  
    { {       381}, { 161} }, // exp           
    { {        45}, {  85} }, // '-'           
    { {       310}, {  86} }, // NOT           
    { {        40}, {  87} }, // '('           
    { {       379}, { 110} }, // term          
    { {       414}, {  88} }, // exp_list      
    { {       417}, {  34} }, // variable      
    { {        35}, {  35} }, // '#'           
    { {        64}, {  36} }, // '@'           
    { {       270}, {  37} }, // RAND          
    { {       418}, {  38} }, // constant      
    { {       266}, {  39} }, // ENV           
    { {       265}, {  40} }, // IDEAL         
    { {       294}, {  41} }, // RAND_PORT     
    { {       293}, {  42} }, // ENV_PORT      
    { {       299}, {  43} }, // DOUBLE_DOT    
    { {       123}, { 112} }, // '{'           
    { {       258}, {  44} }, // NAME          
    { {       257}, {  45} }, // INTEGER_NUMBER
    { {         0}, {   0} },                  
};

SR__ s_116[] =
{
    { { REQ_TOKEN}, {  20} },                  
    { {       381}, { 162} }, // exp           
    { {        45}, {  85} }, // '-'           
    { {       310}, {  86} }, // NOT           
    { {        40}, {  87} }, // '('           
    { {       379}, { 110} }, // term          
    { {       414}, {  88} }, // exp_list      
    { {       417}, {  34} }, // variable      
    { {        35}, {  35} }, // '#'           
    { {        64}, {  36} }, // '@'           
    { {       270}, {  37} }, // RAND          
    { {       418}, {  38} }, // constant      
    { {       266}, {  39} }, // ENV           
    { {       265}, {  40} }, // IDEAL         
    { {       294}, {  41} }, // RAND_PORT     
    { {       293}, {  42} }, // ENV_PORT      
    { {       299}, {  43} }, // DOUBLE_DOT    
    { {       123}, { 112} }, // '{'           
    { {       258}, {  44} }, // NAME          
    { {       257}, {  45} }, // INTEGER_NUMBER
    { {         0}, {   0} },                  
};

SR__ s_117[] =
{
    { { REQ_TOKEN}, {  20} },                  
    { {       381}, { 163} }, // exp           
    { {        45}, {  85} }, // '-'           
    { {       310}, {  86} }, // NOT           
    { {        40}, {  87} }, // '('           
    { {       379}, { 110} }, // term          
    { {       414}, {  88} }, // exp_list      
    { {       417}, {  34} }, // variable      
    { {        35}, {  35} }, // '#'           
    { {        64}, {  36} }, // '@'           
    { {       270}, {  37} }, // RAND          
    { {       418}, {  38} }, // constant      
    { {       266}, {  39} }, // ENV           
    { {       265}, {  40} }, // IDEAL         
    { {       294}, {  41} }, // RAND_PORT     
    { {       293}, {  42} }, // ENV_PORT      
    { {       299}, {  43} }, // DOUBLE_DOT    
    { {       123}, { 112} }, // '{'           
    { {       258}, {  44} }, // NAME          
    { {       257}, {  45} }, // INTEGER_NUMBER
    { {         0}, {   0} },                  
};

SR__ s_118[] =
{
    { { REQ_TOKEN}, {  20} },                  
    { {       381}, { 164} }, // exp           
    { {        45}, {  85} }, // '-'           
    { {       310}, {  86} }, // NOT           
    { {        40}, {  87} }, // '('           
    { {       379}, { 110} }, // term          
    { {       414}, {  88} }, // exp_list      
    { {       417}, {  34} }, // variable      
    { {        35}, {  35} }, // '#'           
    { {        64}, {  36} }, // '@'           
    { {       270}, {  37} }, // RAND          
    { {       418}, {  38} }, // constant      
    { {       266}, {  39} }, // ENV           
    { {       265}, {  40} }, // IDEAL         
    { {       294}, {  41} }, // RAND_PORT     
    { {       293}, {  42} }, // ENV_PORT      
    { {       299}, {  43} }, // DOUBLE_DOT    
    { {       123}, { 112} }, // '{'           
    { {       258}, {  44} }, // NAME          
    { {       257}, {  45} }, // INTEGER_NUMBER
    { {         0}, {   0} },                  
};

SR__ s_119[] =
{
    { { REQ_TOKEN}, {  20} },                  
    { {       381}, { 165} }, // exp           
    { {        45}, {  85} }, // '-'           
    { {       310}, {  86} }, // NOT           
    { {        40}, {  87} }, // '('           
    { {       379}, { 110} }, // term          
    { {       414}, {  88} }, // exp_list      
    { {       417}, {  34} }, // variable      
    { {        35}, {  35} }, // '#'           
    { {        64}, {  36} }, // '@'           
    { {       270}, {  37} }, // RAND          
    { {       418}, {  38} }, // constant      
    { {       266}, {  39} }, // ENV           
    { {       265}, {  40} }, // IDEAL         
    { {       294}, {  41} }, // RAND_PORT     
    { {       293}, {  42} }, // ENV_PORT      
    { {       299}, {  43} }, // DOUBLE_DOT    
    { {       123}, { 112} }, // '{'           
    { {       258}, {  44} }, // NAME          
    { {       257}, {  45} }, // INTEGER_NUMBER
    { {         0}, {   0} },                  
};

SR__ s_120[] =
{
    { { REQ_TOKEN}, {  20} },                  
    { {       381}, { 166} }, // exp           
    { {        45}, {  85} }, // '-'           
    { {       310}, {  86} }, // NOT           
    { {        40}, {  87} }, // '('           
    { {       379}, { 110} }, // term          
    { {       414}, {  88} }, // exp_list      
    { {       417}, {  34} }, // variable      
    { {        35}, {  35} }, // '#'           
    { {        64}, {  36} }, // '@'           
    { {       270}, {  37} }, // RAND          
    { {       418}, {  38} }, // constant      
    { {       266}, {  39} }, // ENV           
    { {       265}, {  40} }, // IDEAL         
    { {       294}, {  41} }, // RAND_PORT     
    { {       293}, {  42} }, // ENV_PORT      
    { {       299}, {  43} }, // DOUBLE_DOT    
    { {       123}, { 112} }, // '{'           
    { {       258}, {  44} }, // NAME          
    { {       257}, {  45} }, // INTEGER_NUMBER
    { {         0}, {   0} },                  
};

SR__ s_121[] =
{
    { { REQ_TOKEN}, {  20} },                  
    { {       381}, { 167} }, // exp           
    { {        45}, {  85} }, // '-'           
    { {       310}, {  86} }, // NOT           
    { {        40}, {  87} }, // '('           
    { {       379}, { 110} }, // term          
    { {       414}, {  88} }, // exp_list      
    { {       417}, {  34} }, // variable      
    { {        35}, {  35} }, // '#'           
    { {        64}, {  36} }, // '@'           
    { {       270}, {  37} }, // RAND          
    { {       418}, {  38} }, // constant      
    { {       266}, {  39} }, // ENV           
    { {       265}, {  40} }, // IDEAL         
    { {       294}, {  41} }, // RAND_PORT     
    { {       293}, {  42} }, // ENV_PORT      
    { {       299}, {  43} }, // DOUBLE_DOT    
    { {       123}, { 112} }, // '{'           
    { {       258}, {  44} }, // NAME          
    { {       257}, {  45} }, // INTEGER_NUMBER
    { {         0}, {   0} },                  
};

SR__ s_122[] =
{
    { { REQ_TOKEN}, {  20} },                  
    { {       381}, { 168} }, // exp           
    { {        45}, {  85} }, // '-'           
    { {       310}, {  86} }, // NOT           
    { {        40}, {  87} }, // '('           
    { {       379}, { 110} }, // term          
    { {       414}, {  88} }, // exp_list      
    { {       417}, {  34} }, // variable      
    { {        35}, {  35} }, // '#'           
    { {        64}, {  36} }, // '@'           
    { {       270}, {  37} }, // RAND          
    { {       418}, {  38} }, // constant      
    { {       266}, {  39} }, // ENV           
    { {       265}, {  40} }, // IDEAL         
    { {       294}, {  41} }, // RAND_PORT     
    { {       293}, {  42} }, // ENV_PORT      
    { {       299}, {  43} }, // DOUBLE_DOT    
    { {       123}, { 112} }, // '{'           
    { {       258}, {  44} }, // NAME          
    { {       257}, {  45} }, // INTEGER_NUMBER
    { {         0}, {   0} },                  
};

SR__ s_123[] =
{
    { { REQ_TOKEN}, {  20} },                  
    { {       381}, { 169} }, // exp           
    { {        45}, {  85} }, // '-'           
    { {       310}, {  86} }, // NOT           
    { {        40}, {  87} }, // '('           
    { {       379}, { 110} }, // term          
    { {       414}, {  88} }, // exp_list      
    { {       417}, {  34} }, // variable      
    { {        35}, {  35} }, // '#'           
    { {        64}, {  36} }, // '@'           
    { {       270}, {  37} }, // RAND          
    { {       418}, {  38} }, // constant      
    { {       266}, {  39} }, // ENV           
    { {       265}, {  40} }, // IDEAL         
    { {       294}, {  41} }, // RAND_PORT     
    { {       293}, {  42} }, // ENV_PORT      
    { {       299}, {  43} }, // DOUBLE_DOT    
    { {       123}, { 112} }, // '{'           
    { {       258}, {  44} }, // NAME          
    { {       257}, {  45} }, // INTEGER_NUMBER
    { {         0}, {   0} },                  
};

SR__ s_124[] =
{
    { { REQ_TOKEN}, {  20} },                  
    { {       381}, { 170} }, // exp           
    { {        45}, {  85} }, // '-'           
    { {       310}, {  86} }, // NOT           
    { {        40}, {  87} }, // '('           
    { {       379}, { 110} }, // term          
    { {       414}, {  88} }, // exp_list      
    { {       417}, {  34} }, // variable      
    { {        35}, {  35} }, // '#'           
    { {        64}, {  36} }, // '@'           
    { {       270}, {  37} }, // RAND          
    { {       418}, {  38} }, // constant      
    { {       266}, {  39} }, // ENV           
    { {       265}, {  40} }, // IDEAL         
    { {       294}, {  41} }, // RAND_PORT     
    { {       293}, {  42} }, // ENV_PORT      
    { {       299}, {  43} }, // DOUBLE_DOT    
    { {       123}, { 112} }, // '{'           
    { {       258}, {  44} }, // NAME          
    { {       257}, {  45} }, // INTEGER_NUMBER
    { {         0}, {   0} },                  
};

SR__ s_125[] =
{
    { { REQ_TOKEN}, {  20} },                  
    { {       381}, { 171} }, // exp           
    { {        45}, {  85} }, // '-'           
    { {       310}, {  86} }, // NOT           
    { {        40}, {  87} }, // '('           
    { {       379}, { 110} }, // term          
    { {       414}, {  88} }, // exp_list      
    { {       417}, {  34} }, // variable      
    { {        35}, {  35} }, // '#'           
    { {        64}, {  36} }, // '@'           
    { {       270}, {  37} }, // RAND          
    { {       418}, {  38} }, // constant      
    { {       266}, {  39} }, // ENV           
    { {       265}, {  40} }, // IDEAL         
    { {       294}, {  41} }, // RAND_PORT     
    { {       293}, {  42} }, // ENV_PORT      
    { {       299}, {  43} }, // DOUBLE_DOT    
    { {       123}, { 112} }, // '{'           
    { {       258}, {  44} }, // NAME          
    { {       257}, {  45} }, // INTEGER_NUMBER
    { {         0}, {   0} },                  
};

SR__ s_126[] =
{
    { { REQ_TOKEN}, {  20} },                  
    { {       381}, { 172} }, // exp           
    { {        45}, {  85} }, // '-'           
    { {       310}, {  86} }, // NOT           
    { {        40}, {  87} }, // '('           
    { {       379}, { 110} }, // term          
    { {       414}, {  88} }, // exp_list      
    { {       417}, {  34} }, // variable      
    { {        35}, {  35} }, // '#'           
    { {        64}, {  36} }, // '@'           
    { {       270}, {  37} }, // RAND          
    { {       418}, {  38} }, // constant      
    { {       266}, {  39} }, // ENV           
    { {       265}, {  40} }, // IDEAL         
    { {       294}, {  41} }, // RAND_PORT     
    { {       293}, {  42} }, // ENV_PORT      
    { {       299}, {  43} }, // DOUBLE_DOT    
    { {       123}, { 112} }, // '{'           
    { {       258}, {  44} }, // NAME          
    { {       257}, {  45} }, // INTEGER_NUMBER
    { {         0}, {   0} },                  
};

SR__ s_127[] =
{
    { { REQ_TOKEN}, {  20} },                  
    { {       381}, { 173} }, // exp           
    { {        45}, {  85} }, // '-'           
    { {       310}, {  86} }, // NOT           
    { {        40}, {  87} }, // '('           
    { {       379}, { 110} }, // term          
    { {       414}, {  88} }, // exp_list      
    { {       417}, {  34} }, // variable      
    { {        35}, {  35} }, // '#'           
    { {        64}, {  36} }, // '@'           
    { {       270}, {  37} }, // RAND          
    { {       418}, {  38} }, // constant      
    { {       266}, {  39} }, // ENV           
    { {       265}, {  40} }, // IDEAL         
    { {       294}, {  41} }, // RAND_PORT     
    { {       293}, {  42} }, // ENV_PORT      
    { {       299}, {  43} }, // DOUBLE_DOT    
    { {       123}, { 112} }, // '{'           
    { {       258}, {  44} }, // NAME          
    { {       257}, {  45} }, // INTEGER_NUMBER
    { {         0}, {   0} },                  
};

SR__ s_128[] =
{
    { { REQ_TOKEN}, {  20} },                  
    { {       381}, { 174} }, // exp           
    { {        45}, {  85} }, // '-'           
    { {       310}, {  86} }, // NOT           
    { {        40}, {  87} }, // '('           
    { {       379}, { 110} }, // term          
    { {       414}, {  88} }, // exp_list      
    { {       417}, {  34} }, // variable      
    { {        35}, {  35} }, // '#'           
    { {        64}, {  36} }, // '@'           
    { {       270}, {  37} }, // RAND          
    { {       418}, {  38} }, // constant      
    { {       266}, {  39} }, // ENV           
    { {       265}, {  40} }, // IDEAL         
    { {       294}, {  41} }, // RAND_PORT     
    { {       293}, {  42} }, // ENV_PORT      
    { {       299}, {  43} }, // DOUBLE_DOT    
    { {       123}, { 112} }, // '{'           
    { {       258}, {  44} }, // NAME          
    { {       257}, {  45} }, // INTEGER_NUMBER
    { {         0}, {   0} },                  
};

SR__ s_129[] =
{
    { { REQ_TOKEN}, {  14} },                  
    { {       379}, { 175} }, // term          
    { {       417}, {  34} }, // variable      
    { {        35}, {  35} }, // '#'           
    { {        64}, {  36} }, // '@'           
    { {       270}, {  37} }, // RAND          
    { {       418}, {  38} }, // constant      
    { {       266}, {  39} }, // ENV           
    { {       265}, {  40} }, // IDEAL         
    { {       294}, {  41} }, // RAND_PORT     
    { {       293}, {  42} }, // ENV_PORT      
    { {       299}, {  43} }, // DOUBLE_DOT    
    { {       258}, {  44} }, // NAME          
    { {       257}, {  45} }, // INTEGER_NUMBER
    { {         0}, {   0} },                  
};

SR__ s_130[] =
{
    { { REQ_TOKEN}, {  14} },                  
    { {       379}, { 176} }, // term          
    { {       417}, {  34} }, // variable      
    { {        35}, {  35} }, // '#'           
    { {        64}, {  36} }, // '@'           
    { {       270}, {  37} }, // RAND          
    { {       418}, {  38} }, // constant      
    { {       266}, {  39} }, // ENV           
    { {       265}, {  40} }, // IDEAL         
    { {       294}, {  41} }, // RAND_PORT     
    { {       293}, {  42} }, // ENV_PORT      
    { {       299}, {  43} }, // DOUBLE_DOT    
    { {       258}, {  44} }, // NAME          
    { {       257}, {  45} }, // INTEGER_NUMBER
    { {         0}, {   0} },                  
};

SR__ s_131[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        59}, { 177} }, // ';'
    { {        44}, { 178} }, // ','
    { {         0}, {   0} },       
};

SR__ s_132[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -114} }, 
};

SR__ s_133[] =
{
    { { REQ_DEF}, {   6} },                   
    { {     372}, { 179} }, // opt_port_clause
    { {     390}, { 180} }, // opt_each       
    { {     277}, { 181} }, // EACH           
    { {      44}, { -11} }, // ','            
    { {      59}, { -11} }, // ';'            
    { {       0}, { -87} },                   
};

SR__ s_134[] =
{
    { { ERR_REQ_DEF}, {  66} },                         
    { {         385}, { 182} }, // statement            
    { {         391}, {  49} }, // assignment_statement 
    { {         392}, {  50} }, // mult_statement       
    { {         393}, {  51} }, // pvt_statement        
    { {         394}, {  52} }, // with_statement       
    { {         395}, {  53} }, // send_statement       
    { {         396}, {  54} }, // session_call         
    { {         401}, {  55} }, // tying_statement      
    { {         402}, {  56} }, // declaration_statement
    { {         366}, {  57} }, // protocol             
    { {         406}, {  58} }, // loop_statement       
    { {         410}, {  59} }, // cond_statement       
    { {         387}, {  60} }, // wrap_statement       
    { {         412}, {  61} }, // connect_statement    
    { {         386}, {  62} }, // abort_statement      
    { {         389}, {  63} }, // seq_statement        
    { {         388}, {  64} }, // start_statement      
    { {         411}, {  65} }, // set_statement        
    { {         416}, {  66} }, // forward_statement    
    { {     _error_}, {  67} }, // _error_              
    { {         379}, {  68} }, // term                 
    { {         123}, {  69} }, // '{'                  
    { {         267}, {  70} }, // IN                   
    { {         297}, {  71} }, // WITH                 
    { {         381}, {  72} }, // exp                  
    { {         397}, {  73} }, // opt_partial          
    { {         403}, {  74} }, // type                 
    { {         369}, {   4} }, // prot_decl            
    { {         283}, {  75} }, // FOR                  
    { {         287}, {  76} }, // IF                   
    { {         273}, {  77} }, // WRAP                 
    { {         289}, {  78} }, // CONNECT              
    { {         272}, {  79} }, // ABORTING             
    { {         275}, {  80} }, // BEFORE               
    { {         276}, {  81} }, // AFTER                
    { {         274}, {  82} }, // START                
    { {         288}, {  83} }, // SET                  
    { {         291}, {  84} }, // FORWARD              
    { {         417}, {  34} }, // variable             
    { {          35}, {  35} }, // '#'                  
    { {          64}, {  36} }, // '@'                  
    { {         270}, {  37} }, // RAND                 
    { {         418}, {  38} }, // constant             
    { {         266}, {  39} }, // ENV                  
    { {         265}, {  40} }, // IDEAL                
    { {         294}, {  41} }, // RAND_PORT            
    { {         293}, {  42} }, // ENV_PORT             
    { {         299}, {  43} }, // DOUBLE_DOT           
    { {          45}, {  85} }, // '-'                  
    { {         310}, {  86} }, // NOT                  
    { {          40}, {  87} }, // '('                  
    { {         414}, {  88} }, // exp_list             
    { {         296}, {  89} }, // PARTIAL              
    { {         263}, {  18} }, // PARTY                
    { {         259}, {  19} }, // INTEGER              
    { {         278}, {  20} }, // SESSION              
    { {         279}, {  21} }, // UNKNOWN              
    { {         280}, {  22} }, // PORT                 
    { {         281}, {  23} }, // INPORT               
    { {         282}, {  24} }, // OUTPORT              
    { {         295}, {  25} }, // BOOL                 
    { {         260}, {  26} }, // FIELD                
    { {         258}, {  90} }, // NAME                 
    { {         261}, {   5} }, // PROTOCOL             
    { {         257}, {  45} }, // INTEGER_NUMBER       
    { {           0}, { -95} },                         
};

SR__ s_135[] =
{
    { { REQ_TOKEN}, {  20} },                  
    { {       381}, { 183} }, // exp           
    { {        45}, {  85} }, // '-'           
    { {       310}, {  86} }, // NOT           
    { {        40}, {  87} }, // '('           
    { {       379}, { 110} }, // term          
    { {       414}, {  88} }, // exp_list      
    { {       417}, {  34} }, // variable      
    { {        35}, {  35} }, // '#'           
    { {        64}, {  36} }, // '@'           
    { {       270}, {  37} }, // RAND          
    { {       418}, {  38} }, // constant      
    { {       266}, {  39} }, // ENV           
    { {       265}, {  40} }, // IDEAL         
    { {       294}, {  41} }, // RAND_PORT     
    { {       293}, {  42} }, // ENV_PORT      
    { {       299}, {  43} }, // DOUBLE_DOT    
    { {       123}, { 112} }, // '{'           
    { {       258}, {  44} }, // NAME          
    { {       257}, {  45} }, // INTEGER_NUMBER
    { {         0}, {   0} },                  
};

SR__ s_136[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -83} }, 
};

SR__ s_137[] =
{
    { { REQ_TOKEN}, {  18} },          
    { {       413}, { 184} }, // to_and
    { {        43}, { 116} }, // '+'   
    { {        45}, { 117} }, // '-'   
    { {        42}, { 118} }, // '*'   
    { {        47}, { 119} }, // '/'   
    { {        37}, { 120} }, // '%'   
    { {       302}, { 121} }, // B_AND 
    { {       301}, { 122} }, // OR    
    { {       303}, { 123} }, // EQ    
    { {       305}, { 124} }, // LT    
    { {       308}, { 125} }, // GT    
    { {       304}, { 126} }, // NE    
    { {       306}, { 127} }, // LE    
    { {       307}, { 128} }, // GE    
    { {       124}, { 129} }, // '|'   
    { {       290}, { 185} }, // TO    
    { {       292}, { 186} }, // AND   
    { {         0}, {   0} },          
};

SR__ s_138[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -82} }, 
};

SR__ s_139[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {       123}, { 187} }, // '{'
    { {         0}, {   0} },       
};

SR__ s_140[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {       123}, { 188} }, // '{'
    { {         0}, {   0} },       
};

SR__ s_141[] =
{
    { { REQ_TOKEN}, {  16} },         
    { {        59}, { 189} }, // ';'  
    { {        43}, { 116} }, // '+'  
    { {        45}, { 117} }, // '-'  
    { {        42}, { 118} }, // '*'  
    { {        47}, { 119} }, // '/'  
    { {        37}, { 120} }, // '%'  
    { {       302}, { 121} }, // B_AND
    { {       301}, { 122} }, // OR   
    { {       303}, { 123} }, // EQ   
    { {       305}, { 124} }, // LT   
    { {       308}, { 125} }, // GT   
    { {       304}, { 126} }, // NE   
    { {       306}, { 127} }, // LE   
    { {       307}, { 128} }, // GE   
    { {       124}, { 129} }, // '|'  
    { {         0}, {   0} },         
};

SR__ s_142[] =
{
    { { REQ_TOKEN}, {  16} },         
    { {       269}, { 190} }, // AS   
    { {        43}, { 116} }, // '+'  
    { {        45}, { 117} }, // '-'  
    { {        42}, { 118} }, // '*'  
    { {        47}, { 119} }, // '/'  
    { {        37}, { 120} }, // '%'  
    { {       302}, { 121} }, // B_AND
    { {       301}, { 122} }, // OR   
    { {       303}, { 123} }, // EQ   
    { {       305}, { 124} }, // LT   
    { {       308}, { 125} }, // GT   
    { {       304}, { 126} }, // NE   
    { {       306}, { 127} }, // LE   
    { {       307}, { 128} }, // GE   
    { {       124}, { 129} }, // '|'  
    { {         0}, {   0} },         
};

SR__ s_143[] =
{
    { { REQ_TOKEN}, {  16} },         
    { {       290}, { 191} }, // TO   
    { {        43}, { 116} }, // '+'  
    { {        45}, { 117} }, // '-'  
    { {        42}, { 118} }, // '*'  
    { {        47}, { 119} }, // '/'  
    { {        37}, { 120} }, // '%'  
    { {       302}, { 121} }, // B_AND
    { {       301}, { 122} }, // OR   
    { {       303}, { 123} }, // EQ   
    { {       305}, { 124} }, // LT   
    { {       308}, { 125} }, // GT   
    { {       304}, { 126} }, // NE   
    { {       306}, { 127} }, // LE   
    { {       307}, { 128} }, // GE   
    { {       124}, { 129} }, // '|'  
    { {         0}, {   0} },         
};

SR__ s_144[] =
{
    { { REQ_DEF}, {   2} },       
    { {     124}, { 129} }, // '|'
    { {       0}, { -41} },       
};

SR__ s_145[] =
{
    { { REQ_DEF}, {   2} },       
    { {     124}, { 129} }, // '|'
    { {       0}, { -44} },       
};

SR__ s_146[] =
{
    { { REQ_TOKEN}, {  16} },         
    { {        41}, { 192} }, // ')'  
    { {        43}, { 116} }, // '+'  
    { {        45}, { 117} }, // '-'  
    { {        42}, { 118} }, // '*'  
    { {        47}, { 119} }, // '/'  
    { {        37}, { 120} }, // '%'  
    { {       302}, { 121} }, // B_AND
    { {       301}, { 122} }, // OR   
    { {       303}, { 123} }, // EQ   
    { {       305}, { 124} }, // LT   
    { {       308}, { 125} }, // GT   
    { {       304}, { 126} }, // NE   
    { {       306}, { 127} }, // LE   
    { {       307}, { 128} }, // GE   
    { {       124}, { 129} }, // '|'  
    { {         0}, {   0} },         
};

SR__ s_147[] =
{
    { { REQ_TOKEN}, {  22} },                  
    { {       370}, { 193} }, // p_list        
    { {       371}, { 194} }, // p_list_elem   
    { {       381}, { 195} }, // exp           
    { {        45}, {  85} }, // '-'           
    { {       310}, {  86} }, // NOT           
    { {        40}, {  87} }, // '('           
    { {       379}, { 110} }, // term          
    { {       414}, {  88} }, // exp_list      
    { {       417}, {  34} }, // variable      
    { {        35}, {  35} }, // '#'           
    { {        64}, {  36} }, // '@'           
    { {       270}, {  37} }, // RAND          
    { {       418}, {  38} }, // constant      
    { {       266}, {  39} }, // ENV           
    { {       265}, {  40} }, // IDEAL         
    { {       294}, {  41} }, // RAND_PORT     
    { {       293}, {  42} }, // ENV_PORT      
    { {       299}, {  43} }, // DOUBLE_DOT    
    { {       123}, { 112} }, // '{'           
    { {       258}, {  44} }, // NAME          
    { {       257}, {  45} }, // INTEGER_NUMBER
    { {         0}, {   0} },                  
};

SR__ s_148[] =
{
    { { REQ_TOKEN}, {  21} },                  
    { {       381}, { 196} }, // exp           
    { {        93}, { 197} }, // ']'           
    { {        45}, {  85} }, // '-'           
    { {       310}, {  86} }, // NOT           
    { {        40}, {  87} }, // '('           
    { {       379}, { 110} }, // term          
    { {       414}, {  88} }, // exp_list      
    { {       417}, {  34} }, // variable      
    { {        35}, {  35} }, // '#'           
    { {        64}, {  36} }, // '@'           
    { {       270}, {  37} }, // RAND          
    { {       418}, {  38} }, // constant      
    { {       266}, {  39} }, // ENV           
    { {       265}, {  40} }, // IDEAL         
    { {       294}, {  41} }, // RAND_PORT     
    { {       293}, {  42} }, // ENV_PORT      
    { {       299}, {  43} }, // DOUBLE_DOT    
    { {       123}, { 112} }, // '{'           
    { {       258}, {  44} }, // NAME          
    { {       257}, {  45} }, // INTEGER_NUMBER
    { {         0}, {   0} },                  
};

SR__ s_149[] =
{
    { { REQ_TOKEN}, {  16} },         
    { {        59}, { 198} }, // ';'  
    { {        43}, { 116} }, // '+'  
    { {        45}, { 117} }, // '-'  
    { {        42}, { 118} }, // '*'  
    { {        47}, { 119} }, // '/'  
    { {        37}, { 120} }, // '%'  
    { {       302}, { 121} }, // B_AND
    { {       301}, { 122} }, // OR   
    { {       303}, { 123} }, // EQ   
    { {       305}, { 124} }, // LT   
    { {       308}, { 125} }, // GT   
    { {       304}, { 126} }, // NE   
    { {       306}, { 127} }, // LE   
    { {       307}, { 128} }, // GE   
    { {       124}, { 129} }, // '|'  
    { {         0}, {   0} },         
};

SR__ s_150[] =
{
    { { REQ_DEF}, {   2} },       
    { {     124}, { 129} }, // '|'
    { {       0}, { -53} },       
};

SR__ s_151[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -54} }, 
};

SR__ s_152[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -90} }, 
};

SR__ s_153[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -132} }, 
};

SR__ s_154[] =
{
    { { REQ_TOKEN}, {  20} },                  
    { {       381}, { 199} }, // exp           
    { {        45}, {  85} }, // '-'           
    { {       310}, {  86} }, // NOT           
    { {        40}, {  87} }, // '('           
    { {       379}, { 110} }, // term          
    { {       414}, {  88} }, // exp_list      
    { {       417}, {  34} }, // variable      
    { {        35}, {  35} }, // '#'           
    { {        64}, {  36} }, // '@'           
    { {       270}, {  37} }, // RAND          
    { {       418}, {  38} }, // constant      
    { {       266}, {  39} }, // ENV           
    { {       265}, {  40} }, // IDEAL         
    { {       294}, {  41} }, // RAND_PORT     
    { {       293}, {  42} }, // ENV_PORT      
    { {       299}, {  43} }, // DOUBLE_DOT    
    { {       123}, { 112} }, // '{'           
    { {       258}, {  44} }, // NAME          
    { {       257}, {  45} }, // INTEGER_NUMBER
    { {         0}, {   0} },                  
};

SR__ s_155[] =
{
    { { ERR_REQ_DEF}, {  67} },                         
    { {         384}, { 200} }, // statement_list       
    { {         385}, {  48} }, // statement            
    { {         391}, {  49} }, // assignment_statement 
    { {         392}, {  50} }, // mult_statement       
    { {         393}, {  51} }, // pvt_statement        
    { {         394}, {  52} }, // with_statement       
    { {         395}, {  53} }, // send_statement       
    { {         396}, {  54} }, // session_call         
    { {         401}, {  55} }, // tying_statement      
    { {         402}, {  56} }, // declaration_statement
    { {         366}, {  57} }, // protocol             
    { {         406}, {  58} }, // loop_statement       
    { {         410}, {  59} }, // cond_statement       
    { {         387}, {  60} }, // wrap_statement       
    { {         412}, {  61} }, // connect_statement    
    { {         386}, {  62} }, // abort_statement      
    { {         389}, {  63} }, // seq_statement        
    { {         388}, {  64} }, // start_statement      
    { {         411}, {  65} }, // set_statement        
    { {         416}, {  66} }, // forward_statement    
    { {     _error_}, {  67} }, // _error_              
    { {         379}, {  68} }, // term                 
    { {         123}, {  69} }, // '{'                  
    { {         267}, {  70} }, // IN                   
    { {         297}, {  71} }, // WITH                 
    { {         381}, {  72} }, // exp                  
    { {         397}, {  73} }, // opt_partial          
    { {         403}, {  74} }, // type                 
    { {         369}, {   4} }, // prot_decl            
    { {         283}, {  75} }, // FOR                  
    { {         287}, {  76} }, // IF                   
    { {         273}, {  77} }, // WRAP                 
    { {         289}, {  78} }, // CONNECT              
    { {         272}, {  79} }, // ABORTING             
    { {         275}, {  80} }, // BEFORE               
    { {         276}, {  81} }, // AFTER                
    { {         274}, {  82} }, // START                
    { {         288}, {  83} }, // SET                  
    { {         291}, {  84} }, // FORWARD              
    { {         417}, {  34} }, // variable             
    { {          35}, {  35} }, // '#'                  
    { {          64}, {  36} }, // '@'                  
    { {         270}, {  37} }, // RAND                 
    { {         418}, {  38} }, // constant             
    { {         266}, {  39} }, // ENV                  
    { {         265}, {  40} }, // IDEAL                
    { {         294}, {  41} }, // RAND_PORT            
    { {         293}, {  42} }, // ENV_PORT             
    { {         299}, {  43} }, // DOUBLE_DOT           
    { {          45}, {  85} }, // '-'                  
    { {         310}, {  86} }, // NOT                  
    { {          40}, {  87} }, // '('                  
    { {         414}, {  88} }, // exp_list             
    { {         296}, {  89} }, // PARTIAL              
    { {         263}, {  18} }, // PARTY                
    { {         259}, {  19} }, // INTEGER              
    { {         278}, {  20} }, // SESSION              
    { {         279}, {  21} }, // UNKNOWN              
    { {         280}, {  22} }, // PORT                 
    { {         281}, {  23} }, // INPORT               
    { {         282}, {  24} }, // OUTPORT              
    { {         295}, {  25} }, // BOOL                 
    { {         260}, {  26} }, // FIELD                
    { {         258}, {  90} }, // NAME                 
    { {         261}, {   5} }, // PROTOCOL             
    { {         257}, {  45} }, // INTEGER_NUMBER       
    { {           0}, { -95} },                         
};

SR__ s_156[] =
{
    { { REQ_DEF}, {   3} },           
    { {     284}, { 201} }, // OF     
    { {     380}, {  95} }, // dimlist
    { {       0}, { -33} },           
};

SR__ s_157[] =
{
    { { REQ_DEF}, {   18} },            
    { {     409}, {  202} }, // opt_cond
    { {      43}, {  116} }, // '+'     
    { {      45}, {  117} }, // '-'     
    { {      42}, {  118} }, // '*'     
    { {      47}, {  119} }, // '/'     
    { {      37}, {  120} }, // '%'     
    { {     302}, {  121} }, // B_AND   
    { {     301}, {  122} }, // OR      
    { {     303}, {  123} }, // EQ      
    { {     305}, {  124} }, // LT      
    { {     308}, {  125} }, // GT      
    { {     304}, {  126} }, // NE      
    { {     306}, {  127} }, // LE      
    { {     307}, {  128} }, // GE      
    { {     124}, {  129} }, // '|'     
    { {     285}, {  203} }, // EXCEPT  
    { {     286}, {  204} }, // WHERE   
    { {       0}, { -123} },            
};

SR__ s_158[] =
{
    { { REQ_DEF}, {   15} },         
    { {      43}, {  116} }, // '+'  
    { {      45}, {  117} }, // '-'  
    { {      42}, {  118} }, // '*'  
    { {      47}, {  119} }, // '/'  
    { {      37}, {  120} }, // '%'  
    { {     302}, {  121} }, // B_AND
    { {     301}, {  122} }, // OR   
    { {     303}, {  123} }, // EQ   
    { {     305}, {  124} }, // LT   
    { {     308}, {  125} }, // GT   
    { {     304}, {  126} }, // NE   
    { {     306}, {  127} }, // LE   
    { {     307}, {  128} }, // GE   
    { {     124}, {  129} }, // '|'  
    { {       0}, { -133} },         
};

SR__ s_159[] =
{
    { { REQ_TOKEN}, {  14} },                  
    { {       374}, { 205} }, // port_decl_list
    { {       375}, { 206} }, // port_decl     
    { {       403}, { 207} }, // type          
    { {       263}, {  18} }, // PARTY         
    { {       259}, {  19} }, // INTEGER       
    { {       278}, {  20} }, // SESSION       
    { {       279}, {  21} }, // UNKNOWN       
    { {       280}, {  22} }, // PORT          
    { {       281}, {  23} }, // INPORT        
    { {       282}, {  24} }, // OUTPORT       
    { {       295}, {  25} }, // BOOL          
    { {       260}, {  26} }, // FIELD         
    { {       258}, {  27} }, // NAME          
    { {         0}, {   0} },                  
};

SR__ s_160[] =
{
    { { REQ_TOKEN}, {  16} },         
    { {        59}, { 208} }, // ';'  
    { {        43}, { 116} }, // '+'  
    { {        45}, { 117} }, // '-'  
    { {        42}, { 118} }, // '*'  
    { {        47}, { 119} }, // '/'  
    { {        37}, { 120} }, // '%'  
    { {       302}, { 121} }, // B_AND
    { {       301}, { 122} }, // OR   
    { {       303}, { 123} }, // EQ   
    { {       305}, { 124} }, // LT   
    { {       308}, { 125} }, // GT   
    { {       304}, { 126} }, // NE   
    { {       306}, { 127} }, // LE   
    { {       307}, { 128} }, // GE   
    { {       124}, { 129} }, // '|'  
    { {         0}, {   0} },         
};

SR__ s_161[] =
{
    { { REQ_TOKEN}, {  16} },         
    { {        59}, { 209} }, // ';'  
    { {        43}, { 116} }, // '+'  
    { {        45}, { 117} }, // '-'  
    { {        42}, { 118} }, // '*'  
    { {        47}, { 119} }, // '/'  
    { {        37}, { 120} }, // '%'  
    { {       302}, { 121} }, // B_AND
    { {       301}, { 122} }, // OR   
    { {       303}, { 123} }, // EQ   
    { {       305}, { 124} }, // LT   
    { {       308}, { 125} }, // GT   
    { {       304}, { 126} }, // NE   
    { {       306}, { 127} }, // LE   
    { {       307}, { 128} }, // GE   
    { {       124}, { 129} }, // '|'  
    { {         0}, {   0} },         
};

SR__ s_162[] =
{
    { { REQ_DEF}, {   5} },       
    { {      42}, { 118} }, // '*'
    { {      47}, { 119} }, // '/'
    { {      37}, { 120} }, // '%'
    { {     124}, { 129} }, // '|'
    { {       0}, { -36} },       
};

SR__ s_163[] =
{
    { { REQ_DEF}, {   5} },       
    { {      42}, { 118} }, // '*'
    { {      47}, { 119} }, // '/'
    { {      37}, { 120} }, // '%'
    { {     124}, { 129} }, // '|'
    { {       0}, { -37} },       
};

SR__ s_164[] =
{
    { { REQ_DEF}, {   2} },       
    { {     124}, { 129} }, // '|'
    { {       0}, { -38} },       
};

SR__ s_165[] =
{
    { { REQ_DEF}, {   2} },       
    { {     124}, { 129} }, // '|'
    { {       0}, { -39} },       
};

SR__ s_166[] =
{
    { { REQ_DEF}, {   2} },       
    { {     124}, { 129} }, // '|'
    { {       0}, { -40} },       
};

SR__ s_167[] =
{
    { { REQ_DEF}, {  13} },       
    { {      43}, { 116} }, // '+'
    { {      45}, { 117} }, // '-'
    { {      42}, { 118} }, // '*'
    { {      47}, { 119} }, // '/'
    { {      37}, { 120} }, // '%'
    { {     303}, { 123} }, // EQ 
    { {     305}, { 124} }, // LT 
    { {     308}, { 125} }, // GT 
    { {     304}, { 126} }, // NE 
    { {     306}, { 127} }, // LE 
    { {     307}, { 128} }, // GE 
    { {     124}, { 129} }, // '|'
    { {       0}, { -42} },       
};

SR__ s_168[] =
{
    { { REQ_DEF}, {  14} },         
    { {      43}, { 116} }, // '+'  
    { {      45}, { 117} }, // '-'  
    { {      42}, { 118} }, // '*'  
    { {      47}, { 119} }, // '/'  
    { {      37}, { 120} }, // '%'  
    { {     302}, { 121} }, // B_AND
    { {     303}, { 123} }, // EQ   
    { {     305}, { 124} }, // LT   
    { {     308}, { 125} }, // GT   
    { {     304}, { 126} }, // NE   
    { {     306}, { 127} }, // LE   
    { {     307}, { 128} }, // GE   
    { {     124}, { 129} }, // '|'  
    { {       0}, { -43} },         
};

SR__ s_169[] =
{
    { { REQ_DEF}, {  11} },       
    { {      43}, { 116} }, // '+'
    { {      45}, { 117} }, // '-'
    { {      42}, { 118} }, // '*'
    { {      47}, { 119} }, // '/'
    { {      37}, { 120} }, // '%'
    { {     305}, { 124} }, // LT 
    { {     308}, { 125} }, // GT 
    { {     306}, { 127} }, // LE 
    { {     307}, { 128} }, // GE 
    { {     124}, { 129} }, // '|'
    { {       0}, { -45} },       
};

SR__ s_170[] =
{
    { { REQ_DEF}, {   7} },       
    { {      43}, { 116} }, // '+'
    { {      45}, { 117} }, // '-'
    { {      42}, { 118} }, // '*'
    { {      47}, { 119} }, // '/'
    { {      37}, { 120} }, // '%'
    { {     124}, { 129} }, // '|'
    { {       0}, { -46} },       
};

SR__ s_171[] =
{
    { { REQ_DEF}, {   7} },       
    { {      43}, { 116} }, // '+'
    { {      45}, { 117} }, // '-'
    { {      42}, { 118} }, // '*'
    { {      47}, { 119} }, // '/'
    { {      37}, { 120} }, // '%'
    { {     124}, { 129} }, // '|'
    { {       0}, { -47} },       
};

SR__ s_172[] =
{
    { { REQ_DEF}, {  11} },       
    { {      43}, { 116} }, // '+'
    { {      45}, { 117} }, // '-'
    { {      42}, { 118} }, // '*'
    { {      47}, { 119} }, // '/'
    { {      37}, { 120} }, // '%'
    { {     305}, { 124} }, // LT 
    { {     308}, { 125} }, // GT 
    { {     306}, { 127} }, // LE 
    { {     307}, { 128} }, // GE 
    { {     124}, { 129} }, // '|'
    { {       0}, { -48} },       
};

SR__ s_173[] =
{
    { { REQ_DEF}, {   7} },       
    { {      43}, { 116} }, // '+'
    { {      45}, { 117} }, // '-'
    { {      42}, { 118} }, // '*'
    { {      47}, { 119} }, // '/'
    { {      37}, { 120} }, // '%'
    { {     124}, { 129} }, // '|'
    { {       0}, { -49} },       
};

SR__ s_174[] =
{
    { { REQ_DEF}, {   7} },       
    { {      43}, { 116} }, // '+'
    { {      45}, { 117} }, // '-'
    { {      42}, { 118} }, // '*'
    { {      47}, { 119} }, // '/'
    { {      37}, { 120} }, // '%'
    { {     124}, { 129} }, // '|'
    { {       0}, { -50} },       
};

SR__ s_175[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -52} }, 
};

SR__ s_176[] =
{
    { { REQ_TOKEN}, {   2} },      
    { {       269}, { 210} }, // AS
    { {         0}, {   0} },      
};

SR__ s_177[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -103} }, 
};

SR__ s_178[] =
{
    { { REQ_TOKEN}, {  15} },                  
    { {       405}, { 211} }, // decl_term     
    { {       379}, { 133} }, // term          
    { {       417}, {  34} }, // variable      
    { {        35}, {  35} }, // '#'           
    { {        64}, {  36} }, // '@'           
    { {       270}, {  37} }, // RAND          
    { {       418}, {  38} }, // constant      
    { {       266}, {  39} }, // ENV           
    { {       265}, {  40} }, // IDEAL         
    { {       294}, {  41} }, // RAND_PORT     
    { {       293}, {  42} }, // ENV_PORT      
    { {       299}, {  43} }, // DOUBLE_DOT    
    { {       258}, {  44} }, // NAME          
    { {       257}, {  45} }, // INTEGER_NUMBER
    { {         0}, {   0} },                  
};

SR__ s_179[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -116} }, 
};

SR__ s_180[] =
{
    { { REQ_TOKEN}, {   2} },        
    { {       297}, { 212} }, // WITH
    { {         0}, {   0} },        
};

SR__ s_181[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -88} }, 
};

SR__ s_182[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -117} }, 
};

SR__ s_183[] =
{
    { { REQ_TOKEN}, {  16} },         
    { {        41}, { 213} }, // ')'  
    { {        43}, { 116} }, // '+'  
    { {        45}, { 117} }, // '-'  
    { {        42}, { 118} }, // '*'  
    { {        47}, { 119} }, // '/'  
    { {        37}, { 120} }, // '%'  
    { {       302}, { 121} }, // B_AND
    { {       301}, { 122} }, // OR   
    { {       303}, { 123} }, // EQ   
    { {       305}, { 124} }, // LT   
    { {       308}, { 125} }, // GT   
    { {       304}, { 126} }, // NE   
    { {       306}, { 127} }, // LE   
    { {       307}, { 128} }, // GE   
    { {       124}, { 129} }, // '|'  
    { {         0}, {   0} },         
};

SR__ s_184[] =
{
    { { REQ_TOKEN}, {  20} },                  
    { {       381}, { 214} }, // exp           
    { {        45}, {  85} }, // '-'           
    { {       310}, {  86} }, // NOT           
    { {        40}, {  87} }, // '('           
    { {       379}, { 110} }, // term          
    { {       414}, {  88} }, // exp_list      
    { {       417}, {  34} }, // variable      
    { {        35}, {  35} }, // '#'           
    { {        64}, {  36} }, // '@'           
    { {       270}, {  37} }, // RAND          
    { {       418}, {  38} }, // constant      
    { {       266}, {  39} }, // ENV           
    { {       265}, {  40} }, // IDEAL         
    { {       294}, {  41} }, // RAND_PORT     
    { {       293}, {  42} }, // ENV_PORT      
    { {       299}, {  43} }, // DOUBLE_DOT    
    { {       123}, { 112} }, // '{'           
    { {       258}, {  44} }, // NAME          
    { {       257}, {  45} }, // INTEGER_NUMBER
    { {         0}, {   0} },                  
};

SR__ s_185[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -130} }, 
};

SR__ s_186[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -131} }, 
};

SR__ s_187[] =
{
    { { ERR_REQ_DEF}, {  67} },                         
    { {         384}, { 215} }, // statement_list       
    { {         385}, {  48} }, // statement            
    { {         391}, {  49} }, // assignment_statement 
    { {         392}, {  50} }, // mult_statement       
    { {         393}, {  51} }, // pvt_statement        
    { {         394}, {  52} }, // with_statement       
    { {         395}, {  53} }, // send_statement       
    { {         396}, {  54} }, // session_call         
    { {         401}, {  55} }, // tying_statement      
    { {         402}, {  56} }, // declaration_statement
    { {         366}, {  57} }, // protocol             
    { {         406}, {  58} }, // loop_statement       
    { {         410}, {  59} }, // cond_statement       
    { {         387}, {  60} }, // wrap_statement       
    { {         412}, {  61} }, // connect_statement    
    { {         386}, {  62} }, // abort_statement      
    { {         389}, {  63} }, // seq_statement        
    { {         388}, {  64} }, // start_statement      
    { {         411}, {  65} }, // set_statement        
    { {         416}, {  66} }, // forward_statement    
    { {     _error_}, {  67} }, // _error_              
    { {         379}, {  68} }, // term                 
    { {         123}, {  69} }, // '{'                  
    { {         267}, {  70} }, // IN                   
    { {         297}, {  71} }, // WITH                 
    { {         381}, {  72} }, // exp                  
    { {         397}, {  73} }, // opt_partial          
    { {         403}, {  74} }, // type                 
    { {         369}, {   4} }, // prot_decl            
    { {         283}, {  75} }, // FOR                  
    { {         287}, {  76} }, // IF                   
    { {         273}, {  77} }, // WRAP                 
    { {         289}, {  78} }, // CONNECT              
    { {         272}, {  79} }, // ABORTING             
    { {         275}, {  80} }, // BEFORE               
    { {         276}, {  81} }, // AFTER                
    { {         274}, {  82} }, // START                
    { {         288}, {  83} }, // SET                  
    { {         291}, {  84} }, // FORWARD              
    { {         417}, {  34} }, // variable             
    { {          35}, {  35} }, // '#'                  
    { {          64}, {  36} }, // '@'                  
    { {         270}, {  37} }, // RAND                 
    { {         418}, {  38} }, // constant             
    { {         266}, {  39} }, // ENV                  
    { {         265}, {  40} }, // IDEAL                
    { {         294}, {  41} }, // RAND_PORT            
    { {         293}, {  42} }, // ENV_PORT             
    { {         299}, {  43} }, // DOUBLE_DOT           
    { {          45}, {  85} }, // '-'                  
    { {         310}, {  86} }, // NOT                  
    { {          40}, {  87} }, // '('                  
    { {         414}, {  88} }, // exp_list             
    { {         296}, {  89} }, // PARTIAL              
    { {         263}, {  18} }, // PARTY                
    { {         259}, {  19} }, // INTEGER              
    { {         278}, {  20} }, // SESSION              
    { {         279}, {  21} }, // UNKNOWN              
    { {         280}, {  22} }, // PORT                 
    { {         281}, {  23} }, // INPORT               
    { {         282}, {  24} }, // OUTPORT              
    { {         295}, {  25} }, // BOOL                 
    { {         260}, {  26} }, // FIELD                
    { {         258}, {  90} }, // NAME                 
    { {         261}, {   5} }, // PROTOCOL             
    { {         257}, {  45} }, // INTEGER_NUMBER       
    { {           0}, { -95} },                         
};

SR__ s_188[] =
{
    { { ERR_REQ_DEF}, {  67} },                         
    { {         384}, { 216} }, // statement_list       
    { {         385}, {  48} }, // statement            
    { {         391}, {  49} }, // assignment_statement 
    { {         392}, {  50} }, // mult_statement       
    { {         393}, {  51} }, // pvt_statement        
    { {         394}, {  52} }, // with_statement       
    { {         395}, {  53} }, // send_statement       
    { {         396}, {  54} }, // session_call         
    { {         401}, {  55} }, // tying_statement      
    { {         402}, {  56} }, // declaration_statement
    { {         366}, {  57} }, // protocol             
    { {         406}, {  58} }, // loop_statement       
    { {         410}, {  59} }, // cond_statement       
    { {         387}, {  60} }, // wrap_statement       
    { {         412}, {  61} }, // connect_statement    
    { {         386}, {  62} }, // abort_statement      
    { {         389}, {  63} }, // seq_statement        
    { {         388}, {  64} }, // start_statement      
    { {         411}, {  65} }, // set_statement        
    { {         416}, {  66} }, // forward_statement    
    { {     _error_}, {  67} }, // _error_              
    { {         379}, {  68} }, // term                 
    { {         123}, {  69} }, // '{'                  
    { {         267}, {  70} }, // IN                   
    { {         297}, {  71} }, // WITH                 
    { {         381}, {  72} }, // exp                  
    { {         397}, {  73} }, // opt_partial          
    { {         403}, {  74} }, // type                 
    { {         369}, {   4} }, // prot_decl            
    { {         283}, {  75} }, // FOR                  
    { {         287}, {  76} }, // IF                   
    { {         273}, {  77} }, // WRAP                 
    { {         289}, {  78} }, // CONNECT              
    { {         272}, {  79} }, // ABORTING             
    { {         275}, {  80} }, // BEFORE               
    { {         276}, {  81} }, // AFTER                
    { {         274}, {  82} }, // START                
    { {         288}, {  83} }, // SET                  
    { {         291}, {  84} }, // FORWARD              
    { {         417}, {  34} }, // variable             
    { {          35}, {  35} }, // '#'                  
    { {          64}, {  36} }, // '@'                  
    { {         270}, {  37} }, // RAND                 
    { {         418}, {  38} }, // constant             
    { {         266}, {  39} }, // ENV                  
    { {         265}, {  40} }, // IDEAL                
    { {         294}, {  41} }, // RAND_PORT            
    { {         293}, {  42} }, // ENV_PORT             
    { {         299}, {  43} }, // DOUBLE_DOT           
    { {          45}, {  85} }, // '-'                  
    { {         310}, {  86} }, // NOT                  
    { {          40}, {  87} }, // '('                  
    { {         414}, {  88} }, // exp_list             
    { {         296}, {  89} }, // PARTIAL              
    { {         263}, {  18} }, // PARTY                
    { {         259}, {  19} }, // INTEGER              
    { {         278}, {  20} }, // SESSION              
    { {         279}, {  21} }, // UNKNOWN              
    { {         280}, {  22} }, // PORT                 
    { {         281}, {  23} }, // INPORT               
    { {         282}, {  24} }, // OUTPORT              
    { {         295}, {  25} }, // BOOL                 
    { {         260}, {  26} }, // FIELD                
    { {         258}, {  90} }, // NAME                 
    { {         261}, {   5} }, // PROTOCOL             
    { {         257}, {  45} }, // INTEGER_NUMBER       
    { {           0}, { -95} },                         
};

SR__ s_189[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -84} }, 
};

SR__ s_190[] =
{
    { { REQ_TOKEN}, {   3} },             
    { {       398}, { 217} }, // prot_call
    { {       258}, { 218} }, // NAME     
    { {         0}, {   0} },             
};

SR__ s_191[] =
{
    { { REQ_TOKEN}, {  20} },                  
    { {       381}, { 219} }, // exp           
    { {        45}, {  85} }, // '-'           
    { {       310}, {  86} }, // NOT           
    { {        40}, {  87} }, // '('           
    { {       379}, { 110} }, // term          
    { {       414}, {  88} }, // exp_list      
    { {       417}, {  34} }, // variable      
    { {        35}, {  35} }, // '#'           
    { {        64}, {  36} }, // '@'           
    { {       270}, {  37} }, // RAND          
    { {       418}, {  38} }, // constant      
    { {       266}, {  39} }, // ENV           
    { {       265}, {  40} }, // IDEAL         
    { {       294}, {  41} }, // RAND_PORT     
    { {       293}, {  42} }, // ENV_PORT      
    { {       299}, {  43} }, // DOUBLE_DOT    
    { {       123}, { 112} }, // '{'           
    { {       258}, {  44} }, // NAME          
    { {       257}, {  45} }, // INTEGER_NUMBER
    { {         0}, {   0} },                  
};

SR__ s_192[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -51} }, 
};

SR__ s_193[] =
{
    { { REQ_DEF}, {   2} },       
    { {      44}, { 220} }, // ','
    { {       0}, {  -7} },       
};

SR__ s_194[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -8} }, 
};

SR__ s_195[] =
{
    { { REQ_DEF}, {  23} },                   
    { {     372}, { 221} }, // opt_port_clause
    { {      43}, { 116} }, // '+'            
    { {      45}, { 117} }, // '-'            
    { {      42}, { 118} }, // '*'            
    { {      47}, { 119} }, // '/'            
    { {      37}, { 120} }, // '%'            
    { {     302}, { 121} }, // B_AND          
    { {     301}, { 122} }, // OR             
    { {     303}, { 123} }, // EQ             
    { {     305}, { 124} }, // LT             
    { {     308}, { 125} }, // GT             
    { {     304}, { 126} }, // NE             
    { {     306}, { 127} }, // LE             
    { {     307}, { 128} }, // GE             
    { {     124}, { 129} }, // '|'            
    { {     390}, { 180} }, // opt_each       
    { {     277}, { 181} }, // EACH           
    { {     261}, { -11} }, // PROTOCOL       
    { {     123}, { -11} }, // '{'            
    { {      41}, { -11} }, // ')'            
    { {      44}, { -11} }, // ','            
    { {      59}, { -11} }, // ';'            
    { {       0}, { -87} },                   
};

SR__ s_196[] =
{
    { { REQ_TOKEN}, {  16} },         
    { {        93}, { 222} }, // ']'  
    { {        43}, { 116} }, // '+'  
    { {        45}, { 117} }, // '-'  
    { {        42}, { 118} }, // '*'  
    { {        47}, { 119} }, // '/'  
    { {        37}, { 120} }, // '%'  
    { {       302}, { 121} }, // B_AND
    { {       301}, { 122} }, // OR   
    { {       303}, { 123} }, // EQ   
    { {       305}, { 124} }, // LT   
    { {       308}, { 125} }, // GT   
    { {       304}, { 126} }, // NE   
    { {       306}, { 127} }, // LE   
    { {       307}, { 128} }, // GE   
    { {       124}, { 129} }, // '|'  
    { {         0}, {   0} },         
};

SR__ s_197[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -35} }, 
};

SR__ s_198[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -89} }, 
};

SR__ s_199[] =
{
    { { REQ_DEF}, {   15} },         
    { {      43}, {  116} }, // '+'  
    { {      45}, {  117} }, // '-'  
    { {      42}, {  118} }, // '*'  
    { {      47}, {  119} }, // '/'  
    { {      37}, {  120} }, // '%'  
    { {     302}, {  121} }, // B_AND
    { {     301}, {  122} }, // OR   
    { {     303}, {  123} }, // EQ   
    { {     305}, {  124} }, // LT   
    { {     308}, {  125} }, // GT   
    { {     304}, {  126} }, // NE   
    { {     306}, {  127} }, // LE   
    { {     307}, {  128} }, // GE   
    { {     124}, {  129} }, // '|'  
    { {       0}, { -134} },         
};

SR__ s_200[] =
{
    { { ERR_REQ_DEF}, {  67} },                         
    { {         125}, { 223} }, // '}'                  
    { {         385}, {  99} }, // statement            
    { {         391}, {  49} }, // assignment_statement 
    { {         392}, {  50} }, // mult_statement       
    { {         393}, {  51} }, // pvt_statement        
    { {         394}, {  52} }, // with_statement       
    { {         395}, {  53} }, // send_statement       
    { {         396}, {  54} }, // session_call         
    { {         401}, {  55} }, // tying_statement      
    { {         402}, {  56} }, // declaration_statement
    { {         366}, {  57} }, // protocol             
    { {         406}, {  58} }, // loop_statement       
    { {         410}, {  59} }, // cond_statement       
    { {         387}, {  60} }, // wrap_statement       
    { {         412}, {  61} }, // connect_statement    
    { {         386}, {  62} }, // abort_statement      
    { {         389}, {  63} }, // seq_statement        
    { {         388}, {  64} }, // start_statement      
    { {         411}, {  65} }, // set_statement        
    { {         416}, {  66} }, // forward_statement    
    { {     _error_}, {  67} }, // _error_              
    { {         379}, {  68} }, // term                 
    { {         123}, {  69} }, // '{'                  
    { {         267}, {  70} }, // IN                   
    { {         297}, {  71} }, // WITH                 
    { {         381}, {  72} }, // exp                  
    { {         397}, {  73} }, // opt_partial          
    { {         403}, {  74} }, // type                 
    { {         369}, {   4} }, // prot_decl            
    { {         283}, {  75} }, // FOR                  
    { {         287}, {  76} }, // IF                   
    { {         273}, {  77} }, // WRAP                 
    { {         289}, {  78} }, // CONNECT              
    { {         272}, {  79} }, // ABORTING             
    { {         275}, {  80} }, // BEFORE               
    { {         276}, {  81} }, // AFTER                
    { {         274}, {  82} }, // START                
    { {         288}, {  83} }, // SET                  
    { {         291}, {  84} }, // FORWARD              
    { {         417}, {  34} }, // variable             
    { {          35}, {  35} }, // '#'                  
    { {          64}, {  36} }, // '@'                  
    { {         270}, {  37} }, // RAND                 
    { {         418}, {  38} }, // constant             
    { {         266}, {  39} }, // ENV                  
    { {         265}, {  40} }, // IDEAL                
    { {         294}, {  41} }, // RAND_PORT            
    { {         293}, {  42} }, // ENV_PORT             
    { {         299}, {  43} }, // DOUBLE_DOT           
    { {          45}, {  85} }, // '-'                  
    { {         310}, {  86} }, // NOT                  
    { {          40}, {  87} }, // '('                  
    { {         414}, {  88} }, // exp_list             
    { {         296}, {  89} }, // PARTIAL              
    { {         263}, {  18} }, // PARTY                
    { {         259}, {  19} }, // INTEGER              
    { {         278}, {  20} }, // SESSION              
    { {         279}, {  21} }, // UNKNOWN              
    { {         280}, {  22} }, // PORT                 
    { {         281}, {  23} }, // INPORT               
    { {         282}, {  24} }, // OUTPORT              
    { {         295}, {  25} }, // BOOL                 
    { {         260}, {  26} }, // FIELD                
    { {         258}, {  90} }, // NAME                 
    { {         261}, {   5} }, // PROTOCOL             
    { {         257}, {  45} }, // INTEGER_NUMBER       
    { {           0}, { -95} },                         
};

SR__ s_201[] =
{
    { { REQ_TOKEN}, {  20} },                  
    { {       381}, { 224} }, // exp           
    { {        45}, {  85} }, // '-'           
    { {       310}, {  86} }, // NOT           
    { {        40}, {  87} }, // '('           
    { {       379}, { 110} }, // term          
    { {       414}, {  88} }, // exp_list      
    { {       417}, {  34} }, // variable      
    { {        35}, {  35} }, // '#'           
    { {        64}, {  36} }, // '@'           
    { {       270}, {  37} }, // RAND          
    { {       418}, {  38} }, // constant      
    { {       266}, {  39} }, // ENV           
    { {       265}, {  40} }, // IDEAL         
    { {       294}, {  41} }, // RAND_PORT     
    { {       293}, {  42} }, // ENV_PORT      
    { {       299}, {  43} }, // DOUBLE_DOT    
    { {       123}, { 112} }, // '{'           
    { {       258}, {  44} }, // NAME          
    { {       257}, {  45} }, // INTEGER_NUMBER
    { {         0}, {   0} },                  
};

SR__ s_202[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -121} }, 
};

SR__ s_203[] =
{
    { { REQ_TOKEN}, {  20} },                  
    { {       381}, { 225} }, // exp           
    { {        45}, {  85} }, // '-'           
    { {       310}, {  86} }, // NOT           
    { {        40}, {  87} }, // '('           
    { {       379}, { 110} }, // term          
    { {       414}, {  88} }, // exp_list      
    { {       417}, {  34} }, // variable      
    { {        35}, {  35} }, // '#'           
    { {        64}, {  36} }, // '@'           
    { {       270}, {  37} }, // RAND          
    { {       418}, {  38} }, // constant      
    { {       266}, {  39} }, // ENV           
    { {       265}, {  40} }, // IDEAL         
    { {       294}, {  41} }, // RAND_PORT     
    { {       293}, {  42} }, // ENV_PORT      
    { {       299}, {  43} }, // DOUBLE_DOT    
    { {       123}, { 112} }, // '{'           
    { {       258}, {  44} }, // NAME          
    { {       257}, {  45} }, // INTEGER_NUMBER
    { {         0}, {   0} },                  
};

SR__ s_204[] =
{
    { { REQ_TOKEN}, {  20} },                  
    { {       381}, { 226} }, // exp           
    { {        45}, {  85} }, // '-'           
    { {       310}, {  86} }, // NOT           
    { {        40}, {  87} }, // '('           
    { {       379}, { 110} }, // term          
    { {       414}, {  88} }, // exp_list      
    { {       417}, {  34} }, // variable      
    { {        35}, {  35} }, // '#'           
    { {        64}, {  36} }, // '@'           
    { {       270}, {  37} }, // RAND          
    { {       418}, {  38} }, // constant      
    { {       266}, {  39} }, // ENV           
    { {       265}, {  40} }, // IDEAL         
    { {       294}, {  41} }, // RAND_PORT     
    { {       293}, {  42} }, // ENV_PORT      
    { {       299}, {  43} }, // DOUBLE_DOT    
    { {       123}, { 112} }, // '{'           
    { {       258}, {  44} }, // NAME          
    { {       257}, {  45} }, // INTEGER_NUMBER
    { {         0}, {   0} },                  
};

SR__ s_205[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {       125}, { 227} }, // '}'
    { {        44}, { 228} }, // ','
    { {         0}, {   0} },       
};

SR__ s_206[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -14} }, 
};

SR__ s_207[] =
{
    { { REQ_TOKEN}, {  14} },                  
    { {       379}, { 229} }, // term          
    { {       417}, {  34} }, // variable      
    { {        35}, {  35} }, // '#'           
    { {        64}, {  36} }, // '@'           
    { {       270}, {  37} }, // RAND          
    { {       418}, {  38} }, // constant      
    { {       266}, {  39} }, // ENV           
    { {       265}, {  40} }, // IDEAL         
    { {       294}, {  41} }, // RAND_PORT     
    { {       293}, {  42} }, // ENV_PORT      
    { {       299}, {  43} }, // DOUBLE_DOT    
    { {       258}, {  44} }, // NAME          
    { {       257}, {  45} }, // INTEGER_NUMBER
    { {         0}, {   0} },                  
};

SR__ s_208[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -93} }, 
};

SR__ s_209[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -102} }, 
};

SR__ s_210[] =
{
    { { REQ_TOKEN}, {   3} },             
    { {       398}, { 230} }, // prot_call
    { {       258}, { 218} }, // NAME     
    { {         0}, {   0} },             
};

SR__ s_211[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -115} }, 
};

SR__ s_212[] =
{
    { { REQ_TOKEN}, {   3} },               
    { {       373}, { 231} }, // port_clause
    { {       123}, { 232} }, // '{'        
    { {         0}, {   0} },               
};

SR__ s_213[] =
{
    { { ERR_REQ_DEF}, {  66} },                         
    { {         385}, { 233} }, // statement            
    { {         391}, {  49} }, // assignment_statement 
    { {         392}, {  50} }, // mult_statement       
    { {         393}, {  51} }, // pvt_statement        
    { {         394}, {  52} }, // with_statement       
    { {         395}, {  53} }, // send_statement       
    { {         396}, {  54} }, // session_call         
    { {         401}, {  55} }, // tying_statement      
    { {         402}, {  56} }, // declaration_statement
    { {         366}, {  57} }, // protocol             
    { {         406}, {  58} }, // loop_statement       
    { {         410}, {  59} }, // cond_statement       
    { {         387}, {  60} }, // wrap_statement       
    { {         412}, {  61} }, // connect_statement    
    { {         386}, {  62} }, // abort_statement      
    { {         389}, {  63} }, // seq_statement        
    { {         388}, {  64} }, // start_statement      
    { {         411}, {  65} }, // set_statement        
    { {         416}, {  66} }, // forward_statement    
    { {     _error_}, {  67} }, // _error_              
    { {         379}, {  68} }, // term                 
    { {         123}, {  69} }, // '{'                  
    { {         267}, {  70} }, // IN                   
    { {         297}, {  71} }, // WITH                 
    { {         381}, {  72} }, // exp                  
    { {         397}, {  73} }, // opt_partial          
    { {         403}, {  74} }, // type                 
    { {         369}, {   4} }, // prot_decl            
    { {         283}, {  75} }, // FOR                  
    { {         287}, {  76} }, // IF                   
    { {         273}, {  77} }, // WRAP                 
    { {         289}, {  78} }, // CONNECT              
    { {         272}, {  79} }, // ABORTING             
    { {         275}, {  80} }, // BEFORE               
    { {         276}, {  81} }, // AFTER                
    { {         274}, {  82} }, // START                
    { {         288}, {  83} }, // SET                  
    { {         291}, {  84} }, // FORWARD              
    { {         417}, {  34} }, // variable             
    { {          35}, {  35} }, // '#'                  
    { {          64}, {  36} }, // '@'                  
    { {         270}, {  37} }, // RAND                 
    { {         418}, {  38} }, // constant             
    { {         266}, {  39} }, // ENV                  
    { {         265}, {  40} }, // IDEAL                
    { {         294}, {  41} }, // RAND_PORT            
    { {         293}, {  42} }, // ENV_PORT             
    { {         299}, {  43} }, // DOUBLE_DOT           
    { {          45}, {  85} }, // '-'                  
    { {         310}, {  86} }, // NOT                  
    { {          40}, {  87} }, // '('                  
    { {         414}, {  88} }, // exp_list             
    { {         296}, {  89} }, // PARTIAL              
    { {         263}, {  18} }, // PARTY                
    { {         259}, {  19} }, // INTEGER              
    { {         278}, {  20} }, // SESSION              
    { {         279}, {  21} }, // UNKNOWN              
    { {         280}, {  22} }, // PORT                 
    { {         281}, {  23} }, // INPORT               
    { {         282}, {  24} }, // OUTPORT              
    { {         295}, {  25} }, // BOOL                 
    { {         260}, {  26} }, // FIELD                
    { {         258}, {  90} }, // NAME                 
    { {         261}, {   5} }, // PROTOCOL             
    { {         257}, {  45} }, // INTEGER_NUMBER       
    { {           0}, { -95} },                         
};

SR__ s_214[] =
{
    { { REQ_TOKEN}, {  16} },         
    { {        59}, { 234} }, // ';'  
    { {        43}, { 116} }, // '+'  
    { {        45}, { 117} }, // '-'  
    { {        42}, { 118} }, // '*'  
    { {        47}, { 119} }, // '/'  
    { {        37}, { 120} }, // '%'  
    { {       302}, { 121} }, // B_AND
    { {       301}, { 122} }, // OR   
    { {       303}, { 123} }, // EQ   
    { {       305}, { 124} }, // LT   
    { {       308}, { 125} }, // GT   
    { {       304}, { 126} }, // NE   
    { {       306}, { 127} }, // LE   
    { {       307}, { 128} }, // GE   
    { {       124}, { 129} }, // '|'  
    { {         0}, {   0} },         
};

SR__ s_215[] =
{
    { { ERR_REQ_DEF}, {  67} },                         
    { {         125}, { 235} }, // '}'                  
    { {         385}, {  99} }, // statement            
    { {         391}, {  49} }, // assignment_statement 
    { {         392}, {  50} }, // mult_statement       
    { {         393}, {  51} }, // pvt_statement        
    { {         394}, {  52} }, // with_statement       
    { {         395}, {  53} }, // send_statement       
    { {         396}, {  54} }, // session_call         
    { {         401}, {  55} }, // tying_statement      
    { {         402}, {  56} }, // declaration_statement
    { {         366}, {  57} }, // protocol             
    { {         406}, {  58} }, // loop_statement       
    { {         410}, {  59} }, // cond_statement       
    { {         387}, {  60} }, // wrap_statement       
    { {         412}, {  61} }, // connect_statement    
    { {         386}, {  62} }, // abort_statement      
    { {         389}, {  63} }, // seq_statement        
    { {         388}, {  64} }, // start_statement      
    { {         411}, {  65} }, // set_statement        
    { {         416}, {  66} }, // forward_statement    
    { {     _error_}, {  67} }, // _error_              
    { {         379}, {  68} }, // term                 
    { {         123}, {  69} }, // '{'                  
    { {         267}, {  70} }, // IN                   
    { {         297}, {  71} }, // WITH                 
    { {         381}, {  72} }, // exp                  
    { {         397}, {  73} }, // opt_partial          
    { {         403}, {  74} }, // type                 
    { {         369}, {   4} }, // prot_decl            
    { {         283}, {  75} }, // FOR                  
    { {         287}, {  76} }, // IF                   
    { {         273}, {  77} }, // WRAP                 
    { {         289}, {  78} }, // CONNECT              
    { {         272}, {  79} }, // ABORTING             
    { {         275}, {  80} }, // BEFORE               
    { {         276}, {  81} }, // AFTER                
    { {         274}, {  82} }, // START                
    { {         288}, {  83} }, // SET                  
    { {         291}, {  84} }, // FORWARD              
    { {         417}, {  34} }, // variable             
    { {          35}, {  35} }, // '#'                  
    { {          64}, {  36} }, // '@'                  
    { {         270}, {  37} }, // RAND                 
    { {         418}, {  38} }, // constant             
    { {         266}, {  39} }, // ENV                  
    { {         265}, {  40} }, // IDEAL                
    { {         294}, {  41} }, // RAND_PORT            
    { {         293}, {  42} }, // ENV_PORT             
    { {         299}, {  43} }, // DOUBLE_DOT           
    { {          45}, {  85} }, // '-'                  
    { {         310}, {  86} }, // NOT                  
    { {          40}, {  87} }, // '('                  
    { {         414}, {  88} }, // exp_list             
    { {         296}, {  89} }, // PARTIAL              
    { {         263}, {  18} }, // PARTY                
    { {         259}, {  19} }, // INTEGER              
    { {         278}, {  20} }, // SESSION              
    { {         279}, {  21} }, // UNKNOWN              
    { {         280}, {  22} }, // PORT                 
    { {         281}, {  23} }, // INPORT               
    { {         282}, {  24} }, // OUTPORT              
    { {         295}, {  25} }, // BOOL                 
    { {         260}, {  26} }, // FIELD                
    { {         258}, {  90} }, // NAME                 
    { {         261}, {   5} }, // PROTOCOL             
    { {         257}, {  45} }, // INTEGER_NUMBER       
    { {           0}, { -95} },                         
};

SR__ s_216[] =
{
    { { ERR_REQ_DEF}, {  67} },                         
    { {         125}, { 236} }, // '}'                  
    { {         385}, {  99} }, // statement            
    { {         391}, {  49} }, // assignment_statement 
    { {         392}, {  50} }, // mult_statement       
    { {         393}, {  51} }, // pvt_statement        
    { {         394}, {  52} }, // with_statement       
    { {         395}, {  53} }, // send_statement       
    { {         396}, {  54} }, // session_call         
    { {         401}, {  55} }, // tying_statement      
    { {         402}, {  56} }, // declaration_statement
    { {         366}, {  57} }, // protocol             
    { {         406}, {  58} }, // loop_statement       
    { {         410}, {  59} }, // cond_statement       
    { {         387}, {  60} }, // wrap_statement       
    { {         412}, {  61} }, // connect_statement    
    { {         386}, {  62} }, // abort_statement      
    { {         389}, {  63} }, // seq_statement        
    { {         388}, {  64} }, // start_statement      
    { {         411}, {  65} }, // set_statement        
    { {         416}, {  66} }, // forward_statement    
    { {     _error_}, {  67} }, // _error_              
    { {         379}, {  68} }, // term                 
    { {         123}, {  69} }, // '{'                  
    { {         267}, {  70} }, // IN                   
    { {         297}, {  71} }, // WITH                 
    { {         381}, {  72} }, // exp                  
    { {         397}, {  73} }, // opt_partial          
    { {         403}, {  74} }, // type                 
    { {         369}, {   4} }, // prot_decl            
    { {         283}, {  75} }, // FOR                  
    { {         287}, {  76} }, // IF                   
    { {         273}, {  77} }, // WRAP                 
    { {         289}, {  78} }, // CONNECT              
    { {         272}, {  79} }, // ABORTING             
    { {         275}, {  80} }, // BEFORE               
    { {         276}, {  81} }, // AFTER                
    { {         274}, {  82} }, // START                
    { {         288}, {  83} }, // SET                  
    { {         291}, {  84} }, // FORWARD              
    { {         417}, {  34} }, // variable             
    { {          35}, {  35} }, // '#'                  
    { {          64}, {  36} }, // '@'                  
    { {         270}, {  37} }, // RAND                 
    { {         418}, {  38} }, // constant             
    { {         266}, {  39} }, // ENV                  
    { {         265}, {  40} }, // IDEAL                
    { {         294}, {  41} }, // RAND_PORT            
    { {         293}, {  42} }, // ENV_PORT             
    { {         299}, {  43} }, // DOUBLE_DOT           
    { {          45}, {  85} }, // '-'                  
    { {         310}, {  86} }, // NOT                  
    { {          40}, {  87} }, // '('                  
    { {         414}, {  88} }, // exp_list             
    { {         296}, {  89} }, // PARTIAL              
    { {         263}, {  18} }, // PARTY                
    { {         259}, {  19} }, // INTEGER              
    { {         278}, {  20} }, // SESSION              
    { {         279}, {  21} }, // UNKNOWN              
    { {         280}, {  22} }, // PORT                 
    { {         281}, {  23} }, // INPORT               
    { {         282}, {  24} }, // OUTPORT              
    { {         295}, {  25} }, // BOOL                 
    { {         260}, {  26} }, // FIELD                
    { {         258}, {  90} }, // NAME                 
    { {         261}, {   5} }, // PROTOCOL             
    { {         257}, {  45} }, // INTEGER_NUMBER       
    { {           0}, { -95} },                         
};

SR__ s_217[] =
{
    { { REQ_TOKEN}, {   2} },                
    { {       298}, { 237} }, // DOUBLE_COLON
    { {         0}, {   0} },                
};

SR__ s_218[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        40}, { 238} }, // '('
    { {         0}, {   0} },       
};

SR__ s_219[] =
{
    { { REQ_TOKEN}, {  16} },         
    { {        59}, { 239} }, // ';'  
    { {        43}, { 116} }, // '+'  
    { {        45}, { 117} }, // '-'  
    { {        42}, { 118} }, // '*'  
    { {        47}, { 119} }, // '/'  
    { {        37}, { 120} }, // '%'  
    { {       302}, { 121} }, // B_AND
    { {       301}, { 122} }, // OR   
    { {       303}, { 123} }, // EQ   
    { {       305}, { 124} }, // LT   
    { {       308}, { 125} }, // GT   
    { {       304}, { 126} }, // NE   
    { {       306}, { 127} }, // LE   
    { {       307}, { 128} }, // GE   
    { {       124}, { 129} }, // '|'  
    { {         0}, {   0} },         
};

SR__ s_220[] =
{
    { { REQ_TOKEN}, {  21} },                  
    { {       371}, { 240} }, // p_list_elem   
    { {       381}, { 195} }, // exp           
    { {        45}, {  85} }, // '-'           
    { {       310}, {  86} }, // NOT           
    { {        40}, {  87} }, // '('           
    { {       379}, { 110} }, // term          
    { {       414}, {  88} }, // exp_list      
    { {       417}, {  34} }, // variable      
    { {        35}, {  35} }, // '#'           
    { {        64}, {  36} }, // '@'           
    { {       270}, {  37} }, // RAND          
    { {       418}, {  38} }, // constant      
    { {       266}, {  39} }, // ENV           
    { {       265}, {  40} }, // IDEAL         
    { {       294}, {  41} }, // RAND_PORT     
    { {       293}, {  42} }, // ENV_PORT      
    { {       299}, {  43} }, // DOUBLE_DOT    
    { {       123}, { 112} }, // '{'           
    { {       258}, {  44} }, // NAME          
    { {       257}, {  45} }, // INTEGER_NUMBER
    { {         0}, {   0} },                  
};

SR__ s_221[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -10} }, 
};

SR__ s_222[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -34} }, 
};

SR__ s_223[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -91} }, 
};

SR__ s_224[] =
{
    { { REQ_DEF}, {   18} },            
    { {     409}, {  241} }, // opt_cond
    { {      43}, {  116} }, // '+'     
    { {      45}, {  117} }, // '-'     
    { {      42}, {  118} }, // '*'     
    { {      47}, {  119} }, // '/'     
    { {      37}, {  120} }, // '%'     
    { {     302}, {  121} }, // B_AND   
    { {     301}, {  122} }, // OR      
    { {     303}, {  123} }, // EQ      
    { {     305}, {  124} }, // LT      
    { {     308}, {  125} }, // GT      
    { {     304}, {  126} }, // NE      
    { {     306}, {  127} }, // LE      
    { {     307}, {  128} }, // GE      
    { {     124}, {  129} }, // '|'     
    { {     285}, {  203} }, // EXCEPT  
    { {     286}, {  204} }, // WHERE   
    { {       0}, { -122} },            
};

SR__ s_225[] =
{
    { { REQ_DEF}, {   15} },         
    { {      43}, {  116} }, // '+'  
    { {      45}, {  117} }, // '-'  
    { {      42}, {  118} }, // '*'  
    { {      47}, {  119} }, // '/'  
    { {      37}, {  120} }, // '%'  
    { {     302}, {  121} }, // B_AND
    { {     301}, {  122} }, // OR   
    { {     303}, {  123} }, // EQ   
    { {     305}, {  124} }, // LT   
    { {     308}, {  125} }, // GT   
    { {     304}, {  126} }, // NE   
    { {     306}, {  127} }, // LE   
    { {     307}, {  128} }, // GE   
    { {     124}, {  129} }, // '|'  
    { {       0}, { -124} },         
};

SR__ s_226[] =
{
    { { REQ_DEF}, {   15} },         
    { {      43}, {  116} }, // '+'  
    { {      45}, {  117} }, // '-'  
    { {      42}, {  118} }, // '*'  
    { {      47}, {  119} }, // '/'  
    { {      37}, {  120} }, // '%'  
    { {     302}, {  121} }, // B_AND
    { {     301}, {  122} }, // OR   
    { {     303}, {  123} }, // EQ   
    { {     305}, {  124} }, // LT   
    { {     308}, {  125} }, // GT   
    { {     304}, {  126} }, // NE   
    { {     306}, {  127} }, // LE   
    { {     307}, {  128} }, // GE   
    { {     124}, {  129} }, // '|'  
    { {       0}, { -125} },         
};

SR__ s_227[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        59}, { 242} }, // ';'
    { {         0}, {   0} },       
};

SR__ s_228[] =
{
    { { REQ_TOKEN}, {  13} },             
    { {       375}, { 243} }, // port_decl
    { {       403}, { 207} }, // type     
    { {       263}, {  18} }, // PARTY    
    { {       259}, {  19} }, // INTEGER  
    { {       278}, {  20} }, // SESSION  
    { {       279}, {  21} }, // UNKNOWN  
    { {       280}, {  22} }, // PORT     
    { {       281}, {  23} }, // INPORT   
    { {       282}, {  24} }, // OUTPORT  
    { {       295}, {  25} }, // BOOL     
    { {       260}, {  26} }, // FIELD    
    { {       258}, {  27} }, // NAME     
    { {         0}, {   0} },             
};

SR__ s_229[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -16} }, 
};

SR__ s_230[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {       123}, { 244} }, // '{'
    { {         0}, {   0} },       
};

SR__ s_231[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -12} }, 
};

SR__ s_232[] =
{
    { { REQ_TOKEN}, {  14} },                  
    { {       374}, { 245} }, // port_decl_list
    { {       375}, { 206} }, // port_decl     
    { {       403}, { 207} }, // type          
    { {       263}, {  18} }, // PARTY         
    { {       259}, {  19} }, // INTEGER       
    { {       278}, {  20} }, // SESSION       
    { {       279}, {  21} }, // UNKNOWN       
    { {       280}, {  22} }, // PORT          
    { {       281}, {  23} }, // INPORT        
    { {       282}, {  24} }, // OUTPORT       
    { {       295}, {  25} }, // BOOL          
    { {       260}, {  26} }, // FIELD         
    { {       258}, {  27} }, // NAME          
    { {         0}, {   0} },                  
};

SR__ s_233[] =
{
    { { REQ_DEF}, {    2} },        
    { {     312}, {  246} }, // ELSE
    { {       0}, { -126} },        
};

SR__ s_234[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -129} }, 
};

SR__ s_235[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -85} }, 
};

SR__ s_236[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -86} }, 
};

SR__ s_237[] =
{
    { { REQ_TOKEN}, {  20} },                  
    { {       381}, { 247} }, // exp           
    { {        45}, {  85} }, // '-'           
    { {       310}, {  86} }, // NOT           
    { {        40}, {  87} }, // '('           
    { {       379}, { 110} }, // term          
    { {       414}, {  88} }, // exp_list      
    { {       417}, {  34} }, // variable      
    { {        35}, {  35} }, // '#'           
    { {        64}, {  36} }, // '@'           
    { {       270}, {  37} }, // RAND          
    { {       418}, {  38} }, // constant      
    { {       266}, {  39} }, // ENV           
    { {       265}, {  40} }, // IDEAL         
    { {       294}, {  41} }, // RAND_PORT     
    { {       293}, {  42} }, // ENV_PORT      
    { {       299}, {  43} }, // DOUBLE_DOT    
    { {       123}, { 112} }, // '{'           
    { {       258}, {  44} }, // NAME          
    { {       257}, {  45} }, // INTEGER_NUMBER
    { {         0}, {   0} },                  
};

SR__ s_238[] =
{
    { { REQ_DEF}, {   5} },               
    { {     399}, { 248} }, // opt_id_list
    { {     400}, { 249} }, // id_list    
    { {     417}, { 250} }, // variable   
    { {     258}, {  44} }, // NAME       
    { {       0}, { -98} },               
};

SR__ s_239[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -135} }, 
};

SR__ s_240[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -9} }, 
};

SR__ s_241[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -120} }, 
};

SR__ s_242[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -92} }, 
};

SR__ s_243[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -15} }, 
};

SR__ s_244[] =
{
    { { ERR_REQ_DEF}, {  67} },                         
    { {         384}, { 251} }, // statement_list       
    { {         385}, {  48} }, // statement            
    { {         391}, {  49} }, // assignment_statement 
    { {         392}, {  50} }, // mult_statement       
    { {         393}, {  51} }, // pvt_statement        
    { {         394}, {  52} }, // with_statement       
    { {         395}, {  53} }, // send_statement       
    { {         396}, {  54} }, // session_call         
    { {         401}, {  55} }, // tying_statement      
    { {         402}, {  56} }, // declaration_statement
    { {         366}, {  57} }, // protocol             
    { {         406}, {  58} }, // loop_statement       
    { {         410}, {  59} }, // cond_statement       
    { {         387}, {  60} }, // wrap_statement       
    { {         412}, {  61} }, // connect_statement    
    { {         386}, {  62} }, // abort_statement      
    { {         389}, {  63} }, // seq_statement        
    { {         388}, {  64} }, // start_statement      
    { {         411}, {  65} }, // set_statement        
    { {         416}, {  66} }, // forward_statement    
    { {     _error_}, {  67} }, // _error_              
    { {         379}, {  68} }, // term                 
    { {         123}, {  69} }, // '{'                  
    { {         267}, {  70} }, // IN                   
    { {         297}, {  71} }, // WITH                 
    { {         381}, {  72} }, // exp                  
    { {         397}, {  73} }, // opt_partial          
    { {         403}, {  74} }, // type                 
    { {         369}, {   4} }, // prot_decl            
    { {         283}, {  75} }, // FOR                  
    { {         287}, {  76} }, // IF                   
    { {         273}, {  77} }, // WRAP                 
    { {         289}, {  78} }, // CONNECT              
    { {         272}, {  79} }, // ABORTING             
    { {         275}, {  80} }, // BEFORE               
    { {         276}, {  81} }, // AFTER                
    { {         274}, {  82} }, // START                
    { {         288}, {  83} }, // SET                  
    { {         291}, {  84} }, // FORWARD              
    { {         417}, {  34} }, // variable             
    { {          35}, {  35} }, // '#'                  
    { {          64}, {  36} }, // '@'                  
    { {         270}, {  37} }, // RAND                 
    { {         418}, {  38} }, // constant             
    { {         266}, {  39} }, // ENV                  
    { {         265}, {  40} }, // IDEAL                
    { {         294}, {  41} }, // RAND_PORT            
    { {         293}, {  42} }, // ENV_PORT             
    { {         299}, {  43} }, // DOUBLE_DOT           
    { {          45}, {  85} }, // '-'                  
    { {         310}, {  86} }, // NOT                  
    { {          40}, {  87} }, // '('                  
    { {         414}, {  88} }, // exp_list             
    { {         296}, {  89} }, // PARTIAL              
    { {         263}, {  18} }, // PARTY                
    { {         259}, {  19} }, // INTEGER              
    { {         278}, {  20} }, // SESSION              
    { {         279}, {  21} }, // UNKNOWN              
    { {         280}, {  22} }, // PORT                 
    { {         281}, {  23} }, // INPORT               
    { {         282}, {  24} }, // OUTPORT              
    { {         295}, {  25} }, // BOOL                 
    { {         260}, {  26} }, // FIELD                
    { {         258}, {  90} }, // NAME                 
    { {         261}, {   5} }, // PROTOCOL             
    { {         257}, {  45} }, // INTEGER_NUMBER       
    { {           0}, { -95} },                         
};

SR__ s_245[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {       125}, { 252} }, // '}'
    { {        44}, { 228} }, // ','
    { {         0}, {   0} },       
};

SR__ s_246[] =
{
    { { ERR_REQ_DEF}, {  66} },                         
    { {         385}, { 253} }, // statement            
    { {         391}, {  49} }, // assignment_statement 
    { {         392}, {  50} }, // mult_statement       
    { {         393}, {  51} }, // pvt_statement        
    { {         394}, {  52} }, // with_statement       
    { {         395}, {  53} }, // send_statement       
    { {         396}, {  54} }, // session_call         
    { {         401}, {  55} }, // tying_statement      
    { {         402}, {  56} }, // declaration_statement
    { {         366}, {  57} }, // protocol             
    { {         406}, {  58} }, // loop_statement       
    { {         410}, {  59} }, // cond_statement       
    { {         387}, {  60} }, // wrap_statement       
    { {         412}, {  61} }, // connect_statement    
    { {         386}, {  62} }, // abort_statement      
    { {         389}, {  63} }, // seq_statement        
    { {         388}, {  64} }, // start_statement      
    { {         411}, {  65} }, // set_statement        
    { {         416}, {  66} }, // forward_statement    
    { {     _error_}, {  67} }, // _error_              
    { {         379}, {  68} }, // term                 
    { {         123}, {  69} }, // '{'                  
    { {         267}, {  70} }, // IN                   
    { {         297}, {  71} }, // WITH                 
    { {         381}, {  72} }, // exp                  
    { {         397}, {  73} }, // opt_partial          
    { {         403}, {  74} }, // type                 
    { {         369}, {   4} }, // prot_decl            
    { {         283}, {  75} }, // FOR                  
    { {         287}, {  76} }, // IF                   
    { {         273}, {  77} }, // WRAP                 
    { {         289}, {  78} }, // CONNECT              
    { {         272}, {  79} }, // ABORTING             
    { {         275}, {  80} }, // BEFORE               
    { {         276}, {  81} }, // AFTER                
    { {         274}, {  82} }, // START                
    { {         288}, {  83} }, // SET                  
    { {         291}, {  84} }, // FORWARD              
    { {         417}, {  34} }, // variable             
    { {          35}, {  35} }, // '#'                  
    { {          64}, {  36} }, // '@'                  
    { {         270}, {  37} }, // RAND                 
    { {         418}, {  38} }, // constant             
    { {         266}, {  39} }, // ENV                  
    { {         265}, {  40} }, // IDEAL                
    { {         294}, {  41} }, // RAND_PORT            
    { {         293}, {  42} }, // ENV_PORT             
    { {         299}, {  43} }, // DOUBLE_DOT           
    { {          45}, {  85} }, // '-'                  
    { {         310}, {  86} }, // NOT                  
    { {          40}, {  87} }, // '('                  
    { {         414}, {  88} }, // exp_list             
    { {         296}, {  89} }, // PARTIAL              
    { {         263}, {  18} }, // PARTY                
    { {         259}, {  19} }, // INTEGER              
    { {         278}, {  20} }, // SESSION              
    { {         279}, {  21} }, // UNKNOWN              
    { {         280}, {  22} }, // PORT                 
    { {         281}, {  23} }, // INPORT               
    { {         282}, {  24} }, // OUTPORT              
    { {         295}, {  25} }, // BOOL                 
    { {         260}, {  26} }, // FIELD                
    { {         258}, {  90} }, // NAME                 
    { {         261}, {   5} }, // PROTOCOL             
    { {         257}, {  45} }, // INTEGER_NUMBER       
    { {           0}, { -95} },                         
};

SR__ s_247[] =
{
    { { REQ_TOKEN}, {  16} },         
    { {        59}, { 254} }, // ';'  
    { {        43}, { 116} }, // '+'  
    { {        45}, { 117} }, // '-'  
    { {        42}, { 118} }, // '*'  
    { {        47}, { 119} }, // '/'  
    { {        37}, { 120} }, // '%'  
    { {       302}, { 121} }, // B_AND
    { {       301}, { 122} }, // OR   
    { {       303}, { 123} }, // EQ   
    { {       305}, { 124} }, // LT   
    { {       308}, { 125} }, // GT   
    { {       304}, { 126} }, // NE   
    { {       306}, { 127} }, // LE   
    { {       307}, { 128} }, // GE   
    { {       124}, { 129} }, // '|'  
    { {         0}, {   0} },         
};

SR__ s_248[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 255} }, // ')'
    { {         0}, {   0} },       
};

SR__ s_249[] =
{
    { { REQ_DEF}, {   2} },       
    { {      44}, { 256} }, // ','
    { {       0}, { -99} },       
};

SR__ s_250[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -100} }, 
};

SR__ s_251[] =
{
    { { ERR_REQ_DEF}, {  67} },                         
    { {         125}, { 257} }, // '}'                  
    { {         385}, {  99} }, // statement            
    { {         391}, {  49} }, // assignment_statement 
    { {         392}, {  50} }, // mult_statement       
    { {         393}, {  51} }, // pvt_statement        
    { {         394}, {  52} }, // with_statement       
    { {         395}, {  53} }, // send_statement       
    { {         396}, {  54} }, // session_call         
    { {         401}, {  55} }, // tying_statement      
    { {         402}, {  56} }, // declaration_statement
    { {         366}, {  57} }, // protocol             
    { {         406}, {  58} }, // loop_statement       
    { {         410}, {  59} }, // cond_statement       
    { {         387}, {  60} }, // wrap_statement       
    { {         412}, {  61} }, // connect_statement    
    { {         386}, {  62} }, // abort_statement      
    { {         389}, {  63} }, // seq_statement        
    { {         388}, {  64} }, // start_statement      
    { {         411}, {  65} }, // set_statement        
    { {         416}, {  66} }, // forward_statement    
    { {     _error_}, {  67} }, // _error_              
    { {         379}, {  68} }, // term                 
    { {         123}, {  69} }, // '{'                  
    { {         267}, {  70} }, // IN                   
    { {         297}, {  71} }, // WITH                 
    { {         381}, {  72} }, // exp                  
    { {         397}, {  73} }, // opt_partial          
    { {         403}, {  74} }, // type                 
    { {         369}, {   4} }, // prot_decl            
    { {         283}, {  75} }, // FOR                  
    { {         287}, {  76} }, // IF                   
    { {         273}, {  77} }, // WRAP                 
    { {         289}, {  78} }, // CONNECT              
    { {         272}, {  79} }, // ABORTING             
    { {         275}, {  80} }, // BEFORE               
    { {         276}, {  81} }, // AFTER                
    { {         274}, {  82} }, // START                
    { {         288}, {  83} }, // SET                  
    { {         291}, {  84} }, // FORWARD              
    { {         417}, {  34} }, // variable             
    { {          35}, {  35} }, // '#'                  
    { {          64}, {  36} }, // '@'                  
    { {         270}, {  37} }, // RAND                 
    { {         418}, {  38} }, // constant             
    { {         266}, {  39} }, // ENV                  
    { {         265}, {  40} }, // IDEAL                
    { {         294}, {  41} }, // RAND_PORT            
    { {         293}, {  42} }, // ENV_PORT             
    { {         299}, {  43} }, // DOUBLE_DOT           
    { {          45}, {  85} }, // '-'                  
    { {         310}, {  86} }, // NOT                  
    { {          40}, {  87} }, // '('                  
    { {         414}, {  88} }, // exp_list             
    { {         296}, {  89} }, // PARTIAL              
    { {         263}, {  18} }, // PARTY                
    { {         259}, {  19} }, // INTEGER              
    { {         278}, {  20} }, // SESSION              
    { {         279}, {  21} }, // UNKNOWN              
    { {         280}, {  22} }, // PORT                 
    { {         281}, {  23} }, // INPORT               
    { {         282}, {  24} }, // OUTPORT              
    { {         295}, {  25} }, // BOOL                 
    { {         260}, {  26} }, // FIELD                
    { {         258}, {  90} }, // NAME                 
    { {         261}, {   5} }, // PROTOCOL             
    { {         257}, {  45} }, // INTEGER_NUMBER       
    { {           0}, { -95} },                         
};

SR__ s_252[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -13} }, 
};

SR__ s_253[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -127} }, 
};

SR__ s_254[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -128} }, 
};

SR__ s_255[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -97} }, 
};

SR__ s_256[] =
{
    { { REQ_TOKEN}, {   3} },            
    { {       417}, { 258} }, // variable
    { {       258}, {  44} }, // NAME    
    { {         0}, {   0} },            
};

SR__ s_257[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -94} }, 
};

SR__ s_258[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -101} }, 
};


// State array:
SR__ *s_state[] =
{
  s_0,  s_1,  s_2,  s_3,  s_4,  s_5,  s_6,  s_7,  s_8,  s_9,
  s_10,  s_11,  s_12,  s_13,  s_14,  s_15,  s_16,  s_17,  s_18,  s_19,
  s_20,  s_21,  s_22,  s_23,  s_24,  s_25,  s_26,  s_27,  s_28,  s_29,
  s_30,  s_31,  s_32,  s_33,  s_34,  s_35,  s_36,  s_37,  s_38,  s_39,
  s_40,  s_41,  s_42,  s_43,  s_44,  s_45,  s_46,  s_47,  s_48,  s_49,
  s_50,  s_51,  s_52,  s_53,  s_54,  s_55,  s_56,  s_57,  s_58,  s_59,
  s_60,  s_61,  s_62,  s_63,  s_64,  s_65,  s_66,  s_67,  s_68,  s_69,
  s_70,  s_71,  s_72,  s_73,  s_74,  s_75,  s_76,  s_77,  s_78,  s_79,
  s_80,  s_81,  s_82,  s_83,  s_84,  s_85,  s_86,  s_87,  s_88,  s_89,
  s_90,  s_91,  s_92,  s_93,  s_94,  s_95,  s_96,  s_97,  s_98,  s_99,
  s_100,  s_101,  s_102,  s_103,  s_104,  s_105,  s_106,  s_107,  s_108,  s_109,
  s_110,  s_111,  s_112,  s_113,  s_114,  s_115,  s_116,  s_117,  s_118,  s_119,
  s_120,  s_121,  s_122,  s_123,  s_124,  s_125,  s_126,  s_127,  s_128,  s_129,
  s_130,  s_131,  s_132,  s_133,  s_134,  s_135,  s_136,  s_137,  s_138,  s_139,
  s_140,  s_141,  s_142,  s_143,  s_144,  s_145,  s_146,  s_147,  s_148,  s_149,
  s_150,  s_151,  s_152,  s_153,  s_154,  s_155,  s_156,  s_157,  s_158,  s_159,
  s_160,  s_161,  s_162,  s_163,  s_164,  s_165,  s_166,  s_167,  s_168,  s_169,
  s_170,  s_171,  s_172,  s_173,  s_174,  s_175,  s_176,  s_177,  s_178,  s_179,
  s_180,  s_181,  s_182,  s_183,  s_184,  s_185,  s_186,  s_187,  s_188,  s_189,
  s_190,  s_191,  s_192,  s_193,  s_194,  s_195,  s_196,  s_197,  s_198,  s_199,
  s_200,  s_201,  s_202,  s_203,  s_204,  s_205,  s_206,  s_207,  s_208,  s_209,
  s_210,  s_211,  s_212,  s_213,  s_214,  s_215,  s_216,  s_217,  s_218,  s_219,
  s_220,  s_221,  s_222,  s_223,  s_224,  s_225,  s_226,  s_227,  s_228,  s_229,
  s_230,  s_231,  s_232,  s_233,  s_234,  s_235,  s_236,  s_237,  s_238,  s_239,
  s_240,  s_241,  s_242,  s_243,  s_244,  s_245,  s_246,  s_247,  s_248,  s_249,
  s_250,  s_251,  s_252,  s_253,  s_254,  s_255,  s_256,  s_257,  s_258,
};

} // anonymous namespace ends




// If the parsing function call uses arguments, then provide an overloaded
// function.  The code below doesn't rely on parameters, so no arguments are
// required.  Furthermore, parse uses a function try block to allow us to do
// ACCEPT and ABORT from anywhere, even from within members called by actions,
// simply throwing the appropriate exceptions.

ParserBase::ParserBase()
:
    // $insert requiredtokens
    d_requiredTokens__(0),
    d_acceptedTokens__(d_requiredTokens__),
    d_token__(_UNDETERMINED_),
    d_nextToken__(_UNDETERMINED_)
{}


void ParserBase::setDebug(bool mode)
{
    d_actionCases__ = false;
    d_debug__ = mode;
}

void ParserBase::setDebug(DebugMode__ mode)
{
    d_actionCases__ = mode & ACTIONCASES;
    d_debug__ =       mode & ON;
}

void Parser::print__()
{
// $insert print
}

void ParserBase::clearin()
{
    d_token__ = d_nextToken__ = _UNDETERMINED_;
}

void ParserBase::push__(size_t state)
{
    size_t currentSize = d_stateStack__.size();
    if (static_cast<size_t>(d_stackIdx__ + 1) == currentSize)
    {
        size_t newSize = currentSize + STACK_EXPANSION__;
        d_stateStack__.resize(newSize);
        if (d_valueStack__.capacity() >= newSize)
            d_valueStack__.resize(newSize);
        else
        {
            std::vector<STYPE__> enlarged(newSize);
            for (size_t idx = 0; idx != currentSize; ++idx)
                enlarged[idx] = std::move(d_valueStack__[idx]);
            d_valueStack__.swap(enlarged);
        }
    }
    ++d_stackIdx__;
    d_stateStack__[d_stackIdx__] = d_state__ = state;
    *(d_vsp__ = &d_valueStack__[d_stackIdx__]) = std::move(d_val__);
}

void ParserBase::popToken__()
{
    d_token__ = d_nextToken__;

    d_val__ = std::move(d_nextVal__);
    d_nextVal__ = STYPE__();

    d_nextToken__ = _UNDETERMINED_;
}
     
void ParserBase::pushToken__(int token)
{
    d_nextToken__ = d_token__;
    d_nextVal__ = std::move(d_val__);
    d_token__ = token;
}
     
void ParserBase::pop__(size_t count)
{
    if (d_stackIdx__ < static_cast<int>(count))
    {
        ABORT();
    }

    d_stackIdx__ -= count;
    d_state__ = d_stateStack__[d_stackIdx__];
    d_vsp__ = &d_valueStack__[d_stackIdx__];
}

inline size_t ParserBase::top__() const
{
    return d_stateStack__[d_stackIdx__];
}

void Parser::executeAction(int production)
try
{
    if (d_token__ != _UNDETERMINED_)
        pushToken__(d_token__);     // save an already available token

    switch (production)
    {
        // $insert actioncases
        
        case 1:
#line 139 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         
         
         }
         }
        break;

        case 2:
#line 150 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         
         }
         }
        break;

        case 3:
#line 158 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         
         }
         }
        break;

        case 4:
#line 183 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[-1].sequence_ast != NULL), "Statement list cannot be null");
         Protocol_Ast * protocol = new Protocol_Ast( (Protocol_Decl_Ast*)d_vsp__[-6].ast, d_vsp__[-3].ast_list, d_vsp__[-1].sequence_ast, get_line_number());
         program_object.add_protocol(protocol, ((Protocol_Decl_Ast*)d_vsp__[-6].ast)->get_protocol_name(), get_line_number());
         d_val__.ast = protocol;
         }
         }
        break;

        case 5:
#line 169 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[-1].ast != NULL), "Protocol declaration cannot be null");
         }
         }
        break;

        case 6:
#line 176 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         
         }
         }
        break;

        case 7:
#line 196 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[-6].string_value != NULL), "Protocol name cannot be null");
         CHECK_INVARIANT((d_vsp__[-4].ast_list != NULL), "Argument list cannot be null");
         CHECK_INVARIANT((d_vsp__[0].ast_list != NULL), "Party list cannot be null"); 
         Ast * protocol_decl = new Protocol_Decl_Ast(*d_vsp__[-6].string_value, d_vsp__[-4].ast_list, d_vsp__[0].ast_list, get_line_number());
         d_val__.ast = protocol_decl;
         }
         }
        break;

        case 8:
#line 210 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[0].ast != NULL), "Party element cannot be null");
         list<Ast*>* party_list = new list<Ast*>();
         party_list->push_back(d_vsp__[0].ast);
         d_val__.ast_list = party_list;
         }
         }
        break;

        case 9:
#line 221 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[-2].ast_list != NULL), "Party element cannot be null");
         CHECK_INVARIANT((d_vsp__[0].ast != NULL), "Party list cannot be null");
         list<Ast*>* party_list = d_vsp__[-2].ast_list;
         party_list->push_back(d_vsp__[0].ast);
         d_val__.ast_list = party_list; 
         }
         }
        break;

        case 10:
#line 235 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[-1].ast != NULL), "Party expression cannot be null"); 
         bool port_clause_exists = (d_vsp__[0].opt_port!=NULL);
         bool each_present;
         list<pair<pair<Data_Type, string> *, Ast*> *> * seq = NULL;
         if(port_clause_exists)
         {
         each_present = d_vsp__[0].opt_port->first;
         seq = d_vsp__[0].opt_port->second;
         }
         Ast * port_ast = new Port_Clause_Ast(d_vsp__[-1].ast, port_clause_exists, each_present, seq, get_line_number());
         d_val__.ast = port_ast;
         }
         }
        break;

        case 11:
#line 254 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         d_val__.opt_port = NULL;
         }
         }
        break;

        case 12:
#line 262 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[0].port_list!=NULL),"Port clause cannot ne null");
         pair<bool, list<pair<pair<Data_Type, string> *, Ast*> *> *> *seq = new pair<bool, list<pair<pair<Data_Type, string> *, Ast*> *> *>(d_vsp__[-2].boolean_value,d_vsp__[0].port_list);
         d_val__.opt_port = seq;
         }
         }
        break;

        case 13:
#line 274 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[-1].port_list!=NULL),"Port declaration list cannot be null");
         d_val__.port_list = d_vsp__[-1].port_list;
         }
         }
        break;

        case 14:
#line 304 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[0].port != NULL), "Statement cannot be null");
         list<pair<pair<Data_Type, string> *, Ast*> *> * statement_list = new list<pair<pair<Data_Type, string> *, Ast*> *>();
         statement_list->push_back(d_vsp__[0].port);
         d_val__.port_list = statement_list;
         }
         }
        break;

        case 15:
#line 315 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[-2].port_list != NULL), "Statement list cannot be null"); 
         CHECK_INVARIANT((d_vsp__[0].port != NULL), "Statement cannot be null"); 
         list<pair<pair<Data_Type, string> *, Ast*> *> * statement_list = d_vsp__[-2].port_list;
         statement_list->push_back(d_vsp__[0].port);
         d_val__.port_list = statement_list;
         }
         }
        break;

        case 16:
#line 329 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[-1].type != NULL), "Type cannot be null"); 
         CHECK_INVARIANT((d_vsp__[0].ast != NULL), "Term cannot be null");
         pair<Data_Type, string> * type = d_vsp__[-1].type;
         pair<pair<Data_Type, string> *, Ast*> * ass_ast = new pair<pair<Data_Type, string> *, Ast*>(type, d_vsp__[0].ast);
         d_val__.port = ass_ast;
         }
         }
        break;

        case 17:
#line 345 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         list<Ast*>* arg_list = new list<Ast*>();
         d_val__.ast_list = arg_list;
         }
         }
        break;

        case 18:
#line 354 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT( (d_vsp__[0].ast_list!=NULL), "Argument list cannot be null");
         d_val__.ast_list = d_vsp__[0].ast_list;
         }
         }
        break;

        case 19:
#line 365 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT( (d_vsp__[0].ast!=NULL), "Argument cannot be null");
         list<Ast*>* arg_list = new list<Ast*>();
         arg_list->push_back(d_vsp__[0].ast);
         d_val__.ast_list = arg_list;
         }
         }
        break;

        case 20:
#line 376 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT( (d_vsp__[0].ast!=NULL), "Argument cannot be null");
         CHECK_INVARIANT( (d_vsp__[-2].ast_list!=NULL), "Argument list cannot be null");
         list<Ast*>* arg_list = d_vsp__[-2].ast_list;
         arg_list->push_back(d_vsp__[0].ast);
         d_val__.ast_list = arg_list;
         }
         }
        break;

        case 21:
#line 390 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[-1].type != NULL), "Type cannot be null"); 
         CHECK_INVARIANT((d_vsp__[0].ast != NULL), "Term cannot be null");
         Ast* arg = new Argument_Ast(d_vsp__[0].ast, d_vsp__[-1].type->first, d_vsp__[-1].type->second, get_line_number());
         d_val__.ast = arg;
         }
         }
        break;

        case 22:
#line 401 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[-1].ast != NULL), "Protocol declaration cannot be null"); 
         d_val__.ast = new Prot_Arg_Ast(d_vsp__[-1].ast, get_line_number());
         }
         }
        break;

        case 23:
#line 412 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[-1].ast != NULL), "Variable cannot be null in term");
         CHECK_INVARIANT((d_vsp__[0].ast_list != NULL), "Dimlist cannot be null in term");
         Ast* name_ast = d_vsp__[-1].ast;
         list<Ast*> *dim = d_vsp__[0].ast_list;
         d_val__.ast = new Term_Ast(name_ast, dim, variable, get_line_number());
         }
         }
        break;

        case 24:
#line 424 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[0].ast != NULL), "Variable cannot be null in term");
         Ast* name_ast = d_vsp__[0].ast;
         list<Ast*> *dim = NULL;
         d_val__.ast = new Term_Ast(name_ast, dim, iterator_variable, get_line_number());
         }
         }
        break;

        case 25:
#line 435 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         list<Ast*> *dim = NULL;
         d_val__.ast = new Term_Ast(NULL, dim, wrapper, get_line_number());
         }
         }
        break;

        case 26:
#line 444 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         list<Ast*> *dim = NULL;
         d_val__.ast = new Term_Ast(NULL, dim, random_sample, get_line_number());
         }
         }
        break;

        case 27:
#line 453 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[0].ast != NULL), "Constant cannot be null in term");
         Ast* name_ast = d_vsp__[0].ast;
         list<Ast*> *dim = NULL;
         d_val__.ast = new Term_Ast(name_ast, dim, constant, get_line_number());
         }
         }
        break;

        case 28:
#line 464 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         list<Ast*> *dim = NULL;
         d_val__.ast = new Term_Ast(NULL, dim, environment, get_line_number());
         }
         }
        break;

        case 29:
#line 473 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         list<Ast*> *dim = NULL;
         d_val__.ast = new Term_Ast(NULL, dim, ideal, get_line_number());
         }
         }
        break;

        case 30:
#line 482 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         list<Ast*> *dim = NULL;
         d_val__.ast = new Term_Ast(NULL, dim, rand_port, get_line_number());
         }
         }
        break;

        case 31:
#line 491 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         list<Ast*> *dim = NULL;
         d_val__.ast = new Term_Ast(NULL, dim, env_port, get_line_number());
         }
         }
        break;

        case 32:
#line 500 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         list<Ast*> *dim = NULL;
         d_val__.ast = new Term_Ast(NULL, dim, double_dot, get_line_number());
         }
         }
        break;

        case 33:
#line 510 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         list<Ast *> *dim_list = new list<Ast *>();
         d_val__.ast_list = dim_list;
         }
         }
        break;

        case 34:
#line 519 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[-1].ast != NULL), "Exp cannot be null in dimlist");
         CHECK_INVARIANT((d_vsp__[-3].ast_list != NULL), "Dimlist cannot be null");
         d_vsp__[-3].ast_list->push_back(d_vsp__[-1].ast);
         
         d_val__.ast_list = d_vsp__[-3].ast_list;
         }
         }
        break;

        case 35:
#line 531 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[-2].ast_list != NULL), "Dimlist cannot be null");
         d_vsp__[-2].ast_list->push_back(NULL);
         
         d_val__.ast_list = d_vsp__[-2].ast_list;
         }
         }
        break;

        case 36:
#line 544 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[-2].ast != NULL) && (d_vsp__[0].ast != NULL)), "lhs/rhs cannot be null");
         Ast * op1 = d_vsp__[-2].ast;
         Ast * op2 = d_vsp__[0].ast;
         Ast * pl_ast = new Plus_Ast(op1, op2, get_line_number());
         d_val__.ast = pl_ast;
         }
         }
        break;

        case 37:
#line 558 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[-2].ast != NULL) && (d_vsp__[0].ast != NULL)), "lhs/rhs cannot be null");
         Ast * op1 = d_vsp__[-2].ast;
         Ast * op2 = d_vsp__[0].ast;
         Ast * pl_ast = new Minus_Ast(op1, op2, get_line_number());
         d_val__.ast = pl_ast;
         }
         }
        break;

        case 38:
#line 572 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[-2].ast != NULL) && (d_vsp__[0].ast != NULL)), "lhs/rhs cannot be null");
         Ast * op1 = d_vsp__[-2].ast;
         Ast * op2 = d_vsp__[0].ast;
         Ast * pl_ast = new Mult_Ast(op1, op2, get_line_number());
         d_val__.ast = pl_ast;
         }
         }
        break;

        case 39:
#line 586 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[-2].ast != NULL) && (d_vsp__[0].ast != NULL)), "lhs/rhs cannot be null");
         Ast * op1 = d_vsp__[-2].ast;
         Ast * op2 = d_vsp__[0].ast;
         Ast * pl_ast = new Divide_Ast(op1, op2, get_line_number());
         d_val__.ast = pl_ast;
         }
         }
        break;

        case 40:
#line 600 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[-2].ast != NULL) && (d_vsp__[0].ast != NULL)), "lhs/rhs cannot be null");
         Ast * op1 = d_vsp__[-2].ast;
         Ast * op2 = d_vsp__[0].ast;
         Ast * pl_ast = new Modulo_Ast(op1, op2, get_line_number());
         d_val__.ast = pl_ast;
         }
         }
        break;

        case 41:
#line 614 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[0].ast != NULL)), "lhs cannot be null");
         Ast * op1 = d_vsp__[0].ast;
         Ast * um_ast = new UMinus_Ast(op1, NULL, get_line_number());
         d_val__.ast = um_ast;
         }
         }
        break;

        case 42:
#line 627 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[-2].ast != NULL) && (d_vsp__[0].ast != NULL)), "lhs/rhs cannot be null");
         Ast * op1 = d_vsp__[-2].ast;
         Ast * op2 = d_vsp__[0].ast;
         Ast * pl_ast = new Boolean_Expr_Ast(op1, boolean_and, op2, get_line_number());
         d_val__.ast = pl_ast;
         }
         }
        break;

        case 43:
#line 641 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[-2].ast != NULL) && (d_vsp__[0].ast != NULL)), "lhs/rhs cannot be null");
         Ast * op1 = d_vsp__[-2].ast;
         Ast * op2 = d_vsp__[0].ast;
         Ast * pl_ast = new Boolean_Expr_Ast(op1, boolean_or, op2, get_line_number());
         d_val__.ast = pl_ast;
         }
         }
        break;

        case 44:
#line 655 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[0].ast != NULL)), "lhs cannot be null");
         Ast * op1 = d_vsp__[0].ast;
         Ast * pl_ast = new Boolean_Expr_Ast(op1, boolean_not, NULL, get_line_number());
         d_val__.ast = pl_ast;
         }
         }
        break;

        case 45:
#line 668 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[-2].ast != NULL) && (d_vsp__[0].ast != NULL)), "lhs/rhs cannot be null");
         Ast * op1 = d_vsp__[-2].ast;
         Ast * op2 = d_vsp__[0].ast;
         Ast * pl_ast = new Relational_Expr_Ast(op1, equalto, op2, get_line_number());
         d_val__.ast = pl_ast;
         }
         }
        break;

        case 46:
#line 682 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[-2].ast != NULL) && (d_vsp__[0].ast != NULL)), "lhs/rhs cannot be null");
         Ast * op1 = d_vsp__[-2].ast;
         Ast * op2 = d_vsp__[0].ast;
         Ast * pl_ast = new Relational_Expr_Ast(op1, less_than, op2, get_line_number());
         d_val__.ast = pl_ast;
         }
         }
        break;

        case 47:
#line 696 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[-2].ast != NULL) && (d_vsp__[0].ast != NULL)), "lhs/rhs cannot be null");
         Ast * op1 = d_vsp__[-2].ast;
         Ast * op2 = d_vsp__[0].ast;
         Ast * pl_ast = new Relational_Expr_Ast(op1, greater_than, op2, get_line_number());
         d_val__.ast = pl_ast;
         }
         }
        break;

        case 48:
#line 710 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[-2].ast != NULL) && (d_vsp__[0].ast != NULL)), "lhs/rhs cannot be null");
         Ast * op1 = d_vsp__[-2].ast;
         Ast * op2 = d_vsp__[0].ast;
         Ast * pl_ast = new Relational_Expr_Ast(op1, not_equalto, op2, get_line_number());
         d_val__.ast = pl_ast;
         }
         }
        break;

        case 49:
#line 724 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[-2].ast != NULL) && (d_vsp__[0].ast != NULL)), "lhs/rhs cannot be null");
         Ast * op1 = d_vsp__[-2].ast;
         Ast * op2 = d_vsp__[0].ast;
         Ast * pl_ast = new Relational_Expr_Ast(op1, less_equalto, op2, get_line_number());
         d_val__.ast = pl_ast;
         }
         }
        break;

        case 50:
#line 738 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[-2].ast != NULL) && (d_vsp__[0].ast != NULL)), "lhs/rhs cannot be null");
         Ast * op1 = d_vsp__[-2].ast;
         Ast * op2 = d_vsp__[0].ast;
         Ast * pl_ast = new Relational_Expr_Ast(op1, greater_equalto, op2, get_line_number());
         d_val__.ast = pl_ast;
         }
         }
        break;

        case 51:
#line 752 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[-1].ast != NULL), "Operand cannot be null");
         d_val__.ast = d_vsp__[-1].ast;
         }
         }
        break;

        case 52:
#line 761 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[-2].ast != NULL) && (d_vsp__[0].ast != NULL)), "lhs/rhs cannot be null");
         Ast * op1 = d_vsp__[-2].ast;
         Ast * op2 = d_vsp__[0].ast;
         Ast * pl_ast = new Port_Expr_Ast(op1, op2, get_line_number());
         d_val__.ast = pl_ast;
         }
         }
        break;

        case 53:
#line 775 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[-2].ast != NULL) && (d_vsp__[0].ast != NULL)), "lhs/rhs cannot be null");
         Ast * op1 = d_vsp__[-2].ast;
         Ast * op2 = d_vsp__[0].ast;
         Ast * pl_ast = new Party_Expr_Ast(op1, op2, get_line_number());
         d_val__.ast = pl_ast;
         }
         }
        break;

        case 54:
#line 789 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[-2].ast != NULL) && (d_vsp__[0].ast_list != NULL)), "lhs/rhs cannot be null");
         Ast * op1 = d_vsp__[-2].ast;
         list<Ast*> *exp_list = d_vsp__[0].ast_list;
         Ast * list_ast = new Expression_List_Ast(exp_list, get_line_number());
         Ast * pl_ast = new From_Expr_Ast(op1, list_ast, get_line_number());
         d_val__.ast = pl_ast;
         }
         }
        break;

        case 55:
#line 805 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[0].ast_list != NULL), "Exp List cannot be null");
         list<Ast*> *exp_list = d_vsp__[0].ast_list;
         Ast * pl_ast = new Expression_List_Ast(exp_list, get_line_number());
         d_val__.ast = pl_ast;
         }
         }
        break;

        case 56:
#line 817 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[0].ast != NULL), "Term cannot be null");
         d_val__.ast = d_vsp__[0].ast;
         }
         }
        break;

        case 57:
#line 828 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         d_val__.ast_list = NULL;
         }
         }
        break;

        case 58:
#line 836 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[-1].ast_list != NULL), "Declaration list cannot be null"); 
         d_val__.ast_list = d_vsp__[-1].ast_list;
         }
         }
        break;

        case 59:
#line 847 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[0].ast != NULL), "Declaration cannot be null"); 
         list<Ast*>* protocol_decl_list = new list<Ast*>();
         protocol_decl_list->push_back(d_vsp__[0].ast);
         d_val__.ast_list = protocol_decl_list;
         }
         }
        break;

        case 60:
#line 858 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[0].ast != NULL), "Declaration cannot be null"); 
         CHECK_INVARIANT((d_vsp__[-1].ast_list != NULL), "Declaration list cannot be null"); 
         list<Ast*>* protocol_decl_list = d_vsp__[-1].ast_list;
         protocol_decl_list->push_back(d_vsp__[0].ast); 
         d_val__.ast_list = protocol_decl_list;
         }
         }
        break;

        case 61:
#line 872 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[0].ast != NULL), "Statement cannot be null");
         Sequence_Ast* statement_list = new Sequence_Ast(get_line_number());
         statement_list->ast_push_back(d_vsp__[0].ast);
         d_val__.sequence_ast = statement_list;
         }
         }
        break;

        case 62:
#line 883 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[-1].sequence_ast != NULL), "Statement list cannot be null"); 
         CHECK_INVARIANT((d_vsp__[0].ast != NULL), "Statement cannot be null"); 
         Sequence_Ast* statement_list = d_vsp__[-1].sequence_ast;
         statement_list->ast_push_back(d_vsp__[0].ast);
         d_val__.sequence_ast = statement_list;
         }
         }
        break;

        case 63:
#line 897 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[0].ast != NULL)), "assignment statement is null");
         d_val__.ast = d_vsp__[0].ast;
         }
         }
        break;

        case 64:
#line 906 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[0].ast != NULL)), "mult statement is null");
         d_val__.ast = d_vsp__[0].ast;
         }
         }
        break;

        case 65:
#line 915 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[0].ast != NULL)), "pvt statement is null");
         d_val__.ast = d_vsp__[0].ast;
         }
         }
        break;

        case 66:
#line 924 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[0].ast != NULL)), "with statement is null");
         d_val__.ast = d_vsp__[0].ast;
         }
         }
        break;

        case 67:
#line 933 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[0].ast != NULL)), "send statement is null");
         d_val__.ast = d_vsp__[0].ast;
         }
         }
        break;

        case 68:
#line 942 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[0].ast != NULL)), "session_call statement is null");
         d_val__.ast = d_vsp__[0].ast;
         }
         }
        break;

        case 69:
#line 951 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[0].ast != NULL)), "tying statement is null");
         d_val__.ast = d_vsp__[0].ast;
         }
         }
        break;

        case 70:
#line 960 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[0].ast != NULL)), "declaration statement is null");
         d_val__.ast = d_vsp__[0].ast;
         }
         }
        break;

        case 71:
#line 969 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[0].ast != NULL)), "protocol statement is null");
         d_val__.ast = d_vsp__[0].ast;
         }
         }
        break;

        case 72:
#line 978 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[0].ast != NULL)), "loop statement is null");
         d_val__.ast = d_vsp__[0].ast;
         }
         }
        break;

        case 73:
#line 987 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[0].ast != NULL)), "cond statement is null");
         d_val__.ast = d_vsp__[0].ast;
         }
         }
        break;

        case 74:
#line 996 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[0].ast != NULL)), "wrap statement is null");
         d_val__.ast = d_vsp__[0].ast;
         }
         }
        break;

        case 75:
#line 1005 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[0].ast != NULL)), "connect statement is null");
         d_val__.ast = d_vsp__[0].ast;
         }
         }
        break;

        case 76:
#line 1014 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[0].ast != NULL)), "abort statement is null");
         d_val__.ast = d_vsp__[0].ast;
         }
         }
        break;

        case 77:
#line 1023 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[0].ast != NULL)), "seq statement is null");
         d_val__.ast = d_vsp__[0].ast;
         }
         }
        break;

        case 78:
#line 1032 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[0].ast != NULL)), "start statement is null");
         d_val__.ast = d_vsp__[0].ast;
         }
         }
        break;

        case 79:
#line 1041 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[0].ast != NULL)), "set statement is null");
         d_val__.ast = d_vsp__[0].ast;
         }
         }
        break;

        case 80:
#line 1050 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[0].ast != NULL)), "forward statement is null");
         d_val__.ast = d_vsp__[0].ast;
         }
         }
        break;

        case 81:
#line 1059 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         d_val__.ast = new Abort_Ast(get_line_number());
         }
         }
        break;

        case 82:
#line 1069 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         Ast * ass_ast = new Abort_Ast(get_line_number());
         d_val__.ast = ass_ast;
         }
         }
        break;

        case 83:
#line 1080 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         Ast * name_ast1 = d_vsp__[0].ast;
         Ast * ass_ast = new Wrap_Ast(name_ast1, get_line_number());
         d_val__.ast = ass_ast;
         }
         }
        break;

        case 84:
#line 1092 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         Ast * name_ast1 = d_vsp__[-1].ast;
         Ast * ass_ast = new Start_Ast(name_ast1, get_line_number());
         d_val__.ast = ass_ast;
         }
         }
        break;

        case 85:
#line 1104 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[-3].opt_each_expr != NULL), "Each Expression cannot be null");
         CHECK_INVARIANT((d_vsp__[-1].sequence_ast != NULL), "Statement cannot be null");
         Ast * name_ast1 = d_vsp__[-3].opt_each_expr->second;
         bool each = d_vsp__[-3].opt_each_expr->first;
         Ast * name_ast2 = d_vsp__[-1].sequence_ast;
         order o = before;
         Ast * ass_ast = new Seq_Ast(name_ast1, name_ast2, each, o, get_line_number());
         d_val__.ast = ass_ast;
         }
         }
        break;

        case 86:
#line 1120 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[-3].opt_each_expr != NULL), "Each Expression cannot be null");
         CHECK_INVARIANT((d_vsp__[-1].sequence_ast != NULL), "Statement cannot be null");
         Ast * name_ast1 = d_vsp__[-3].opt_each_expr->second;
         bool each = d_vsp__[-3].opt_each_expr->first;
         Ast * name_ast2 = d_vsp__[-1].sequence_ast;
         order o = after;
         Ast * ass_ast = new Seq_Ast(name_ast1, name_ast2, each, o, get_line_number());
         d_val__.ast = ass_ast;
         }
         }
        break;

        case 87:
#line 1137 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         d_val__.boolean_value = false;
         }
         }
        break;

        case 88:
#line 1145 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         d_val__.boolean_value = true;
         }
         }
        break;

        case 89:
#line 1155 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         Ast * name_ast1 = d_vsp__[-3].ast;
         Ast * name_ast2 = d_vsp__[-1].ast;
         Ast * ass_ast = new Assignment_Ast(name_ast1, name_ast2, get_line_number());
         d_val__.ast = ass_ast;
         }
         }
        break;

        case 90:
#line 1168 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         d_val__.ast = d_vsp__[-1].sequence_ast;
         }
         }
        break;

        case 91:
#line 1178 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         Ast * name_ast1 = d_vsp__[-1].sequence_ast;
         Ast * name_ast2 = d_vsp__[-3].opt_each_expr->second;
         bool each = d_vsp__[-3].opt_each_expr->first;
         Ast * ass_ast = new In_Ast(name_ast1, name_ast2, each, get_line_number());
         
         d_val__.ast = ass_ast;
         }
         }
        break;

        case 92:
#line 1194 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         list<pair<pair<Data_Type, string> *, Ast*> *> * name_ast1 = d_vsp__[-2].port_list;
         Ast * name_ast2 = d_vsp__[-4].opt_each_expr->second;
         bool each = d_vsp__[-4].opt_each_expr->first;
         Ast * ass_ast = new With_Ast(name_ast1, name_ast2, each, get_line_number());
         
         d_val__.ast = ass_ast;
         }
         }
        break;

        case 93:
#line 1210 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         Ast * name_ast1 = d_vsp__[-3].ast;
         Ast * name_ast2 = d_vsp__[-1].ast;
         Ast * ass_ast = new Send_Ast(name_ast1, name_ast2, get_line_number());
         d_val__.ast = ass_ast;
         }
         }
        break;

        case 94:
#line 1223 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         Ast * s_name = d_vsp__[-5].ast;
         Ast * seq = d_vsp__[-1].sequence_ast;
         bool partial = d_vsp__[-7].boolean_value;
         pair<string, list<Ast*>* >* p_call = d_vsp__[-3].p_call;
         Ast * ass_ast = new Session_call_Ast(s_name, seq, partial, p_call->first, p_call->second, get_line_number());
         d_val__.ast = ass_ast;
         }
         }
        break;

        case 95:
#line 1238 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         d_val__.boolean_value = false;
         }
         }
        break;

        case 96:
#line 1246 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         d_val__.boolean_value = true;
         }
         }
        break;

        case 97:
#line 1256 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT( (d_vsp__[-1].ast_list!=NULL), "Id list cannot be null");
         pair<string, list<Ast*>* >* p_call = new pair<string, list<Ast*>* >(*d_vsp__[-3].string_value, d_vsp__[-1].ast_list);
         d_val__.p_call = p_call;
         }
         }
        break;

        case 98:
#line 1267 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         list<Ast*>* arg_list = new list<Ast*>();
         d_val__.ast_list = arg_list;
         }
         }
        break;

        case 99:
#line 1276 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT( (d_vsp__[0].ast_list!=NULL), "Id list cannot be null");
         d_val__.ast_list = d_vsp__[0].ast_list;
         }
         }
        break;

        case 100:
#line 1287 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT( (d_vsp__[0].ast!=NULL), "Variable cannot be null");
         list<Ast*>* arg_list = new list<Ast*>();
         arg_list->push_back(d_vsp__[0].ast);
         d_val__.ast_list = arg_list;
         }
         }
        break;

        case 101:
#line 1298 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT( (d_vsp__[-2].ast_list!=NULL), "Argument list cannot be null");
         CHECK_INVARIANT( (d_vsp__[0].ast!=NULL), "Argument cannot be null");
         list<Ast*>* arg_list = d_vsp__[-2].ast_list;
         arg_list->push_back(d_vsp__[0].ast);
         d_val__.ast_list = arg_list;
         }
         }
        break;

        case 102:
#line 1312 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         Ast * lhs = d_vsp__[-3].ast;
         Ast * rhs = d_vsp__[-1].ast;
         Ast * ass_ast = new Tying_Ast(lhs, rhs, get_line_number());
         d_val__.ast = ass_ast;
         }
         }
        break;

        case 103:
#line 1327 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[-2].type != NULL), "Type cannot be null"); 
         CHECK_INVARIANT((d_vsp__[-1].ast_list != NULL), "Variable list cannot be null");
         pair<Data_Type, string> * type = d_vsp__[-2].type;
         list<Ast *> *varlist = d_vsp__[-1].ast_list;
         Ast * ass_ast = new Decl_Ast(type->first, varlist, type->second, get_line_number());
         d_val__.ast = ass_ast;
         }
         }
        break;

        case 104:
#line 1344 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         string name = "PARTY";
         Data_Type type = party_data_type;
         pair<Data_Type, string> * declar = new pair<Data_Type, string>(type, name);
         d_val__.type = declar;
         }
         }
        break;

        case 105:
#line 1355 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         string name = "INTEGER";
         Data_Type type = int_data_type;
         pair<Data_Type, string> * declar = new pair<Data_Type, string>(type, name);
         d_val__.type = declar;
         }
         }
        break;

        case 106:
#line 1366 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         string name = "SESSION";
         Data_Type type = session_data_type;
         pair<Data_Type, string> * declar = new pair<Data_Type, string>(type, name);
         d_val__.type = declar;
         }
         }
        break;

        case 107:
#line 1377 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         string name = "UNKNOWN";
         Data_Type type = unknown_data_type;
         pair<Data_Type, string> * declar = new pair<Data_Type, string>(type, name);
         d_val__.type = declar;
         }
         }
        break;

        case 108:
#line 1388 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         string name = "PORT";
         Data_Type type = port_data_type;
         pair<Data_Type, string> * declar = new pair<Data_Type, string>(type, name);
         d_val__.type = declar;
         }
         }
        break;

        case 109:
#line 1399 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         string name = "INPORT";
         Data_Type type = inport_data_type;
         pair<Data_Type, string> * declar = new pair<Data_Type, string>(type, name);
         d_val__.type = declar;
         }
         }
        break;

        case 110:
#line 1410 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         string name = "OUTPORT";
         Data_Type type = outport_data_type;
         pair<Data_Type, string> * declar = new pair<Data_Type, string>(type, name);
         d_val__.type = declar;
         }
         }
        break;

        case 111:
#line 1421 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         string name = "BOOL";
         Data_Type type = bool_data_type;
         pair<Data_Type, string> * declar = new pair<Data_Type, string>(type, name);
         d_val__.type = declar;
         }
         }
        break;

        case 112:
#line 1432 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         string name = "FIELD";
         Data_Type type = field_data_type;
         pair<Data_Type, string> * declar = new pair<Data_Type, string>(type, name);
         d_val__.type = declar;
         }
         }
        break;

        case 113:
#line 1443 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[0].string_value != NULL), "Name cannot be null");
         string name = *d_vsp__[0].string_value;
         Data_Type type = other_data_type;
         pair<Data_Type, string> * declar = new pair<Data_Type, string>(type, name);
         d_val__.type = declar;
         }
         }
        break;

        case 114:
#line 1457 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[0].ast != NULL), "Term cannot be null");
         list<Ast*>* varlist = new list<Ast*>();
         varlist->push_back(d_vsp__[0].ast);
         d_val__.ast_list = varlist;
         }
         }
        break;

        case 115:
#line 1468 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[0].ast != NULL), "Term cannot be null");
         CHECK_INVARIANT((d_vsp__[-2].ast_list != NULL), "Varlist cannot be null");
         list<Ast*>* varlist = d_vsp__[-2].ast_list;
         varlist->push_back(d_vsp__[0].ast); 
         d_val__.ast_list = varlist;
         }
         }
        break;

        case 116:
#line 1482 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[-1].ast != NULL), "Term cannot be null");
         bool port_clause_exists = (d_vsp__[0].opt_port!=NULL);
         bool each_present;
         list<pair<pair<Data_Type, string> *, Ast*> *> * seq = NULL;
         if(port_clause_exists)
         {
         each_present = d_vsp__[0].opt_port->first;
         seq = d_vsp__[0].opt_port->second;
         }
         
         Ast * term_ast = new Decl_Term_Ast(d_vsp__[-1].ast,port_clause_exists,seq,each_present,get_line_number());
         d_val__.ast = term_ast;
         }
         }
        break;

        case 117:
#line 1504 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[-1].ast != NULL), "Each expression cannot be null");
         CHECK_INVARIANT((d_vsp__[0].ast != NULL), "Body cannot be null");
         Ast* loop_statement = new Iteration_Statement_Ast(d_vsp__[-1].ast, d_vsp__[0].ast, get_line_number());
         d_val__.ast = loop_statement;
         }
         }
        break;

        case 118:
#line 1517 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[0].ast != NULL), "Expression cannot be null");
         d_val__.opt_each_expr = new pair<bool, Ast*>(false,d_vsp__[0].ast);
         }
         }
        break;

        case 119:
#line 1526 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[0].ast != NULL), "Each expression cannot be null");
         d_val__.opt_each_expr = new pair<bool, Ast*>(true,d_vsp__[0].ast);
         }
         }
        break;

        case 120:
#line 1537 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[-3].ast != NULL), "Variable cannot be null"); 
         CHECK_INVARIANT((d_vsp__[-1].ast != NULL), "Expression cannot be null"); 
         CHECK_INVARIANT((d_vsp__[0].conditional != NULL), "Opt-Condition cannot be null"); 
         Ast* loop_statement = new Each_Statement_Ast(d_vsp__[0].conditional->first, d_vsp__[0].conditional->second, d_vsp__[-3].ast, d_vsp__[-1].ast, get_line_number());
         d_val__.ast = loop_statement;
         }
         }
        break;

        case 121:
#line 1549 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[-1].ast != NULL), "Expression cannot be null"); 
         CHECK_INVARIANT((d_vsp__[0].conditional != NULL), "Opt-Condition cannot be null"); 
         Ast* loop_statement = new Each_Statement_Ast(d_vsp__[0].conditional->first, d_vsp__[0].conditional->second, NULL, d_vsp__[-1].ast, get_line_number());
         d_val__.ast = loop_statement;
         }
         }
        break;

        case 122:
#line 1560 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[-2].ast != NULL), "Variable cannot be null"); 
         CHECK_INVARIANT((d_vsp__[0].ast != NULL), "Expression cannot be null"); 
         Ast* loop_statement = new Each_Statement_Ast(NULL, no_cond, d_vsp__[-2].ast, d_vsp__[0].ast, get_line_number());
         d_val__.ast = loop_statement;
         }
         }
        break;

        case 123:
#line 1571 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[0].ast != NULL), "Expression cannot be null"); 
         Ast* loop_statement = new Each_Statement_Ast(NULL, no_cond, NULL, d_vsp__[0].ast, get_line_number());
         d_val__.ast = loop_statement;
         }
         }
        break;

        case 124:
#line 1583 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         pair<Ast*, condition> *clause = new pair<Ast*, condition>(d_vsp__[0].ast, except);
         d_val__.conditional = clause;
         }
         }
        break;

        case 125:
#line 1592 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         pair<Ast*, condition> *clause = new pair<Ast*, condition>(d_vsp__[0].ast, where);
         d_val__.conditional = clause;
         }
         }
        break;

        case 126:
#line 1603 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[-2].ast != NULL), "Expression cannot be null");
         CHECK_INVARIANT((d_vsp__[0].ast != NULL), "Statement cannot be null");
         Selection_Statement_Ast * cond_statement = new Selection_Statement_Ast(d_vsp__[-2].ast, d_vsp__[0].ast, NULL, get_line_number());
         d_val__.ast = (Ast*) cond_statement;
         }
         }
        break;

        case 127:
#line 1614 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[-4].ast != NULL), "Expression cannot be null");
         CHECK_INVARIANT((d_vsp__[-2].ast != NULL), "Statement cannot be null");
         CHECK_INVARIANT((d_vsp__[0].ast != NULL), "Statement cannot be null");
         Selection_Statement_Ast * cond_statement = new Selection_Statement_Ast(d_vsp__[-4].ast, d_vsp__[-2].ast, d_vsp__[0].ast, get_line_number());
         d_val__.ast = (Ast*) cond_statement;
         }
         }
        break;

        case 128:
#line 1628 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         Ast * lhs = d_vsp__[-5].ast;
         Ast * rhs = d_vsp__[-1].ast;
         pair<string, list<Ast*>* >* p_call = d_vsp__[-3].p_call;
         Ast * ass_ast = new Set_Ast(lhs, rhs, p_call->first, p_call->second, get_line_number());
         d_val__.ast = ass_ast;
         }
         }
        break;

        case 129:
#line 1644 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         Ast * lhs = d_vsp__[-3].ast;
         Ast * rhs = d_vsp__[-1].ast;
         connection_param c = d_vsp__[-2].conn;
         Ast * ass_ast = new Connect_Ast(lhs, rhs, c, get_line_number());
         d_val__.ast = ass_ast;
         }
         }
        break;

        case 130:
#line 1660 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         d_val__.conn = conn_to;
         }
         }
        break;

        case 131:
#line 1668 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         d_val__.conn = conn_and;
         }
         }
        break;

        case 132:
#line 1678 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[-1].ast_list != NULL), "exp_list_elem cannot be null");
         d_val__.ast_list = d_vsp__[-1].ast_list;
         }
         }
        break;

        case 133:
#line 1689 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[0].ast != NULL), "Exp cannot be null in list");
         list<Ast*> *name_list = new list<Ast*>();
         name_list->push_back(d_vsp__[0].ast);
         d_val__.ast_list = name_list;
         }
         }
        break;

        case 134:
#line 1701 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[0].ast != NULL), "Exp cannot be null in list");
         d_vsp__[-2].ast_list->push_back(d_vsp__[0].ast);
         
         d_val__.ast_list = d_vsp__[-2].ast_list;
         }
         }
        break;

        case 135:
#line 1714 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         Ast * lhs = d_vsp__[-3].ast;
         Ast * rhs = d_vsp__[-1].ast;
         Ast * ass_ast = new Forward_Ast(lhs, rhs, get_line_number());
         d_val__.ast = ass_ast;
         }
         }
        break;

        case 136:
#line 1727 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         string name = *d_vsp__[0].string_value;
         d_val__.ast = new Name_Ast(*d_vsp__[0].string_value, get_line_number());
         }
         }
        break;

        case 137:
#line 1738 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         int cons = d_vsp__[0].integer_value;
         Ast * number_ast = new Number_Ast<int>(cons, get_line_number());
         d_val__.ast = number_ast;
         }
         }
        break;

    }
}
catch (std::exception const &exc)
{
    exceptionHandler__(exc);
}

inline void ParserBase::reduce__(PI__ const &pi)
{
    d_token__ = pi.d_nonTerm;
    pop__(pi.d_size);

}

// If d_token__ is _UNDETERMINED_ then if d_nextToken__ is _UNDETERMINED_ another
// token is obtained from lex(). Then d_nextToken__ is assigned to d_token__.
void Parser::nextToken()
{
    if (d_token__ != _UNDETERMINED_)        // no need for a token: got one
        return;                             // already

    if (d_nextToken__ != _UNDETERMINED_)
    {
        popToken__();                       // consume pending token
    }
    else
    {
        ++d_acceptedTokens__;               // accept another token (see
                                            // errorRecover())
        d_token__ = lex();
        if (d_token__ <= 0)
            d_token__ = _EOF_;
    }
    print();
}

// if the final transition is negative, then we should reduce by the rule
// given by its positive value. Note that the `recovery' parameter is only
// used with the --debug option
int Parser::lookup(bool recovery)
{
// $insert threading
    SR__ *sr = s_state[d_state__];          // get the appropriate state-table
    int lastIdx = sr->d_lastIdx;            // sentinel-index in the SR__ array
    
    SR__ *lastElementPtr = sr + lastIdx;
    lastElementPtr->d_token = d_token__;    // set search-token
    
    SR__ *elementPtr = sr + 1;              // start the search at s_xx[1]
    while (elementPtr->d_token != d_token__)
        ++elementPtr;
    

    if (elementPtr == lastElementPtr)   // reached the last element
    {
        if (elementPtr->d_action < 0)   // default reduction
        {
            return elementPtr->d_action;                
        }

        // No default reduction, so token not found, so error.
        throw UNEXPECTED_TOKEN__;
    }

    // not at the last element: inspect the nature of the action
    // (< 0: reduce, 0: ACCEPT, > 0: shift)

    int action = elementPtr->d_action;


    return action;
}

    // When an error has occurred, pop elements off the stack until the top
    // state has an error-item. If none is found, the default recovery
    // mode (which is to abort) is activated. 
    //
    // If EOF is encountered without being appropriate for the current state,
    // then the error recovery will fall back to the default recovery mode.
    // (i.e., parsing terminates)
void Parser::errorRecovery()
try
{
    if (d_acceptedTokens__ >= d_requiredTokens__)// only generate an error-
    {                                           // message if enough tokens 
        ++d_nErrors__;                          // were accepted. Otherwise
        error("Syntax error");                  // simply skip input

    }


    // get the error state
    while (not (s_state[top__()][0].d_type & ERR_ITEM))
    {
        pop__();
    }

    // In the error state, lookup a token allowing us to proceed.
    // Continuation may be possible following multiple reductions,
    // but eventuall a shift will be used, requiring the retrieval of
    // a terminal token. If a retrieved token doesn't match, the catch below 
    // will ensure the next token is requested in the while(true) block
    // implemented below:

    int lastToken = d_token__;                  // give the unexpected token a
                                                // chance to be processed
                                                // again.

    pushToken__(_error_);                       // specify _error_ as next token
    push__(lookup(true));                       // push the error state

    d_token__ = lastToken;                      // reactivate the unexpected
                                                // token (we're now in an
                                                // ERROR state).

    bool gotToken = true;                       // the next token is a terminal

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
            {
                gotToken = d_token__ == _UNDETERMINED_;
                nextToken();                    // obtain next token
            }
            
            int action = lookup(true);

            if (action > 0)                 // push a new state
            {
                push__(action);
                popToken__();

                if (gotToken)
                {

                    d_acceptedTokens__ = 0;
                    return;
                }
            }
            else if (action < 0)
            {
                // no actions executed on recovery but save an already 
                // available token:
                if (d_token__ != _UNDETERMINED_)
                    pushToken__(d_token__);
 
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else
                ABORT();                    // abort when accepting during
                                            // error recovery
        }
        catch (...)
        {
            if (d_token__ == _EOF_)
                ABORT();                    // saw inappropriate _EOF_
                      
            popToken__();                   // failing token now skipped
        }
    }
}
catch (ErrorRecovery__)       // This is: DEFAULT_RECOVERY_MODE
{
    ABORT();
}

    // The parsing algorithm:
    // Initially, state 0 is pushed on the stack, and d_token__ as well as
    // d_nextToken__ are initialized to _UNDETERMINED_. 
    //
    // Then, in an eternal loop:
    //
    //  1. If a state does not have REQ_TOKEN no token is assigned to
    //     d_token__. If the state has REQ_TOKEN, nextToken() is called to
    //      determine d_nextToken__ and d_token__ is set to
    //     d_nextToken__. nextToken() will not call lex() unless d_nextToken__ is 
    //     _UNDETERMINED_. 
    //
    //  2. lookup() is called: 
    //     d_token__ is stored in the final element's d_token field of the
    //     state's SR_ array. 
    //
    //  3. The current token is looked up in the state's SR_ array
    //
    //  4. Depending on the result of the lookup() function the next state is
    //     shifted on the parser's stack, a reduction by some rule is applied,
    //     or the parsing function returns ACCEPT(). When a reduction is
    //     called for, any action that may have been defined for that
    //     reduction is executed.
    //
    //  5. An error occurs if d_token__ is not found, and the state has no
    //     default reduction. Error handling was described at the top of this
    //     file.

int Parser::parse()
try 
{
    push__(0);                              // initial state
    clearin();                              // clear the tokens.

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
                nextToken();                // obtain next token


            int action = lookup(false);     // lookup d_token__ in d_state__

            if (action > 0)                 // SHIFT: push a new state
            {
                push__(action);
                popToken__();               // token processed
            }
            else if (action < 0)            // REDUCE: execute and pop.
            {
                executeAction(-action);
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else 
                ACCEPT();
        }
        catch (ErrorRecovery__)
        {
            errorRecovery();
        }
    }
}
catch (Return__ retValue)
{
    return retValue;
}



