// Generated by Flexc++ V2.03.04 on Fri, 15 Sep 2017 03:06:39 +0530

#include <iostream>
#include <fstream>
#include <sstream>
#include <stdexcept>

// $insert class_ih
#include "scanner.ih"


    // s_ranges__: use (unsigned) characters as index to obtain
    //           that character's range-number.
    //           The range for EOF is defined in a constant in the
    //           class header file
size_t const ScannerBase::s_ranges__[] =
{
     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
     3, 3, 3, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9,10,11,12,12,13,14,15,16,17,18,19,19,
    19,19,19,19,19,19,19,19,20,21,22,23,24,25,26,27,27,27,27,27,27,27,27,27,27,
    27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28,29,30,31,32,33,34,35,36,
    37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,
    62,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
    63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
    63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
    63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
    63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
    63,63,63,63,63,63,
};

    // s_dfa__ contains the rows of *all* DFAs ordered by start state.  The
    // enum class StartCondition__ is defined in the baseclass header
    // StartCondition__::INITIAL is always 0.  Each entry defines the row to
    // transit to if the column's character range was sensed. Row numbers are
    // relative to the used DFA, and d_dfaBase__ is set to the first row of
    // the subset to use.  The row's final two values are respectively the
    // rule that may be matched at this state, and the rule's FINAL flag. If
    // the final value equals FINAL (= 1) then, if there's no continuation,
    // the rule is matched. If the BOL flag (8) is also set (so FINAL + BOL (=
    // 9) is set) then the rule only matches when d_atBOL is also true.
int const ScannerBase::s_dfa__[][67] =
{
    // INITIAL
    {-1, 1, 2, 3, 1, 4, 3, 5, 6, 5, 7, 3, 5, 8, 8, 5, 8, 9,10,11,
         12,13,14,15,16, 8, 5,17, 5, 3, 5, 3,17, 3,18,19,20,17,21,22,
         17,17,23,17,17,17,17,17,24,25,17,26,27,28,29,17,30,17,17,17,
          5,31, 5, 3,-1,    -1, -1},  // 0
    {-1,32,-1,-1,32,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,33,-1,
         -1,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,    61, -1},  // 1
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,    56, -1},  // 2
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,    63, -1},  // 3
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,35,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,    20, -1},  // 4
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,    52, -1},  // 5
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,    31, -1},  // 6
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,    63, -1},  // 7
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,    53, -1},  // 8
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,37,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,    52, -1},  // 9
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,38,-1,-1,-1,-1,39,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,    53, -1},  // 10
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,11,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,    54, -1},  // 11
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         40,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,    52, -1},  // 12
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,41,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,    52, -1},  // 13
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,42,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,    15, -1},  // 14
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,43,44,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,    30, -1},  // 15
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,45,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,    16, -1},  // 16
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 17
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,46,17,17,17,47,
         17,17,17,17,17,17,17,48,17,17,17,17,49,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 18
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,50,17,
         17,17,17,17,17,17,17,17,51,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 19
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,52,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 20
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,53,17,17,17,17,17,
         17,17,17,17,17,54,17,55,17,17,17,17,17,17,17,17,17,56,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 21
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,57,17,17,17,17,17,58,17,17,59,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 22
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,60,17,61,
         17,17,17,17,17,17,17,62,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 23
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,63,
         17,17,17,17,17,17,17,17,17,64,17,17,17,17,65,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 24
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,66,17,17,17,17,17,
         17,17,17,17,17,17,17,17,67,17,17,68,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 25
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,69,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 26
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,70,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,71,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 27
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,72,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 28
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,73,17,17,17,17,74,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 29
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,75,76,17,17,17,17,17,17,17,17,77,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 30
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,78,-1,-1,-1,    52, -1},  // 31
    {-1,32,-1,-1,32,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,33,-1,
         -1,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,    -1, -1},  // 32
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,79,-1,-1,-1,-1,39,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,    -1, -1},  // 33
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,80,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,    -1, -1},  // 34
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,    17, -1},  // 35
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,    18, -1},  // 36
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,     1, -1},  // 37
    {-1,79,79,79,79,79,79,79,79,79,79,79,79,81,79,79,79,79,79,79,
         79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,
         79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,
         79,79,79,79,-1,    62, -1},  // 38
    {-1,39,-1,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,
         39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,
         39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,
         39,39,39,39,-1,    59, -1},  // 39
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,     2, -1},  // 40
    {-1,41,-1,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,
         41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,
         41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,
         41,41,41,41,-1,    57, -1},  // 41
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,    12, -1},  // 42
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,    14, -1},  // 43
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,    21, -1},  // 44
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,    13, -1},  // 45
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,82,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 46
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,83,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 47
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,84,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 48
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    29, -1},  // 49
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,85,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 50
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,86,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 51
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,87,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 52
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,88,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 53
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,89,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 54
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,90,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 55
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,91,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 56
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,92,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 57
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,93,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 58
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,94,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 59
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,95,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 60
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    46, -1},  // 61
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,96,17,17,17,97,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    26, -1},  // 62
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    43, -1},  // 63
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,98,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 64
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,99,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 65
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,100,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 66
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,101,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 67
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,102,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 68
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,103,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 69
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,104,105,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 70
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,106,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 71
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    50, -1},  // 72
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,107,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 73
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,108,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 74
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,109,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 75
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,110,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 76
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,111,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 77
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,    19, -1},  // 78
    {-1,79,79,79,79,79,79,79,79,79,79,79,79,81,79,79,79,79,79,79,
         79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,
         79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,
         79,79,79,79,-1,    -1, -1},  // 79
    {-1,80,-1,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,
         80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,
         80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,
         80,80,80,80,-1,    58, -1},  // 80
    {-1,112,112,112,112,112,112,112,112,112,112,112,112,81,112,112,112,112,113,112,
         112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,
         112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,
         112,112,112,112,-1,    -1, -1},  // 81
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,114,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 82
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,115,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 83
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,     9, -1},  // 84
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,116,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 85
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,117,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 86
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,118,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 87
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,119,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 88
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,120,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 89
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,121,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    23, -1},  // 90
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,122,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 91
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,123,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 92
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,124,17,17,17,
         -1,-1,-1,-1,-1,    42, -1},  // 93
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,125,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 94
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,126,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 95
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,127,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 96
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    25, -1},  // 97
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,128,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 98
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,129,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 99
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,130,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 100
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,131,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 101
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,132,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 102
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,133,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 103
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,134,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 104
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    48, -1},  // 105
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,135,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 106
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,136,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 107
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,137,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 108
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,138,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 109
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,139,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 110
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,140,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 111
    {-1,112,112,112,112,112,112,112,112,112,112,112,112,141,112,112,112,112,112,112,
         112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,
         112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,
         112,112,112,112,-1,    -1, -1},  // 112
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,    60, -1},  // 113
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,142,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 114
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,143,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 115
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,144,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 116
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,     5, -1},  // 117
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,145,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 118
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    36, -1},  // 119
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    47, -1},  // 120
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,146,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 121
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,147,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 122
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,148,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 123
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,149,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 124
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,     3, -1},  // 125
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,150,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 126
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,151,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 127
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    27, -1},  // 128
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,152,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 129
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,153,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,154,17,
         -1,-1,-1,-1,-1,    55, -1},  // 130
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    39, -1},  // 131
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,155,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 132
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,156,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 133
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,157,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 134
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,158,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 135
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,159,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 136
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    32, -1},  // 137
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,160,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 138
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,     6, -1},  // 139
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    33, -1},  // 140
    {-1,112,112,112,112,112,112,112,112,112,112,112,112,141,112,112,112,112,113,112,
         112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,
         112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,
         112,112,112,112,-1,    -1, -1},  // 141
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,     7, -1},  // 142
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    35, -1},  // 143
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,161,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 144
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,162,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 145
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,163,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 146
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,164,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 147
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    22, -1},  // 148
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,165,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 149
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    24, -1},  // 150
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,166,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 151
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,167,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 152
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,168,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 153
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,     8, -1},  // 154
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,169,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 155
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,170,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 156
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,171,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 157
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,     4, -1},  // 158
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,172,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 159
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    45, -1},  // 160
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    34, -1},  // 161
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,173,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 162
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,174,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 163
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    44, -1},  // 164
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,175,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 165
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    40, -1},  // 166
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,176,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 167
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,177,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 168
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,178,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 169
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    11, -1},  // 170
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,179,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 171
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,180,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 172
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    49, -1},  // 173
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    10, -1},  // 174
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    51, -1},  // 175
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    41, -1},  // 176
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    28, -1},  // 177
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,181,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    55, -1},  // 178
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    37, -1},  // 179
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,    38, -1},  // 180
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,
         -1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,17,-1,17,17,17,17,17,17,
         17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
         -1,-1,-1,-1,-1,     0, -1},  // 181
};


int const (*ScannerBase::s_dfaBase__[])[67] =
{
    s_dfa__ + 0,
};

size_t ScannerBase::s_istreamNr = 0;

// $insert inputImplementation
ScannerBase::Input::Input()
:
    d_in(0),
    d_lineNr(1)
{}

ScannerBase::Input::Input(std::istream *iStream, size_t lineNr)
:
    d_in(iStream),
    d_lineNr(lineNr)
{}

size_t ScannerBase::Input::get()
{
    switch (size_t ch = next())         // get the next input char
    {
        case '\n':
            ++d_lineNr;
        // FALLING THROUGH

        default:
        return ch;
    }
}

size_t ScannerBase::Input::next()
{
    size_t ch;

    if (d_deque.empty())                // deque empty: next char fm d_in
    {
        if (d_in == 0)
            return AT_EOF;
        ch = d_in->get();
        return *d_in ? ch : static_cast<size_t>(AT_EOF);
    }

    ch = d_deque.front();
    d_deque.pop_front();

    return ch;
}

void ScannerBase::Input::reRead(size_t ch)
{
    if (ch < 0x100)
    {
        if (ch == '\n')
            --d_lineNr;
        d_deque.push_front(ch);
    }
}

void ScannerBase::Input::reRead(std::string const &str, size_t fm)
{
    for (size_t idx = str.size(); idx-- > fm; )
        reRead(str[idx]);
}

ScannerBase::ScannerBase(std::istream &in, std::ostream &out)
:
    d_filename("-"),
    d_out(new std::ostream(out.rdbuf())),
// $insert interactiveInit
    d_in(0),
    d_input(new std::istream(in.rdbuf())),
    d_dfaBase__(s_dfa__)
{}

void ScannerBase::switchStream__(std::istream &in, size_t lineNr)
{
    d_input.close();
    d_input = Input(new std::istream(in.rdbuf()), lineNr);
}


ScannerBase::ScannerBase(std::string const &infilename, std::string const &outfilename)
:
    d_filename(infilename),
    d_out(outfilename == "-"    ? new std::ostream(std::cout.rdbuf()) :
          outfilename == ""     ? new std::ostream(std::cerr.rdbuf()) :
                                  new std::ofstream(outfilename)),
    d_input(new std::ifstream(infilename)),
    d_dfaBase__(s_dfa__)
{}

void ScannerBase::switchStreams(std::istream &in, std::ostream &out)
{
    switchStream__(in, 1);
    switchOstream(out);
}


void ScannerBase::switchOstream(std::ostream &out)
{
    *d_out << std::flush;
    d_out.reset(new std::ostream(out.rdbuf()));
}

// $insert debugFunctions
void ScannerBase::setDebug(bool onOff)
{}

bool ScannerBase::debug() const
{
    return false;
}

void ScannerBase::redo(size_t nChars)
{
    size_t from = nChars >= length() ? 0 : length() - nChars;
    d_input.reRead(d_matched, from);
    d_matched.resize(from);
}

void ScannerBase::switchOstream(std::string const &outfilename)
{
    *d_out << std::flush;
    d_out.reset(
            outfilename == "-"    ? new std::ostream(std::cout.rdbuf()) :
            outfilename == ""     ? new std::ostream(std::cerr.rdbuf()) :
                                    new std::ofstream(outfilename));
}


void ScannerBase::switchIstream(std::string const &infilename)
{
    d_input.close();
    d_filename = infilename;
    d_input = Input(new std::ifstream(infilename));
    d_atBOL = true;
}

void ScannerBase::switchStreams(std::string const &infilename,
                           std::string const &outfilename)
{
    switchOstream(outfilename);
    switchIstream(infilename);
}

void ScannerBase::pushStream(std::istream  &istr)
{
    std::istream *streamPtr = new std::istream(istr.rdbuf());
    p_pushStream("(istream)", streamPtr);
}

void ScannerBase::pushStream(std::string const &name)
{
    std::istream *streamPtr = new std::ifstream(name);
    if (!*streamPtr)
    {
        delete streamPtr;
        throw std::runtime_error("Cannot read " + name);
    }
    p_pushStream(name, streamPtr);
}


void ScannerBase::p_pushStream(std::string const &name, std::istream *streamPtr)
{
    if (d_streamStack.size() == s_maxSizeofStreamStack__)
    {
        delete streamPtr;
        throw std::length_error("Max stream stack size exceeded");
    }

    d_streamStack.push_back(StreamStruct{d_filename, d_input});
    d_filename = name;
    d_input = Input(streamPtr);
    d_atBOL = true;
}

bool ScannerBase::popStream()
{
    d_input.close();

    if (d_streamStack.empty())
        return false;

    StreamStruct &top = d_streamStack.back();

    d_input =   top.pushedInput;
    d_filename = top.pushedName;
    d_streamStack.pop_back();

    return true;
}



  // See the manual's section `Run-time operations' section for an explanation
  // of this member.
ScannerBase::ActionType__ ScannerBase::actionType__(size_t range)
{
    d_nextState = d_dfaBase__[d_state][range];

    if (d_nextState != -1)                  // transition is possible
        return ActionType__::CONTINUE;

    if (knownFinalState())                  // FINAL state reached
        return ActionType__::MATCH;         

    if (d_matched.size())
        return ActionType__::ECHO_FIRST;    // no match, echo the 1st char

    return range != s_rangeOfEOF__ ? 
                ActionType__::ECHO_CH 
            : 
                ActionType__::RETURN;
}

void ScannerBase::accept(size_t nChars)          // old name: less
{
    if (nChars < d_matched.size())
    {
        d_input.reRead(d_matched, nChars);
        d_matched.resize(nChars);
    }
}

void ScannerBase::setMatchedSize(size_t length)
{
    d_input.reRead(d_matched, length);  // reread the tail section
    d_matched.resize(length);           // return what's left
}

  // At this point a rule has been matched.  The next character is not part of
  // the matched rule and is sent back to the input.  The final match length
  // is determined, the index of the matched rule is determined, and then
  // d_atBOL is updated. Finally the rule's index is returned.
  // The numbers behind the finalPtr assignments are explained in the 
  // manual's `Run-time operations' section.
size_t ScannerBase::matched__(size_t ch)
{
    d_input.reRead(ch);

    FinalData *finalPtr;
                            
    if (not d_atBOL)                    // not at BOL
        finalPtr = &d_final.std;        // then use the std rule (3, 4)

                                        // at BOL
    else if (not available(d_final.std.rule))   // only a BOL rule avail.
            finalPtr = &d_final.bol;            // use the BOL rule (6)

    else if (not available(d_final.bol.rule)) // only a std rule is avail.
        finalPtr = &d_final.std;        // use the std rule (7)
        
    else if (                           // Both are available (8)
        d_final.bol.length !=           // check lengths of matched texts
        d_final.std.length              // unequal lengths, use the rule
    )                                   // having the longer match length
        finalPtr =              
            d_final.bol.length > d_final.std.length ?
                &d_final.bol
            :
                &d_final.std;

    else                            // lengths are equal: use 1st rule
        finalPtr = 
            d_final.bol.rule < d_final.std.rule ?
                &d_final.bol
            :
                &d_final.std;

    setMatchedSize(finalPtr->length);

    d_atBOL = d_matched.back() == '\n';


    return finalPtr->rule;
}

size_t ScannerBase::getRange__(int ch)       // using int to prevent casts
{
    return ch == AT_EOF ? as<size_t>(s_rangeOfEOF__) : s_ranges__[ch];
}

  // At this point d_nextState contains the next state and continuation is
  // possible. The just read char. is appended to d_match
void ScannerBase::continue__(int ch)
{
    d_state = d_nextState;

    if (ch != AT_EOF)
        d_matched += ch;
}

void ScannerBase::echoCh__(size_t ch)
{
    *d_out << as<char>(ch);
    d_atBOL = ch == '\n';
}


   // At this point there is no continuation. The last character is
   // pushed back into the input stream as well as all but the first char. in
   // the buffer. The first char. in the buffer is echoed to stderr. 
   // If there isn't any 1st char yet then the current char doesn't fit any
   // rules and that char is then echoed
void ScannerBase::echoFirst__(size_t ch)
{
    d_input.reRead(ch);
    d_input.reRead(d_matched, 1);
    echoCh__(d_matched[0]);
}

    // Update the rules associated with the current state, do this separately
    // for BOL and std rules.
    // If a rule was set, update the rule index and the current d_matched
    // length. 
void ScannerBase::updateFinals__()
{
    size_t len = d_matched.size();

    int const *rf = d_dfaBase__[d_state] + s_finIdx__;

    if (rf[0] != -1)        // update to the latest std rule
    {
        d_final.std = FinalData { as<size_t>(rf[0]), len };
    }

    if (rf[1] != -1)        // update to the latest bol rule
    {
        d_final.bol = FinalData { as<size_t>(rf[1]), len };
    }
}

void ScannerBase::reset__()
{
    d_final = Final{ 
                    FinalData{s_unavailable, 0}, 
                    FinalData {s_unavailable, 0} 
                };

    d_state = 0;
    d_return = true;

    if (!d_more)
        d_matched.clear();

    d_more = false;
}

int Scanner::executeAction__(size_t ruleIdx)
try
{
    switch (ruleIdx)
    {
        // $insert actions
        case 0:
        {
#line 13 "scanner.ll"
            {
                store_token_name("PROTOCOL");
                return Parser::PROTOCOL;
            }
        }
        break;
        case 1:
        {
#line 18 "scanner.ll"
            {
                store_token_name("DOUBLE DOT");
                return Parser::DOUBLE_DOT;
            }
        }
        break;
        case 2:
        {
#line 23 "scanner.ll"
            {
                store_token_name("DOUBLE COLON");
                return Parser::DOUBLE_COLON;
            }
        }
        break;
        case 3:
        {
#line 28 "scanner.ll"
            {
                store_token_name("FROM");
                return Parser::FROM;
            }
        }
        break;
        case 4:
        {
#line 33 "scanner.ll"
            {
                store_token_name("START");
                return Parser::START;
            }
        }
        break;
        case 5:
        {
#line 38 "scanner.ll"
            {
                store_token_name("BOOL");
                return Parser::BOOL;
            }
        }
        break;
        case 6:
        {
#line 43 "scanner.ll"
            {
                store_token_name("WITH");
                return Parser::WITH;
            }
        }
        break;
        case 7:
        {
#line 48 "scanner.ll"
            {
                store_token_name("ABORT");
                return Parser::ABORTING;
            }
        }
        break;
        case 8:
        {
#line 53 "scanner.ll"
            {
                store_token_name("PARTY");
                return Parser::PARTY;
            }
        }
        break;
        case 9:
        {
#line 58 "scanner.ll"
            {
                store_token_name("AND");
                return Parser::AND;
            }
        }
        break;
        case 10:
        {
#line 63 "scanner.ll"
            {
                store_token_name("ENV_PORT");
                return Parser::ENV_PORT;
            }
        }
        break;
        case 11:
        {
#line 68 "scanner.ll"
            {
                store_token_name("RAND_PORT");
                return Parser::RAND_PORT;
            }
        }
        break;
        case 12:
        {
#line 73 "scanner.ll"
            {
                store_token_name("LE");
                return Parser::LE;
            }
        }
        break;
        case 13:
        {
#line 78 "scanner.ll"
            {
                store_token_name("GE");
                return Parser::GE;
            }
        }
        break;
        case 14:
        {
#line 83 "scanner.ll"
            {
                store_token_name("EQ");
                return Parser::EQ;
            }
        }
        break;
        case 15:
        {
#line 88 "scanner.ll"
            {
                store_token_name("LT");
                return Parser::LT;
            }
        }
        break;
        case 16:
        {
#line 93 "scanner.ll"
            {
                store_token_name("GT");
                return Parser::GT;
            }
        }
        break;
        case 17:
        {
#line 98 "scanner.ll"
            {
                store_token_name("NE");
                return Parser::NE;
            }
        }
        break;
        case 18:
        {
#line 103 "scanner.ll"
            {
                store_token_name("B_AND");
                return Parser::B_AND;
            }
        }
        break;
        case 19:
        {
#line 108 "scanner.ll"
            {
                store_token_name("OR");
                return Parser::OR;
            }
        }
        break;
        case 20:
        {
#line 113 "scanner.ll"
            {
                store_token_name("NOT");
                return Parser::NOT;
            }
        }
        break;
        case 21:
        {
#line 118 "scanner.ll"
            {
                store_token_name("SEND");
                return Parser::SEND;
            }
        }
        break;
        case 22:
        {
#line 123 "scanner.ll"
            {
                store_token_name("FIELD");
                return Parser::FIELD;
            }
        }
        break;
        case 23:
        {
#line 128 "scanner.ll"
            {
                store_token_name("ENVIRONMENT");
                return Parser::ENV;
            }
        }
        break;
        case 24:
        {
#line 133 "scanner.ll"
            {
                store_token_name("IDEAL");
                return Parser::IDEAL;
            }
        }
        break;
        case 25:
        {
#line 138 "scanner.ll"
            {
                store_token_name("INTEGER");
                return Parser::INTEGER;
            }
        }
        break;
        case 26:
        {
#line 143 "scanner.ll"
            {
                store_token_name("IN");
                return Parser::IN;
            }
        }
        break;
        case 27:
        {
#line 148 "scanner.ll"
            {
                store_token_name("OPEN");
                return Parser::OPEN;
            }
        }
        break;
        case 28:
        {
#line 153 "scanner.ll"
            {
                store_token_name("PARTIAL");
                return Parser::PARTIAL;
            }
        }
        break;
        case 29:
        {
#line 158 "scanner.ll"
            {
                store_token_name("AS");
                return Parser::AS;
            }
        }
        break;
        case 30:
        {
#line 163 "scanner.ll"
            {
                store_token_name("ASSIGN_OP");
                return Parser::ASSIGN;
            }
        }
        break;
        case 31:
        {
#line 168 "scanner.ll"
            {
                store_token_name("RAND");
                return Parser::RAND;
            }
        }
        break;
        case 32:
        {
#line 173 "scanner.ll"
            {
                store_token_name("USES");
                return Parser::USES;
            }
        }
        break;
        case 33:
        {
#line 178 "scanner.ll"
            {
                store_token_name("WRAP");
                return Parser::WRAP;
            }
        }
        break;
        case 34:
        {
#line 183 "scanner.ll"
            {
                store_token_name("BEFORE");
                return Parser::BEFORE;
            }
        }
        break;
        case 35:
        {
#line 188 "scanner.ll"
            {
                store_token_name("AFTER");
                return Parser::AFTER;
            }
        }
        break;
        case 36:
        {
#line 193 "scanner.ll"
            {
                store_token_name("EACH");
                return Parser::EACH;
            }
        }
        break;
        case 37:
        {
#line 198 "scanner.ll"
            {
                store_token_name("SESSION");
                return Parser::SESSION;
            }
        }
        break;
        case 38:
        {
#line 203 "scanner.ll"
            {
                store_token_name("UNKNOWN");
                return Parser::UNKNOWN;
            }
        }
        break;
        case 39:
        {
#line 208 "scanner.ll"
            {
                store_token_name("PORT");
                return Parser::PORT;
            }
        }
        break;
        case 40:
        {
#line 213 "scanner.ll"
            {
                store_token_name("INPORT");
                return Parser::INPORT;
            }
        }
        break;
        case 41:
        {
#line 218 "scanner.ll"
            {
                store_token_name("OUTPORT");
                return Parser::OUTPORT;
            }
        }
        break;
        case 42:
        {
#line 223 "scanner.ll"
            {
                store_token_name("FOR");
                return Parser::FOR;
            }
        }
        break;
        case 43:
        {
#line 228 "scanner.ll"
            {
                store_token_name("OF");
                return Parser::OF;
            }
        }
        break;
        case 44:
        {
#line 233 "scanner.ll"
            {
                store_token_name("EXCEPT");
                return Parser::EXCEPT;
            }
        }
        break;
        case 45:
        {
#line 238 "scanner.ll"
            {
                store_token_name("WHERE");
                return Parser::WHERE;
            }
        }
        break;
        case 46:
        {
#line 243 "scanner.ll"
            {
                store_token_name("IF");
                return Parser::IF;
            }
        }
        break;
        case 47:
        {
#line 248 "scanner.ll"
            {
                store_token_name("ELSE");
                return Parser::ELSE;
            }
        }
        break;
        case 48:
        {
#line 253 "scanner.ll"
            {
                store_token_name("SET");
                return Parser::SET;
            }
        }
        break;
        case 49:
        {
#line 258 "scanner.ll"
            {
                store_token_name("CONNECT");
                return Parser::CONNECT;
            }
        }
        break;
        case 50:
        {
#line 263 "scanner.ll"
            {
                store_token_name("TO");
                return Parser::TO;
            }
        }
        break;
        case 51:
        {
#line 268 "scanner.ll"
            {
                store_token_name("FORWARD");
                return Parser::FORWARD;
            }
        }
        break;
        case 52:
        {
#line 273 "scanner.ll"
            {
                store_token_name("META CHAR");
                return matched()[0];
            }
        }
        break;
        case 53:
        {
#line 278 "scanner.ll"
            {
                store_token_name("ARITHOP");
                return matched()[0];
            }
        }
        break;
        case 54:
        {
#line 283 "scanner.ll"
            {
                ParserBase::STYPE__ *val = getSval();
                val->integer_value = atoi(matched().c_str());
                store_token_name("NUM");
                return Parser::INTEGER_NUMBER;
            }
        }
        break;
        case 55:
        {
#line 290 "scanner.ll"
            {
                ParserBase::STYPE__ *val = getSval();
                val->string_value = new string(matched());
                store_token_name("NAME");
                return Parser::NAME;
            }
        }
        break;
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        {
#line 302 "scanner.ll"
            {
                if (command_options.is_show_tokens_selected())
                ignore_token();
            }
        }
        break;
        case 62:
        {
#line 307 "scanner.ll"
            {
                string error_message;
                error_message ="Unterminated comment";
                CHECK_INPUT(CONTROL_SHOULD_NOT_REACH, error_message, lineNr());
                
            }
        }
        break;
        case 63:
        {
#line 314 "scanner.ll"
            { 
                string error_message;
                error_message ="Illegal character `" + matched();
                error_message += "' on line " + lineNr();
                
                CHECK_INPUT(CONTROL_SHOULD_NOT_REACH, error_message, lineNr());
            }
        }
        break;
    }
    noReturn__();
    return 0;
}
catch (Leave__ value)
{
    return static_cast<int>(value);
}

int Scanner::lex__()
{
    reset__();
    preCode();

    while (true)
    {
        size_t ch = get__();                // fetch next char
        size_t range = getRange__(ch);      // determine the range

        updateFinals__();                    // update the state's Final info

        switch (actionType__(range))        // determine the action
        {
            case ActionType__::CONTINUE:
                continue__(ch);
            continue;

            case ActionType__::MATCH:
            {
                d_token__ = executeAction__(matched__(ch));
                if (return__())
                {
                    print();
                    postCode(PostEnum__::RETURN);
                    return d_token__;
                }
                break;
            }

            case ActionType__::ECHO_FIRST:
                echoFirst__(ch);
            break;

            case ActionType__::ECHO_CH:
                echoCh__(ch);
            break;

            case ActionType__::RETURN:
                if (!popStream())
                {
                     postCode(PostEnum__::END);
                     return 0;
                }
                postCode(PostEnum__::POP);
             continue;
        } // switch

        postCode(PostEnum__::WIP);

        reset__();
        preCode();
    } // while
}

void ScannerBase::print__() const
{
}


