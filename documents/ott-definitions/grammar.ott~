% Grammar rules ----------------------------------------------
% Comma separted variables are treated aliases
metavar A , B ::=
	{{ com Names of parties A , B }}
metavar P ::=
	{{ com Protocol name [[P]] }} 
metavar x, y, s ::=
	{{ com Variables Eg. Session, Party,  Integer variables. }}
metavar env ::=
	{{ com Special environment variable [[env]] }}
metavar O ::=
	{{ com Port name [[O]] }}
metavar G ::= 
	
metavar M ::= 

metavar R ::=

metavar S ::= 

indexvar n , m , k ::=
	 {{ com Index variables }}


grammar
tau {{ tex \tau }} :: 'type_' ::= {{ com Types }}
    | Party :: :: party 
    | Int :: :: int
    | Bool :: :: bool
    | Session ::  :: session
    | Port :: :: port
    | Field :: :: field
    | Protocol :: :: protocol
    | () :: :: wellTyped {{ com Well typed }}
    | _ :: :: donotcare {{ com Do not care }}

constant, c :: CONST_ ::=
	  | integer_literal :: :: int
	  | true :: ::  bool_t
	  | false :: :: bool_f
	  
program :: 'prog_' ::=
	| prtcl :: :: Program
	{{ tex [[prtcl]]^+ }}
	{{ com One or more protocols }}

prtcl :: 'prtcl_' ::=
       | protocol P ( tau1   x1 , .. , taun xn ) : party A1 , .. , Am { stmt1 , .. , stmtk } :: :: dec
	 % {{ tex \textbf{protocol} \ [[P]] ( ([[tau]] \ [[x]])^{+} ) \ \textbf{: party } [[A]]^+
	    % \{ \ [[statement]]^+ \ \} }}

terminals :: 'terminals_' ::=
	  | => :: :: leadsto {{ tex \Rightarrow }}
	  | -> :: :: longrightarrow {{ tex \longrightarrow }}
	  | I :: :: I {{ tex \Vert }}
	  | |-              :: :: turnstile    {{ tex \vdash }}
	  | in :: :: in {{ tex \in }}
	  | notin :: :: notin {{ tex \notin }}
	  | != :: :: noteq {{ tex \neq }}
	  
statement, stmt :: 'statement_' ::= {{ com Statements }}
	  | in A { statement } :: :: pvtstmt
	  {{ tex \textbf{in } [[A]] \ \{ \ [[statement]]^+ \ \} }} {{ com Private statement }}
	  | tau  x ; :: :: declstmt
	  {{ com Declare a variable }}
	  | statement; statement'; :: :: seq
	  {{ com Sequence }}
	  | env => x ; :: :: env_protocol_sendstmt
	  {{ com Send from env to var }}
	  | x => env ; :: :: protocol_env_sendstmt
	  {{ com Send from var to env}}
  	  | exp => exp' :: :: exp_exp_sendstmt
	  {{ com Send from a exp to exp }}
	  | x = exp ; :: :: assignsttm
	  {{ com Assignment }}
	  | open  s  as  P ( x1 , .. , xn ) { A1 : B1 , .. , Am : Bm } :: :: opensessionstmt
	  % {{ tex \textbf{open} \ [[s]] \ \textbf{as } [[P]] ( [[x]] ) \ \{ \ ([[A]]:[[B]])^+ \ \} }}
	  {{ com Open session [[s]] }}
	  | set A as P ( x1 , .. , xn )::B :: :: setstmt
	  % {{ tex \textbf{set} \ [[A]] \ \textbf{as} \ [[P]] ( [[x]]^* ) \ \textbf{::} \ [[B]] }}
	  {{ com Set party as another party of another protocol }}
	  | wrap { wstmt } :: :: wrapstmt
	  {{ tex \textbf{wrap} \ \{ [[wstmt]]^+ \} }}
	  {{ com Wrap statement }}
	  % | forward pexp to pexp' :: :: fwd_to
	  % {{ tex \textbf{forward} \ [[pexp]] \ \textbf{to} \ [[pexp']] }}
	  | connect pexp and pexp' :: ::  connect_and
	  {{ tex \textbf{connect} \ [[pexp]] \ \textbf{and} \ [[pexp']] }}
	  {{ com Duplex connection }}
  	  | connect pexp to pexp' :: ::  connect_to
	  {{ tex \textbf{connect} \ [[pexp]] \ \textbf{to} \ [[pexp']] }}
  	  {{ com One way connection }}


wstmt {{ tex \mathcal{W}_{stmt} }} :: 'wstmt_' ::= {{ com Statements inside wrap  }}
	  | before pexp do { statement1 , .. , statementn } :: :: bef
	  % {{ tex \textbf{before} \ [[pexp_w]] \ \textbf{do} \ \{ [[statement]]^+ \} }}
  	  | after pexp do { statement1 , .. , statementn } :: :: after
	  % {{ tex \textbf{after} \ [[pexp_w]] \ \textbf{do} \ \{ [[statement]]^+ \} }}

% pexp_w {{ tex pexp_{w} }} :: 'pexp_w_' ::=
% 	  % | env I A :: :: env_to_party
% 	  | A I env :: :: party_to_env 

pexp {{ tex \mathcal{P}_{exp} }} :: 'pexp_' ::=
     | A I env :: :: env {{ com environment }}
     | A I B :: :: twoparties {{ com Two parties }}
     | exp I env :: :: sessionParty_env {{ com env of Party of session }} 
     % | A :: :: party {{ com Party }}
     % | x :: :: var {{ com Variable }}
     % | A I env :: :: partys_env {{ com env port of a party called A }}

exp :: 'expr_' ::=
    | exp + exp' :: :: addition {{ com Addition of two Int }}
    | A . x :: :: party_var {{ com Variable [[x]] of a party [[A]] }}
    | s . A :: :: vart_party {{ com Party [[A]] of a variable [[s]] }}
    | x :: :: statement {{ com Expression statement }}

scope :: 'scope_' ::=
     | C :: ::  current_scop {{ com Current Scope }} {{ tex \mathcal{C} }}
     | _ :: :: dont_care_scop {{ com Do not care }}
     | L :: :: global_scop {{ com Global Scope }} {{ tex \mathcal{G} }}
     | A :: :: party_scop {{ com Party Scope }}

Tenv {{ tex \mathcal{E} }} :: 'TypeEnv' ::= {{ com Type environment }}
  | empty :: :: em {{ tex \phi }} {{ com Empty }}
  % | G ( A ) = ( tau , scope )  :: :: PartyNm_TypeScope
  % | G ( x ) = ( tau , scope )  :: :: Var_TypeScope
  | G ( Tenv ) = ( tau , scope )  :: :: PrtckNm_TypeScope
  | G ( Tenv ) != ( tau , scope ) :: :: PrtckNm_not_TypeScope
  | G ( Tenv ) = G' [ x -> ( tau , scope ) ] :: :: introduce_new_var
  | M ( P ) = ( argsig , { A1 , .. , Am } ) :: :: PrtclNm_ArgsigPartyNms
  | R ( P , A ) = { O1 , .. , On } :: :: party_Scope
  | S ( s ) =  P :: :: sessionNm_PrtclNm {{ com Open as protocol [[P]] }}
  | Tenv , Tenv' :: :: tenv_and_tenv_prime
  | G :: :: id_to_type_scope
  % {{ tex \Gamma }}
  | M :: :: prtcl_to_arglist_partynmlist
  | R :: :: prtcl_to_portlist
  | S :: :: sessn_to_prtcl
  | scope :: :: current_scope
  % | G , M , R , S , scope :: :: all_env
  | A :: :: party_env
  | x :: :: var_env
  | P :: :: prtcl_env
  
    % | M :: :: Protocol_Scexp :: 'expr_' ::=ope {{ tex \mathcal{M} }} {{ com Protocol Scope }}

  % | sesn :: :: session_scope {{ tex \mathcal{S} }} {{ com Session Scope }}
  % | G , M , R , S : tau  :: :: typ {{ tex G, \  M, \ \R, \ \mathcal{S} : [[tau]] }}
argsig :: 'argsig_' ::=
       | { tau1 , .. , taun } :: :: type_signature

formula :: 'formula_' ::=
	| judgement :: :: judgement
	| formula1 .. formulan :: :: dots
	| env : tau :: :: env_type
	| Tenv :: :: type_env
	| x notin scope :: :: var_not_inscope
	| x in scope :: :: var_inscope
	| P notin scope :: :: prtcl_not_inscope
	| tau in { tau1 , .. , taun } :: :: type_notin_type
	| A in scope :: :: party_inscope
	| Tenv |- stmt : tau :: :: stmt_tenv
	| Tenv |- x : tau :: :: var_type
	| Tenv = Tenv' :: :: assign_newenv
	| [ tau1 , .. , taun ] = argsig :: :: types_in_argsig
	| Tenv in { Tenv1 , .. , Tenvn } :: :: tenv_in_tenv
	% | Tenv = { Tenv1 , .. , Tenvn } :: :: tenv_eq_tenv
	| Tenv |- pexp : tau :: :: pexp_tenv_tenv

% embed
% {{ tex
% \makeatletter
% % \makeatother
% \title{Implementing the add() protocol}
% \author{John Doe}
% \maketitle

% \section{Introduction}
% In the following we 

% }}
% Type Checking rules ----------------------------------------------
defns
  Jtype :: '' ::=
  
  % Type checking constants
  defn
	Tenv |- constant : tau :: ::  Constant :: Constant_ by

	------------------------------ :: Int
	G , M , R , S , C  |- integer_literal : Int

	------------------------------ :: true
	G , M , R , S , C  |- true : Bool

	------------------------------ :: false
	G , M , R , S , C  |- false : Bool
	
 % Type checking Statements
  defn 	Tenv |- stmt : tau , Tenv' :: :: Stmt :: Stmt_ by

  	     	G ( x ) != ( _ , C )
		G' ( x ) = G [ x -> ( tau , C ) ]
	------------------------------- :: decl
	G , M , R , S , C |- tau x ; : () , G' , M , R , S , C 

	G , M , R , S , _ |- statement : tau , G' , M , R' , S'
	G' , M , R' , S' , _ |- statement' : tau' , G'' , M , R'' , S''
	----------------------------------------------------- :: seq
	G , M , R , S , _ |- statement; statement'; : () , G , M , R , S , C
		
	     G ( A ) = ( Party , _ )
             G , M , R , S , A |- statement : ()
	------------------------------- :: pvt
	G , M , R , S , C |- in A { statement } : () , G , M , R , S , C 

	     G ( x ) = ( Int , C )
	 ------------------------------- :: sendEnvToVar
	    G , M , R , S , C |- env => x; : () , G , M , R , S , C 

	     G ( x ) = ( Int , C )
	 ------------------------------- :: sendVarToEnv
	    G , M , R , S , C |- x => env; : () , G , M , R , S , C 

	      G , M , R , S , C  |- exp : tau
	      G , M , R , S , C  |- exp' : tau'
	      tau in { Port , Int }
	      tau' in { Port , Int }
	 ---------------------------------------------------------------- :: sendExprToExpr
	      G , M , R , S , C  |- exp => exp' : () , G , M , R , S , C 

	       G ( x ) = ( tau , C )
	       G , M , R , S , C |- exp : tau
	 ---------------------------------------------------------------- ::  assignmnt
	     G , M , R , S , C  |- x = exp; : tau , G , M , R , S , C 

	 G ( s ) = ( Session , C )
	 G ( P ) = ( Protocol , _ )
 	 M ( P ) = ( argsig , { A1 , .. , Am } )
	 G ( x1 ) = ( tau1 , C)
	 G ( xn ) = ( taun , C)
	 [ tau1 , .. , taun ] = argsig
	 G ( B1 ) = ( Party , C )
	 G ( Bm ) = ( Party , C )
	 A1 = B1
	 Am = Bm
	 S = S'
	 S' ( s ) = P
------------------------------------------------------------------------------------- :: opensession
 G , M , R , S , C  |- open  s  as  P ( x1 , .. , xn ) { A1 : B1 , .. , Am : Bm } : () , G , M , R , S' , C 

	   G ( A ) = ( Party , C )
	   G ( P ) = ( Protocol , _ )
	   G ( x1 ) = ( tau1 , C )
	   G ( xn ) = ( taun , C )
	   M ( P ) = ( argsig , { A1 , .. , Am } )
	   B in { A1 , .. , Am }
	    [ tau1 , .. , taun ] = argsig
	 ------------------------------- :: set
	 C |- set A as P ( x1 , .. , xn )::B : () , G , M , R , S , C 



          G , M , R , S , C |- wstmt : ()
	 -------------------------------- :: wrap
	  G , M , R , S , C  |- wrap { wstmt } : () , G , M , R , S , C 

	     	G , M , R , S , C  |- pexp : Port
		G , M , R , S , C  |- pexp' : Port
	---------------------------------------------- :: connectTo
        G , M , R , S , C  |- connect pexp to pexp' : () , G , M , R , S , C 

	     	G , M , R , S , C  |- pexp : Port
		G , M , R , S , C  |- pexp' : Port
	---------------------------------------------- :: connectAnd
        G , M , R , S , C  |- connect pexp and pexp' : () , G , M , R , S , C

	
defn Tenv |- wstmt : tau :: :: Wrapstmt :: Wrapstmt_ by

     	       G , M , R , S , C  |- pexp : Port
	       G , M , R , S , C  |- statement1 : ()
	       G , M , R , S , C  |- statementn : ()
	---------------------------------------------- :: before
	G , M , R , S , C  |- before pexp do { statement1 , .. , statementn } : ()

       	       G , M , R , S , C  |- pexp : Port	
	       G , M , R , S , C  |- statement1 : ()
	       G , M , R , S , C  |- statementn : ()
	---------------------------------------------- :: after
	G , M , R , S , C  |- after pexp do { statement1 , .. , statementn } : ()

defn   Tenv |- prtcl : tau , Tenv' :: :: Protocol :: Prtcl_  by
       	       	     P notin L
       	       G ( P ) = ( Protocol , L )
	       G ( x1 ) = ( tau1 , C )
	       G ( xn ) = ( taun , C )
	       G ( A1 ) = ( Party , C )
	       G ( Am ) = ( Party , C )
	       G , M , R , S , P |- stmt1 : ()
	       G , M , R , S , P |- stmtk : ()
	----------------------------------------------- :: decl
	G , M , R , S , C  |- protocol P ( tau1 x1 , .. , taun xn ) : party A1 , .. , Am { stmt1 , .. , stmtk } : () , G' , M , R , S , C
	
defn	Tenv |- exp : tau :: :: Exp :: Exp_ by

		G , M , R , S , C  |- exp : tau
		G , M , R , S , C  |- exp' : tau
	--------------------------------------------- :: Addition
		G , M , R , S , C  |- exp + exp' : tau


		G ( A ) = ( Party , C )
        G ( x ) = ( Int , A )
		%tau in { Int}
	--------------------------------------------- :: PartyVar
		G , M , R , S , C  |- A . x : Int

		G ( s ) = ( Session , _ )
		S ( s ) = P
                M ( P ) = ( argsig , { A1 , .. , Am } )	
		A in { A1 , .. , Am }
	--------------------------------------------- :: VarParty
		G , M , R , S , C |- s . A : Party
		
		G ( x ) = ( Int , C )
	--------------------------------------------- :: Statement
		G , M , R , S , C |- x : Int

defn Tenv |- pexp : tau :: :: Pexp :: Pexp_ by

     	       G , M , R , S , C |- exp : Party
        ----------------------------------------------- :: ExpToEnv
     	  G , M , R , S , C |-  exp I env : Port

                portlist = 
	  ---------------------------------------------- :: PortOfParty
	  G , M , R , S , C |- A I B : Port
	  
		% G , M , R , S , C |- 
% Opertional Semantics rules ----------------------------------------------
defns
  Jop :: '' ::=