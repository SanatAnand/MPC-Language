% Grammar rules ----------------------------------------------
% Comma separted variables are treated aliases
indexvar n , m , k , i , j  , o , e , c ::=
	 {{ com Index variables }}
metavar A , B , D , Z ::=
	{{ com Names of parties A , B }}
metavar P , Q ::=
	{{ com Protocol name [[P]] }} 
metavar x, y, s ::=
	{{ com Variables Eg. Session, Party,  Integer variables. }}
metavar r ::=
	{{ com Port types }}
metavar w ::=
	{{ com Wire variable }}
metavar env ::=
	{{ com Special environment variable [[env]] denoting a port type}}
metavar T ::=
	{{ com Port names [[T]] }}
metavar O ::=
	{{ com Code Object [[O]] }}
metavar G ::= 
	{{ com Part of type environment }}	
metavar M ::= 
	{{ com Part of type environment }}	
metavar R ::=
	{{ com Part of type environment }}	
metavar L ::=
	{{ com Part of type environment }}	
metavar S ::= 
	{{ com Part of type environment }}
metavar E ::= 
	{{ com Part of compilation environment }}
metavar K ::= 
	{{ com Part of compilation environment }}

grammar
tau {{ tex \tau }} :: 'type_' ::= {{ com Types }}
    | Party :: :: party
      {{ com The parties are denoted by the metavariables A, B, D, Z }}
    | Int :: :: itn
    | Bool :: :: bool
    | Session ::  :: session
    | Port :: :: port {{ com Subsumes inport and outport }}
    | Field :: :: field
      	   {{ com Currently considered as an integer type }}
    | Protocol :: :: protocol
    | unknown :: :: unknwn
      	    {{ com For types that are not known currently }}
    | () :: :: wellTyped {{ com unit type }}
    | _ :: :: donotcare {{ com don't care }}

 Port :: 'prt_' ::= {{ com Types of Port }}
      | inport :: :: in_port {{ tex \textcircled{$\downarrow$} }}
       	      {{ com inport }}
      | outport :: :: out_port  {{ tex \textcircled{$\uparrow$} }}
       	       {{ com outport }}
	
constant :: 'const_' ::= {{ com Types of constant }}
	  | integer_literal :: :: int
	  | true :: ::  bool_t
	  | false :: :: bool_f
	  | env :: :: port_type
	  
program :: 'prog_' ::=
	 | prtcl1 , .. , prtcln :: :: Program
	% {{ tex [[prtcl]]^+ }}
	{{ com A program consists of one or more protocols }}

prtcl :: 'prtcl_' ::=
       | protocol P ( tau1 x1 , .. , taun xn ( prtcl' ) ) : party A1 , .. , Am each with { Port1 x1' , .. , Porti xi' } { stmt } :: :: prtcldec
	 % {{ tex \textbf{protocol} \ [[P]] ( ([[tau]] \ [[x]])^{+} ) \ \textbf{: party } [[A]]^+
	    % \{ \ [[statement]]^+ \ \} }}

terminals :: 'terminals_' ::=
	  | => :: :: leadsto {{ tex \Rightarrow }}
	  | -> :: :: longrightarrow {{ tex \longrightarrow }}
	  | <-> :: :: bidirectional {{ tex \rightleftharpoons }}
	  | --> :: :: singledirectional_right {{ tex \rightharpoonccw }}
	  | <-- :: :: singledirectional_left {{ tex \leftharpoonccw }}
	  | I :: :: I {{ tex \Vert }}
	  | |-              :: :: turnstile    {{ tex \vdash }}
	  | belongsto :: :: in {{ tex \in }}
	  | notin :: :: notin {{ tex \notin }}
	  | != :: :: noteq {{ tex \neq }}
	  | crt :: :: create {{ tex \underrightarrow{create} }}
	  | apnd :: :: append {{ tex \underrightarrow{append} }}
	  | atch :: :: attach {{ tex \underrightarrow{attach} }}
	  | copy :: :: cpy {{ tex \xLongrightarrow{copycode} }}
	  | replace :: :: replace {{ tex \underrightarrow{replace} }}
	  | < :: :: brack_l {{ tex \langle }}
	  | > :: :: brack_r {{ tex \rangle }}
	  | union :: :: set_union {{ tex \cup }}

	  
statement, stmt :: 'statement_' ::= {{ com Statements }}
	  | in each A1 , .. , Am { stmt1 , .. , stmtn } :: :: pvtstmt
	   {{ com Do something in the context of parties }}
	  % TODO: bind stmt to in A
	  | tau  x ; :: :: declstmt
	  {{ com Declare a variable }}
	  | statement ; statement' ; :: :: seq
	  {{ com Sequence of statements }}
	  | pexp => x ; :: :: env_protocol_sendstmt
	  {{ com Send from environment to a variable }}
	  | x => pexp ; :: :: protocol_env_sendstmt
	  {{ com Send from a variable to environment }}
  	  | exp => exp' :: :: exp_exp_sendstmt
	  {{ com Send from an expression to another expression }}
	  | x = exp ; :: :: assignsttm
	  {{ com Assign to a variable }}
	  | pexp => pexp' ; :: :: pexp_to_pexp
	  | open  s  as  P ( x1 , .. , xn ) { A1 : B1 , .. , Am : Bm } :: :: opensessionstmt
	  % {{ tex \textbf{open} \ [[s]] \ \textbf{as } [[P]] ( [[x]] ) \ \{ \ ([[A]]:[[B]])^+ \ \} }}
	  {{ com Open a session called [[s]] }}
	  | set A as P ( x1 , .. , xn ):: B :: :: setstmt
	  % {{ tex \textbf{set} \ [[A]] \ \textbf{as} \ [[P]] ( [[x]]^* ) \ \textbf{::} \ [[B]] }}
	  {{ com Set party [[A]] as another party [[B]] of another protocol [[P]] }}
	  | wrap { wstmt } :: :: wrapstmt
	  {{ tex \textbf{wrap} \ \{ [[wstmt]]^+ \} }}
	  {{ com Wrap some statements and perform some checks before or after doing something }}
	  % | forward pexp to pexp' :: :: fwd_to
	  % {{ tex \textbf{forward} \ [[pexp]] \ \textbf{to} \ [[pexp']] }}
	  | connect pexp and pexp' :: ::  connect_and
	  {{ tex \textbf{connect} \ [[pexp]] \ \textbf{and} \ [[pexp']] }}
	  {{ com Duplex connection between two ports }}
  	  | connect pexp to pexp' :: ::  connect_to
	  {{ tex \textbf{connect} \ [[pexp]] \ \textbf{to} \ [[pexp']] }}
  	  {{ com One way connection between two ports }}


wstmt {{ tex \mathcal{W}_{stmt} }} :: 'wstmt_' ::= {{ com Statements inside wrap  }}
	  | before pexp do { statement1 , .. , statementn } :: :: bef
	  | after pexp do { statement1 , .. , statementn } :: :: after
	

pexp {{ tex \mathcal{P}_{exp} }} :: 'pexp_' ::=
     | A I portname :: :: env {{ com Port of a Party. The name of the ports can be Party name, env etc. }}
     | s . A I portname :: :: sessionParty_env {{ com Port [[portname]] of a Party [[A]] that belongs to session [[s]] }}
     | r :: :: name_of_port {{ com Just the name of a port }}

exp :: 'expr_' ::=
    | exp + exp' :: :: addition {{ com Addition of two expresions }}
    | A . x :: :: party_var {{ com Variable [[x]] of a party [[A]] }}
    % | s . A :: :: vart_party {{ com Party [[A]] of a variable [[s]] }}
    | x :: :: statement {{ com Expression statement }}

scope :: 'scope_' ::= {{ com The Various types of scopes }}
     | _ :: :: dont_care_scop {{ com Do not care about the scope }}
     | C :: ::  current_scop {{ com Current Scope }} {{ tex \mathcal{C} }}
     | W :: :: global_scop {{ com Global Scope }} {{ tex \mathcal{G} }}
     | A :: :: party_scop {{ com Party Scope for statements like in A \{ .. \} }}
     | P :: :: protocol_scop {{ com Protocol Scope }}
     | s :: :: sessions_party_scp {{ com Sessions Scope }}
     | scope . scope' :: :: scope_within_another_scope {{ com [[scope]] within another [[scope']] }}

argsig :: 'argsig_' ::=
       | { tau1 , .. , taun } :: :: type_signature {{ com Arguments signature consists of only the list of types taken as argument by a protocol }}

portlist :: 'prtlist_' ::=
	 | { T1 , .. , Tn } :: :: port_list {{ com List of ports a protocol has }}

% Type environment ------
Tenv {{ tex \mathcal{E} }} :: 'TypeEnv' ::= {{ com Type environment for evaluating stmt and expr }}
  | empty :: :: em {{ tex \phi }} {{ com Empty Type enviornment }}
  | G :: :: id_to_type_scope
  {{ com A function that takes a variable name and returns its type and scope }}
  | M :: :: prtcl_to_arglist_partynmlist
  {{ com A function that takes a protocol name and returns a tuple ( argsig , Party list ) }}
  | R :: :: prtcl_to_portlist
    {{ com Mapping of (Protocol name , Party name) to the list of Ports the party has }} 
  | S :: :: sessn_to_prtcl
  {{ com Maps a session name to the name of a protocol }}
  | L :: :: party_scope_to_portlist
  {{ com Maps ( Party name , Scope ) to the list of ports }}
  | scope :: :: current_scope
  {{ com The current scope of execution can also be a type environment }}
  | Tenv , Tenv' :: :: tenv_and_tenv_prime
  {{ com Sequence of Type environments }}

% Compilation environment ------ 
Cenv {{ tex \mathcal{M} }} :: 'CompEnv' ::= {{ com Compilation environment for evaluating stmt and expr }}
     | _ :: :: empty {{ tex \phi }} {{ com Empty compilation environment }}
     | E :: :: prtcl_party_to_codeObj
     {{ com Maps ( Protocol, Party, PartyScope ) to Code Object }}
     | O < scope > :: :: codeObj_scope
     {{ com Represents code object }}
     | O :: :: codeObj
     {{ com Represents a code object }}
     | P :: :: current_prtcl
     {{ com Represents protcol }}
     | K :: :: codeObj_to_ports
     {{ com Maps code objects to list of ports }}
     | Cenv , Cenv' :: :: compenv_seq
     {{ com Sequence of Compilation Environments }}
     | val :: :: value
     | A :: :: cur_party
    % | M :: :: Protocol_Scexp :: 'expr_' ::=ope {{ tex \mathcal{M} }} {{ com Protocol Scope }}

  % | sesn :: :: session_scope {{ tex \mathcal{S} }} {{ com Session Scope }}
  % | G , M , R , S : tau  :: :: typ {{ tex G, \  M, \ \R, \ \mathcal{S} : [[tau]] }}



formula :: 'formula_' ::=
       	| judgement :: :: judgement
% ----- For writing type checking rules
	| formula1 .. formulan :: :: dots
	| env : tau :: :: env_type
	| Tenv :: :: type_env
	| x notin scope :: :: var_not_inscope
	| r belongsto portlist :: :: port_in_portlist
	| B belongsto portlist :: :: partyport_in_portlist
	| x belongsto scope :: :: var_inscope
	|	       portlist = { x'1 , .. , x'i } :: :: initial_portlist
	| P notin scope :: :: prtcl_not_inscope
	| tau belongsto { tau1 , .. , taun } :: :: type_notin_type
	| A belongsto scope :: :: party_inscope
	| Tenv |- stmt : tau :: :: stmt_tenv
	| Tenv |- x : tau :: :: var_type
	| Tenv = Tenv' :: :: assign_newenv
	| [ tau1 , .. , taun ] == argsig :: :: types_in_argsig
	| Tenv belongsto { Tenv1 , .. , Tenvn } :: :: tenv_in_tenv
	| Tenv |- pexp : tau :: :: pexp_tenv_tenv
	| G ( formula ) = ( tau , scope )  :: :: PrtckNm_TypeScope
	| G ( formula ) != ( tau , scope ) :: :: PrtckNm_not_TypeScope
        | G' = G [ formula -> ( tau , scope ) ] :: :: introduce_new_var
	| M ( P ) = ( argsig , { A1 , .. , Am } ) :: :: PrtclNm_ArgsigPartyNms
	| M ( P ) != ( argsig , { A1 , .. , Am } ) :: :: PrtclNm_not_ArgsigPartyNms
	| M' = M [ P -> ( argsig , { A1 , .. , Am } ) ] :: :: PrtclNm_ArgsigIntroduce
	| R ( P , A ) = portlist :: :: prtcl_party_TO_portlist
	| R ( P , A ) != portlist :: :: prtcl_party_notTO_portlist
	| R' = R [ ( P , A ) -> portlist ] :: :: prtcl_party_introduction
	| S ( s ) =  P :: :: sessionNm_PrtclNm
	| S ( s ) !=  P :: :: sessionNmNOT_PrtclNm
	| S' = S [ s -> P ] :: :: sessionNm_intro
	| L ( scope , scope' ) = portlist :: :: partynm_scopelist_TO_portlist
	| L ( A , scope ) != portlist :: :: partynm_scopelist_noTO_portlist
	| L' = L [ ( A , scope ) -> portlist ] :: :: partynm_scopelist_intro
	| P belongsto dom Tenv :: :: form_in_domain_fom
	| P notin dom Tenv :: :: form_notin_domain_fom
	| ( P , A ) belongsto dom Tenv :: :: prtclparty_in_domain_fom
	| A :: :: party_env
	| x :: :: var_env
	| P :: :: prtcl_env
	| scope :: :: scop
%------- Formulae for writing compilation semantics
  	| Cenv ( P , A , scope ) = O < scope' > :: :: prtcl_party_code_objectv
	| Cenv |- stmt , Cenv' :: :: comp_stmt
	| Cenv |-  stmt ; : Cenv' :: :: crtstmt_in_codeObj 
	% | Cenv < scope > comp_instr ( stmt1 , .. , stmtn ) : Cenv' :: :: crtstm_in_currentcodeobj 
	| Cenv < scope > comp_instr ( comp_types1 portname1 , .. , comp_typesn portnamen ) : Cenv' :: :: crtcomptypePort_in_currentcodeobj 
	| Cenv < scope > comp_instr ( comp_types1 w1 , .. , comp_typesn wn )  : Cenv' :: :: crtcomptypeWire_in_currentcodeobj
	| Cenv < scope > comp_instr ( portname1 prt_cnc1 w1 , .. , portnamen prt_cncn wn ) :: :: atch_wire
	| Cenv < scope > comp_instr ( impl_instr ) : Cenv' :: :: writing_impl_inst
	| Cenv < scope > replace ( /* str */ ,  impl_instr )  : Cenv' :: :: replace_str_with_code
	| Cenv < scope > replace ( /* str */ ,  O < A > )  : Cenv' :: :: replace_str_with_codeObj
	| P crt ( comp_types1 w1 , .. , comp_typesn wn ) :: :: createWire_inProtocol
	| E' = E [ ( scope , scope' , scope'' ) -> O < scope''' > ] :: :: populating_E
	| K' = K [ O < scope >  -> { ( portname1 Port1 ) , .. , ( portnamen Portn ) } ] :: :: populating_K
	| O < scope > copy O' < scope' > :: :: copy_code
	| K ( O < A > ) = { ( portname1 Port1 ) , .. , ( portnamen Portn ) } :: :: get_portsFjromCodeObj
	| K' = K [ O < scope > -> K'' ( O' < scope' > ) union { ( portname1 Port1 ) , .. , ( portnamen Portn ) } ]	:: :: append_to_existing_portlist
	| Cenv |- pexp = ( A , portname ) :: :: portexpt_to_party_and_portlist
	| m' = m - 1 :: :: exp_need_1
	| j = ( m *  m' ) / 2 :: :: exp_need_2

	

portname :: 'prtname' ::= {{ com Name of a port }}
	 | r :: :: port_r {{ com generic name of a port }}
	 | environ :: :: port_environ {{ com environment port }} {{ tex \varepsilon }}
	 | A :: :: party {{ com Party can also be the name of a port for some other party }}
	 | x :: :: varnames
	 | scope . portname :: :: port_party_r

comp_instr :: 'CompInstr' ::= {{ com Compilation Instructions }}
     | crt :: :: create_something
     | apnd :: :: append_something
     | atch :: :: attach_wire_to_codeObject
     {{ com Attach a wire to a code object }}
     | copy :: :: copy_codeObject
     {{ com Copy code from a code object to another }}
     | replace :: :: replace_string {{ com Replace a temporary string with code }}
     | impl_instr :: :: implemnt_instructions

comp_types :: 'CompTypes' ::=
{{ com Types needed for compilation }}
     | Port :: :: port 
     | wire :: :: wire {{ tex \rightfilledspoon  }}
       	    {{ com wire }}
	    
prt_cnc :: 'PortCnc' ::=
{{ com Specifies how the wire connections are going to be made }}
    | <-> :: :: bidirectional {{ com Bi-directional }}
    | --> :: :: uni_right {{ com Uni-directional out }}
    | <-- :: :: uni_left {{ com Uni-directional in }}



impl_instr :: 'ImplInstr' ::= {{ com Instructions from the implementation language }}
	    | while ( impl_expr ) { /* str */ } :: :: whilestmt {{ com While statement }}
	    | if ( impl_expr ) { /* str */ } :: :: ifstmt {{ com If Statement }}
	    | x = read ( portname ) :: :: readport_tovar {{ com Read from a port }}
	    | portname = read ( x ) :: :: readvar_toport {{ com Read from a variable }}
	    | portname = read ( portname' ) :: :: read_port {{ com Read from a port }}
	    | send x to A :: :: varToParty
	    | x = exp :: :: assign_exp_toVar
	    | read ( exp ) :: :: readexp
	    | read ( exp ) + read ( exp' ) :: :: read_value_of_var {{ com Read the value of a variable }}
	    | tau1 x1 , .. , taun xn ; :: :: create_new_var {{ com Create new variable }}
	    
impl_expr :: 'ImplExpr' ::= {{ com Expressions for the implementation language }}
	    | constant :: :: cnstnt {{ com Booleans like true or false }}
	    | portname :: :: prtname {{ com Portname }}
	    | portname . ITR :: :: prt_intentToread {{ com Port intent to read }}
	    | portname . HWR :: :: prt_hwritten {{ com Port have written }}
	    
% Type Checking rules ----------------------------------------------
defns
  Jtype :: '' ::=  
  
  % Type checking constants
  defn
	Tenv |- constant : tau :: ::  Constant :: Constant_ {{ com Checking constants }} by

	------------------------------ :: Int
	G , M , R , S , L , C|- integer_literal : Int

	------------------------------ :: true
	G , M , R , S , L , C|- true : Bool

	------------------------------ :: false
	G , M , R , S , L , C|- false : Bool
	
 % Type checking Statements
  defn 	Tenv |- stmt : tau , Tenv' :: :: Stmt :: Stmt_ {{ com Checking Statements }}by 

	{{ com
\subsubsection{Declaration} The type checking of declaring a variable simply checks if a variab }}

  	     	G ( x ) != ( _ , C )
		G' = G [ x -> ( tau , C ) ]
		% TODO: see how we change R here
	------------------------------------------------------ :: decl
	G , M , R , S , L, C |- tau x ; : () , G' , M , R , S , L , C

{{ com
\subsubsection{Sequence} The type checking of declaring a variable simply checks if a variab }}

	G , M , R , S , L , _ |- statement : () , G' , M , R , S' , L'
	G' , M , R , S' , L' , _ |- statement' : () , G'' , M , R , S'' , L''
	----------------------------------------------------- :: seq
	G , M , R , S , L , _ |- statement ; statement' ; : () , G'' , M , R , S'' , L'' , _
		
	     G ( A1 ) = ( Party , _ )
	     G , M , R , S , L , A1 |- stmt1 : () , G' , M , R , S' , L'
	     G' , M , R , S' , L' , A1 |- stmtn : () , G'' , M , R , S'' , L''
	     G ( Am ) = ( Party , _ )
	     G'' , M , R , S'' , L'' , Am |- stmt1 : () , G''' , M , R , S''' , L'''
	     G''' , M , R , S''' , L''' , Am |- stmtn : () , G'''' , M , R , S'''' , L''''
	---------------------------------------------------------------------------------------- :: pvt
	G , M , R , S , L , C |- in each A1 , .. , Am { stmt1 , .. , stmtn } : () , G'''' , M , R , S'''' , L'''' , C
	
	     G ( x ) = ( Int , C )
	 ------------------------------- :: sendPortToVar
	    G , M , R , S , L , C |- pexp => x ; : () , G , M , R , S , L , C 

	     G ( x ) = ( Int , C )
	 ------------------------------- :: sendVarToPort
	    G , M , R , S , L , C |- x => pexp ; : () , G , M , R , S , L , C 

	      G , M , R , S , L , C|- exp : tau
	      G , M , R , S , L , C|- exp' : tau'
	      tau belongsto { Port , Int , Bool , unknown }
	      tau' belongsto { Port , Int , Bool , unknown }
	 ---------------------------------------------------------------- :: sendExprToExpr
	      G , M , R , S , L , C|- exp => exp' : () , G , M , R , S , L , C 

	       G ( x ) = ( tau , C )
	       G , M , R , S , L , C |- exp : tau
	 ---------------------------------------------------------------- ::  assignmnt
	     G , M , R , S , L , C|- x = exp; : () , G , M , R , S , L , C 

	 G ( s ) = ( Session , C )
	 P belongsto dom M 
 	 M ( P ) = ( argsig , { A1 , .. , Am } )
	 G ( x1 ) = ( tau1 , C)
	 G ( xn ) = ( taun , C)
	 [ tau1 , .. , taun ] == argsig
	 G ( B1 ) = ( Party , C )
	 G ( Bm ) = ( Party , C )
	 S' = S [ s -> P ]
------------------------------------------------------------------------------------- :: openSession
 G , M , R , S , L , C|- open  s  as  P ( x1 , .. , xn ) { A1 : B1 , .. , Am : Bm } : () , G , M , R , S' , C 

	   G ( A ) = ( Party , C )
	   P belongsto dom M 
	   G ( x1 ) = ( tau1 , _ )
	   G ( xn ) = ( taun , _ )
	   M ( P ) = ( argsig , { A1 , .. , Am } )
	   B belongsto { A1 , .. , Am }
	   [ tau1 , .. , taun ] == argsig
	   ( P , B ) belongsto dom R
	   R ( P , B ) = portlist
	   L' = L [ ( A , C ) -> portlist ]
	 ------------------------------- :: set
	 G , M , R , S , L , C |- set A as P ( x1 , .. , xn )::B : () , G , M , R , S , L' , C 
         
	    G , M , R , S , L , C |- wstmt : () , G' , M , R , S' , L' 
	    G' , M , R , S' , L' , C |- wstmt : () , G'' , M , R , S'' , L'' 
	-------------------------------- :: wrap
	  G , M , R , S , L , C|- wrap { wstmt } : () , G'' , M , R , S'' , L'' , C 

	     	G , M , R , S , L , C|- pexp : Port
		G , M , R , S , L , C|- pexp' : Port
	---------------------------------------------- :: connectTo
        G , M , R , S , L , C|- connect pexp to pexp' : () , G , M , R , S , L , C 

	     	G , M , R , S , L , C|- pexp : Port
		G , M , R , S , L , C|- pexp' : Port
	---------------------------------------------- :: connectAnd
        G , M , R , S , L , C|- connect pexp and pexp' : () , G , M , R , S , L , C

	
defn Tenv |- wstmt : tau , Tenv' :: :: Wrapstmt :: Wrapstmt_ by

     	       G , M , R , S , L , C|- pexp : Port
	       G , M , R , S , L , C |- stmt1 : () , G' , M , R , S' , L' 
	       G' , M , R , S' , L' , C |- stmtn : () , G'' , M , R , S'' , L'' 
	    ---------------------------------------------- :: before
	G , M , R , S , L , C|- before pexp do { statement1 , .. , statementn } : () , G'' , M , R , S'' , L'' 

       	       G , M , R , S , L , C|- pexp : Port
	       G , M , R , S , L , C |- stmt1 : () , G' , M , R , S' , L' 
	       G' , M , R , S' , L' , C |- stmtn : () , G'' , M , R , S'' , L'' 
	---------------------------------------------- :: after
	G , M , R , S , L , C|- after pexp do { statement1 , .. , statementn } : () , G'' , M , R , S'' , L'' 

defn   Tenv |- prtcl : tau , Tenv' :: :: Protocol :: Prtcl_  by
  	       P notin dom M
	       G' = G [ P -> ( Protocol , W ) ]
	       G'' = G' [ x1 -> ( tau1 , W ) ]
	       G''' = G'' [ A -> ( Party , W ) ]
	       portlist = { x'1 , .. , x'i }
	       R' = R [ ( P , A ) -> portlist ]
	       M' = M [ P -> ( argsig , { A1 , .. , Am } ) ]
	       G''' , M' , R' , S , L |- prtcl' : () , G''' , M'' , R'' , S , L 
	       G''' , M'' , R'' , S , L , C |- stmt : () , G'''' , M'' , R''' , S''' , L'''
	----------------------------------------------- :: decl
	M , R |- protocol P ( tau1 x1 , .. , taun xn ( prtcl' ) ) : party A each with { Port x1' , .. , Port xi' } { stmt } : () , M'' , R''
	
defn	Tenv |- exp : tau :: :: Exp :: Exp_ by

		G , M , R , S , L , C|- exp : tau
		G , M , R , S , L , C|- exp' : tau
	--------------------------------------------- :: Addition
		G , M , R , S , L , C|- exp + exp' : tau


		G ( A ) = ( Party , C )
	        G ( x ) = ( Int , A )
		%tau belongsto { Int}
	--------------------------------------------- :: PartyVar
		G , M , R , S , L , C|- A . x : Int
		
		G ( x ) = ( tau , _ )
	--------------------------------------------- :: Statement
		G , M , R , S , L |- x : tau

defn Tenv |- pexp : tau :: :: Pexp :: Pexp_ by

     	  G ( s ) = ( Session , C )
	  S ( s ) = P
          M ( P ) = ( argsig , { A1 , .. , Am } )
	  A belongsto { A1 , .. , Am }
	  R ( P , A ) = portlist
	  r belongsto portlist
        ----------------------------------------------- :: ExpToEnv
     	  G , M , R , S , L , C |-  s . A I r : Port

                G ( A ) = ( Party , C )
		L ( A , C ) = portlist
		r belongsto portlist
	  ---------------------------------------------- :: PortOfParty
	  G , M , R , S , L , C |- A I r : Port

	 G ( C ) = ( Party , _ )
	 L ( C , _ ) = portlist
	 r belongsto portlist
	 ------------------------------------------- :: PortOfCurntParty
	 G , M , R , S , L , C |- r : Port



{{ com
\section{Compilation Semantics}
\label{sec.comp}
The following rules define the compilation sematics of our language. Our language
first gets compiled to the following representation.
}}
% G , M , R , S , L , C |- 
% ************* Opertional Semantics rule =======================================================
defns
  Jop :: '' ::=
  defn
	Cenv |- stmt : Cenv' :: ::  stmt_com :: Compl_
	{{ com Compiling Statements }} by

	    O < D > crt ( tau x ; ) : O' < D >
	------------------------------- :: decl
	 O , D |- tau x ; : O' < D >

	   O < D > |- stmt ; : O' < D >
	   O' < D > |- stmt' ; : O'' < D >
	 ------------------------------- ::  seq
	 O , D |- stmt; stmt'; : O'' < D >
	   
	     E ( P_c , A_1 , _ ) = O < A_1 >
	     E ( P_c , A_m , _ ) = O < A_m >
	E , K , P_c , O , A_1 |- stmt , E' , K' , P_c' , O'
	E' , K' , P_c' , O' , A_m |- stmt , E'' , K'' , P_c'' , O'' 
	-------------------------------------- :: pvt
	E , P_c , O |- in each A_1 , .. , A_m { stmt } : E'' , K'' , P_c'' , O''

	O , D |- pexp = ( A , r ) 
	O < D > apnd ( x = read ( A . r ) ) : O' < D > 
	------------------------------- :: sendPortToVar
	 O , D |- pexp => x ; : O'

	 O , D |- pexp = ( A , r )
	O < D > apnd ( A . r = read ( x ) ) : O' < D > 
	------------------------------- :: sendVarToPort
	 O , D |- x => pexp ; : O'

	 O , D |- pexp = ( A , r_1 )
	 O , D |- pexp' = ( B , r_2 )
	 O < D > apnd ( B . r_2 = read ( A . r_1 ) ) : O' < D >
	 ---------------------------------------------------------- :: sendPexpToPexp
	 O , D |- pexp => pexp' ; : O'
	 
	  O < A > apnd ( send x to B ) : O' < A >
	-------------------------------- :: sendExprToExpr_A
	O , A  |- A . x => B . y : O' < A >

	O < B > apnd ( y = read ( A ) ) : O' < B >
	-------------------------------- :: sendExprToExpr_B
	O , B |- A . x => B . y : O' < B >

	O < D > apnd ( x = exp ) : O' < D >
	-------------------------------- :: assignment
  	 O , D |- x = exp ; : O' < D >

	     E ( P_c , B , _ ) = O < B >
	     E ( P , A , _ ) = O < A >
	     E' = E [ ( P_c , s . A , B ) -> O < s  . A > ]
	     O < A > copy O < s . A >
	     O < B > crt ( Port s . A . environ ) : O' < B > 
	     P_c crt ( wire w )
	     O < B > atch ( s . A . environ <-> w )
	     O < s . A > atch ( environ <-> w )
	     K ( O < A > ) = { ( r1 Port1 ) , .. , ( rn Portn ) }	     
	     O < s . A > crt ( Port1 r1 , .. , Portn rn ) : O' < s . A >
	     O < B > crt ( Port1 s . A . r1 , .. , Portn s . A . rn ) : O' < B >
	     P_c crt ( wire w1 , .. , wire wn )
	     O < B > atch ( s . A . r1 <-> w1 , .. , s . A . rn <-> wn )
	     O < s . A > atch ( r1 <-> w1 , .. , rn <-> wn )
	     K' = K [ O < s . A > -> { ( r1 Port1 ) , .. , ( rn Portn ) } ]
	     K''  = K' [ O < B > -> K ( O < B > ) union { ( s . A . environ Port ) } ]
	     K''' = K'' [ O < B > -> K ( O < B > ) union { ( s . A . r1 Port1 ) , .. , ( s . A . rn Portn ) } ]
	------------------------------------------------------------- ::  openSession
	E , K , P_c , O , D |- open  s  as  P ( x1 , .. , xi ) { A : B } : E' , K''' , P_c' , O'
	
% Compilation rules for set
	    E ( P , B , _ ) = O < B >
	    E' = E [ ( P_c , A , D ) -> O < A . D > ]
	    O < B > copy O < A . D >
	    K ( O < B > ) = { ( r_1 Port1 ) , .. , ( r_n Portn ) }
	    O < A . D > crt ( Port1 r1 , .. , Portn rn ) : O' < A . D >
	    O < D > crt ( Port1 A . r1 , .. , Portn A . rn ) : O' < D >
	    P_c crt ( wire w1 , .. , wire wn )
	    O < A . D > atch ( r_1 <-> w_1 , .. , r_n <-> w_n )
	    O < D > atch ( A . r_1 <-> w_1 , .. , A . r_n <-> w_n )
	    K' = K [ O < A . D > -> { ( r1 Port1 ) , .. , ( rn Portn ) } ]
	    K'' = K [ O < D > -> K ( O < D > ) union { ( A . r1 Port1 ) , .. , ( A . rn Portn ) } ]
      --------------------------------------------------------------------------------------------------- :: set
	E , K , P_c , O , D |- set A as P ( x1 , .. , xi )::B : K'' , P_c' , E' , O' < A . D > , O' < D >

	    O < D > apnd ( while ( true ) { /* str */ } ) : O' < D >
	    E , K , O' , D |- wstmt : O''
	------------------------------------------------------------- :: wrap
	     O , D |- wrap { wstmt } : O''
	     
	   O < D > crt ( wire w ) : O' < D >
	   O' , D |- pexp = ( A , r_1 )
           O' , D |- pexp' = ( B , r_2 )
	   O' < D > atch ( A . r_1 --> w )
	   O' < D > atch ( B . r_2 <-- w )
	------------------------------------------------------------ ::  connect_To
	 O , D |- connect pexp to pexp' : O' < D >
	 
	    O < D > crt ( wire w ) : O' < D >
	    O' , D |-  pexp = ( A , r_1 ) 
	    O' , D |- pexp' = ( B , r_2 )
	    O' < D > atch ( A . r_1 <-> w )
	    O' < D > atch ( B . r_2 <-> w )
	------------------------------------------------------------ :: connect_And
	 O , D |- connect pexp and pexp' : O' < D >
	
defn
	Cenv |- wstmt : Cenv' :: ::  wstmt_com :: Compl_
	{{ com Compiling statements inside wrap }} by

	    O , D  |- pexp = ( A , r )
	    E' = E [ ( _ , _ , Z ) -> O < Z > ]
	    O < D > replace ( /* str */ , if ( A . r . ITR ) { /* str */ } ) : O' < D >
	    O' , Z |- stmt1 : O''
	    O'' , Z |- stmtn : O'''
	    O' < D > replace ( /* str */ , O''' < Z > ) : O'' < D >
	------------------------------------------------------------- :: before
	 E , O , D |- before pexp do { statement1 , .. , statementn } : E , O'

	    O , D  |- pexp = ( A , r )
	    E' = E [ ( _ , _ , Z ) -> O < Z > ]
	    O < D > replace ( /* str */ , if ( A . r . HWR ) { /* str */ } ) : O' < D >
	    O' , Z |- stmt1 : O''
	    O'' , Z |- stmtn : O'''
	    O' < D > replace ( /* str */ , O''' < Z > ) : O'' < D >	    
	------------------------------------------------------------- :: after
	  E , O , D |- after pexp do { statement1 , .. , statementn } : E , O'
defn
	Cenv |- prtcl : Cenv' :: ::  prtcl_com :: Compl_
	{{ com Compiling Protocol }} by

	E' = E [ ( P , A_1 , _ ) -> O < A_1 > ]
	E'' = E' [ ( P , A_m , _ ) -> O < A_m > ]
	O < A_1 > crt ( tau1 x1 , .. , taun xn ; ) : O' < A_1 >
	O' < A_1 > crt ( Port1 y1 , .. , Porti yi ) : O'' < A_1 >
	% O'' < A_1 > crt ( Port A2 , .. , Port Am ) : O''' < A_1 > // OTT complains
	O'' < A_1 > crt ( Port A2 ) : O'' < A_1 >
	O'' < A_1 > crt ( Port Am ) : O''' < A_1 >
	O''' < A_1 > crt ( Port environ ) : O'''' < A_1 >
	O < A_m > crt ( tau1 x1 , .. , taun xn ; ) : O' < A_m >
	O' < A_m > crt ( Port1 y1 , .. , Porti yi ) : O'' < A_m >
	% O'' < A_m > crt ( Port A1 , .. , Port Am-1 ) : O''' < A_m > // OTT complains
	O'' < A_m > crt ( Port A1 ) : O'' < A_m >
	O'' < A_m > crt ( Port Am-1 ) : O''' < A_m >
	O''' < A_m > crt ( Port environ ) : O'''' < A_m >
	m' = m - 1 
	j = ( m *  m' ) / 2
	P crt ( wire w1 , .. , wire wj )
	O'''' < A_1 > atch ( A_2 <-> w_1 )
	O'''' < A_1 > atch ( A_m <-> w_m-1 )
	O'''' < A_m > atch ( A_1 <-> w_i )
	O'''' < A_m > atch ( A_m-1 <-> w_j )
	K' = K [ O < A_1 > -> { ( y1 Port1 ) , .. , ( yi Porti ) } ]
	K'' = K' [ O < A_1 > -> K ( O < A_1 > ) union { ( A2 Port ) , .. , ( Am Port ) } ]
	K''' = K'' [ O < A_1 > -> K ( O < A_1 > ) union { ( environ Port ) } ]
	K'''' = K''' [ O < A_m > -> { ( y1 Port1 ) , .. , ( yi Porti ) } ]
	K''''' = K'''' [ O < A_m > -> K ( O < A_m > ) union { ( A_1 Port ) , .. , ( A_m-1 Port ) } ]
	K'''''' = K''''' [ O < A_m > -> K ( O < A_m > ) union { ( environ Port ) } ]
	E'' , K'''''' , P , O'''' , A_1 |- stmt : E''' , K''''''' , P' , O'''''
      ------------------------------------------------------------------------- :: prtcl
	 E , K , O , D |- protocol P ( tau1 x1 , .. , taun xn ( prtcl' ) ) : party A each with { Port1 y1 , .. , Porti yi } { stmt } : E' , K''''''' , O'''''

defn
	Cenv |- exp : impl_instr :: ::  exp_com :: Compl_Exp_
	{{ com Compiling expressions }} by

	------------------------------------------------------ :: Statement
	 _ |- x : read ( x )

	------------------------------------------------------ :: Addition
	_ |- exp + exp' : read ( exp ) + read ( exp' )

defn
	Cenv |- pexp : ( scope , portname ) :: :: pexp_co :: Compl_
	{{ com Compiling Port Expression }} by

	---------------------------------------------------- :: ExpToEnv
	O , D |- s . A I r : ( s . A , r )

	---------------------------------------------------- :: PortOfAnotherParty
	O , D |- A I B : ( A , B )

	------------------------------------------------- :: OnlyPortOfCurntParty
	O , D |- r : ( D , r )